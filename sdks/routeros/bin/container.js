"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Container extends pulumi.CustomResource {
    /**
     * Get an existing Container resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Container(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Container.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Container.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["arch"] = state ? state.arch : undefined;
            resourceInputs["cmd"] = state ? state.cmd : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["containerId"] = state ? state.containerId : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["entrypoint"] = state ? state.entrypoint : undefined;
            resourceInputs["envlist"] = state ? state.envlist : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["mounts"] = state ? state.mounts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["remoteImage"] = state ? state.remoteImage : undefined;
            resourceInputs["rootDir"] = state ? state.rootDir : undefined;
            resourceInputs["startOnBoot"] = state ? state.startOnBoot : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stopSignal"] = state ? state.stopSignal : undefined;
            resourceInputs["tag"] = state ? state.tag : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["workdir"] = state ? state.workdir : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["cmd"] = args ? args.cmd : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["containerId"] = args ? args.containerId : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["entrypoint"] = args ? args.entrypoint : undefined;
            resourceInputs["envlist"] = args ? args.envlist : undefined;
            resourceInputs["file"] = args ? args.file : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["mounts"] = args ? args.mounts : undefined;
            resourceInputs["remoteImage"] = args ? args.remoteImage : undefined;
            resourceInputs["rootDir"] = args ? args.rootDir : undefined;
            resourceInputs["startOnBoot"] = args ? args.startOnBoot : undefined;
            resourceInputs["stopSignal"] = args ? args.stopSignal : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["workdir"] = args ? args.workdir : undefined;
            resourceInputs["arch"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["os"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Container.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Container = Container;
/** @internal */
Container.__pulumiType = 'routeros:index/container:Container';
//# sourceMappingURL=container.js.map