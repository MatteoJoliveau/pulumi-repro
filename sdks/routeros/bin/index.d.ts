export { BridgeArgs, BridgeState } from "./bridge";
export type Bridge = import("./bridge").Bridge;
export declare const Bridge: typeof import("./bridge").Bridge;
export { BridgeMlagArgs, BridgeMlagState } from "./bridgeMlag";
export type BridgeMlag = import("./bridgeMlag").BridgeMlag;
export declare const BridgeMlag: typeof import("./bridgeMlag").BridgeMlag;
export { BridgePortArgs, BridgePortState } from "./bridgePort";
export type BridgePort = import("./bridgePort").BridgePort;
export declare const BridgePort: typeof import("./bridgePort").BridgePort;
export { BridgeVlanArgs, BridgeVlanState } from "./bridgeVlan";
export type BridgeVlan = import("./bridgeVlan").BridgeVlan;
export declare const BridgeVlan: typeof import("./bridgeVlan").BridgeVlan;
export { CapsmanAaaArgs, CapsmanAaaState } from "./capsmanAaa";
export type CapsmanAaa = import("./capsmanAaa").CapsmanAaa;
export declare const CapsmanAaa: typeof import("./capsmanAaa").CapsmanAaa;
export { CapsmanAccessListArgs, CapsmanAccessListState } from "./capsmanAccessList";
export type CapsmanAccessList = import("./capsmanAccessList").CapsmanAccessList;
export declare const CapsmanAccessList: typeof import("./capsmanAccessList").CapsmanAccessList;
export { CapsmanChannelArgs, CapsmanChannelState } from "./capsmanChannel";
export type CapsmanChannel = import("./capsmanChannel").CapsmanChannel;
export declare const CapsmanChannel: typeof import("./capsmanChannel").CapsmanChannel;
export { CapsmanConfigurationArgs, CapsmanConfigurationState } from "./capsmanConfiguration";
export type CapsmanConfiguration = import("./capsmanConfiguration").CapsmanConfiguration;
export declare const CapsmanConfiguration: typeof import("./capsmanConfiguration").CapsmanConfiguration;
export { CapsmanDatapathArgs, CapsmanDatapathState } from "./capsmanDatapath";
export type CapsmanDatapath = import("./capsmanDatapath").CapsmanDatapath;
export declare const CapsmanDatapath: typeof import("./capsmanDatapath").CapsmanDatapath;
export { CapsmanInterfaceArgs, CapsmanInterfaceState } from "./capsmanInterface";
export type CapsmanInterface = import("./capsmanInterface").CapsmanInterface;
export declare const CapsmanInterface: typeof import("./capsmanInterface").CapsmanInterface;
export { CapsmanManagerArgs, CapsmanManagerState } from "./capsmanManager";
export type CapsmanManager = import("./capsmanManager").CapsmanManager;
export declare const CapsmanManager: typeof import("./capsmanManager").CapsmanManager;
export { CapsmanManagerInterfaceArgs, CapsmanManagerInterfaceState } from "./capsmanManagerInterface";
export type CapsmanManagerInterface = import("./capsmanManagerInterface").CapsmanManagerInterface;
export declare const CapsmanManagerInterface: typeof import("./capsmanManagerInterface").CapsmanManagerInterface;
export { CapsmanProvisioningArgs, CapsmanProvisioningState } from "./capsmanProvisioning";
export type CapsmanProvisioning = import("./capsmanProvisioning").CapsmanProvisioning;
export declare const CapsmanProvisioning: typeof import("./capsmanProvisioning").CapsmanProvisioning;
export { CapsmanRatesArgs, CapsmanRatesState } from "./capsmanRates";
export type CapsmanRates = import("./capsmanRates").CapsmanRates;
export declare const CapsmanRates: typeof import("./capsmanRates").CapsmanRates;
export { CapsmanSecurityArgs, CapsmanSecurityState } from "./capsmanSecurity";
export type CapsmanSecurity = import("./capsmanSecurity").CapsmanSecurity;
export declare const CapsmanSecurity: typeof import("./capsmanSecurity").CapsmanSecurity;
export { CertificateScepServerArgs, CertificateScepServerState } from "./certificateScepServer";
export type CertificateScepServer = import("./certificateScepServer").CertificateScepServer;
export declare const CertificateScepServer: typeof import("./certificateScepServer").CertificateScepServer;
export { ContainerArgs, ContainerState } from "./container";
export type Container = import("./container").Container;
export declare const Container: typeof import("./container").Container;
export { ContainerConfigArgs, ContainerConfigState } from "./containerConfig";
export type ContainerConfig = import("./containerConfig").ContainerConfig;
export declare const ContainerConfig: typeof import("./containerConfig").ContainerConfig;
export { ContainerEnvsArgs, ContainerEnvsState } from "./containerEnvs";
export type ContainerEnvs = import("./containerEnvs").ContainerEnvs;
export declare const ContainerEnvs: typeof import("./containerEnvs").ContainerEnvs;
export { ContainerMountsArgs, ContainerMountsState } from "./containerMounts";
export type ContainerMounts = import("./containerMounts").ContainerMounts;
export declare const ContainerMounts: typeof import("./containerMounts").ContainerMounts;
export { DhcpClientArgs, DhcpClientState } from "./dhcpClient";
export type DhcpClient = import("./dhcpClient").DhcpClient;
export declare const DhcpClient: typeof import("./dhcpClient").DhcpClient;
export { DhcpClientOptionArgs, DhcpClientOptionState } from "./dhcpClientOption";
export type DhcpClientOption = import("./dhcpClientOption").DhcpClientOption;
export declare const DhcpClientOption: typeof import("./dhcpClientOption").DhcpClientOption;
export { DhcpServerArgs, DhcpServerState } from "./dhcpServer";
export type DhcpServer = import("./dhcpServer").DhcpServer;
export declare const DhcpServer: typeof import("./dhcpServer").DhcpServer;
export { DhcpServerLeaseArgs, DhcpServerLeaseState } from "./dhcpServerLease";
export type DhcpServerLease = import("./dhcpServerLease").DhcpServerLease;
export declare const DhcpServerLease: typeof import("./dhcpServerLease").DhcpServerLease;
export { DhcpServerNetworkArgs, DhcpServerNetworkState } from "./dhcpServerNetwork";
export type DhcpServerNetwork = import("./dhcpServerNetwork").DhcpServerNetwork;
export declare const DhcpServerNetwork: typeof import("./dhcpServerNetwork").DhcpServerNetwork;
export { DnsArgs, DnsState } from "./dns";
export type Dns = import("./dns").Dns;
export declare const Dns: typeof import("./dns").Dns;
export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export declare const DnsRecord: typeof import("./dnsRecord").DnsRecord;
export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export declare const File: typeof import("./file").File;
export { FirewallAddrListArgs, FirewallAddrListState } from "./firewallAddrList";
export type FirewallAddrList = import("./firewallAddrList").FirewallAddrList;
export declare const FirewallAddrList: typeof import("./firewallAddrList").FirewallAddrList;
export { FirewallFilterArgs, FirewallFilterState } from "./firewallFilter";
export type FirewallFilter = import("./firewallFilter").FirewallFilter;
export declare const FirewallFilter: typeof import("./firewallFilter").FirewallFilter;
export { FirewallMangleArgs, FirewallMangleState } from "./firewallMangle";
export type FirewallMangle = import("./firewallMangle").FirewallMangle;
export declare const FirewallMangle: typeof import("./firewallMangle").FirewallMangle;
export { FirewallNatArgs, FirewallNatState } from "./firewallNat";
export type FirewallNat = import("./firewallNat").FirewallNat;
export declare const FirewallNat: typeof import("./firewallNat").FirewallNat;
export { GetFilesArgs, GetFilesResult, GetFilesOutputArgs } from "./getFiles";
export declare const getFiles: typeof import("./getFiles").getFiles;
export declare const getFilesOutput: typeof import("./getFiles").getFilesOutput;
export { GetFirewallArgs, GetFirewallResult, GetFirewallOutputArgs } from "./getFirewall";
export declare const getFirewall: typeof import("./getFirewall").getFirewall;
export declare const getFirewallOutput: typeof import("./getFirewall").getFirewallOutput;
export { GetInterfacesArgs, GetInterfacesResult, GetInterfacesOutputArgs } from "./getInterfaces";
export declare const getInterfaces: typeof import("./getInterfaces").getInterfaces;
export declare const getInterfacesOutput: typeof import("./getInterfaces").getInterfacesOutput;
export { GetIpAddressesArgs, GetIpAddressesResult, GetIpAddressesOutputArgs } from "./getIpAddresses";
export declare const getIpAddresses: typeof import("./getIpAddresses").getIpAddresses;
export declare const getIpAddressesOutput: typeof import("./getIpAddresses").getIpAddressesOutput;
export { GetIpArpArgs, GetIpArpResult, GetIpArpOutputArgs } from "./getIpArp";
export declare const getIpArp: typeof import("./getIpArp").getIpArp;
export declare const getIpArpOutput: typeof import("./getIpArp").getIpArpOutput;
export { GetIpDhcpServerLeasesArgs, GetIpDhcpServerLeasesResult, GetIpDhcpServerLeasesOutputArgs } from "./getIpDhcpServerLeases";
export declare const getIpDhcpServerLeases: typeof import("./getIpDhcpServerLeases").getIpDhcpServerLeases;
export declare const getIpDhcpServerLeasesOutput: typeof import("./getIpDhcpServerLeases").getIpDhcpServerLeasesOutput;
export { GetIpFirewallArgs, GetIpFirewallResult, GetIpFirewallOutputArgs } from "./getIpFirewall";
export declare const getIpFirewall: typeof import("./getIpFirewall").getIpFirewall;
export declare const getIpFirewallOutput: typeof import("./getIpFirewall").getIpFirewallOutput;
export { GetIpRoutesArgs, GetIpRoutesResult, GetIpRoutesOutputArgs } from "./getIpRoutes";
export declare const getIpRoutes: typeof import("./getIpRoutes").getIpRoutes;
export declare const getIpRoutesOutput: typeof import("./getIpRoutes").getIpRoutesOutput;
export { GetIpServicesArgs, GetIpServicesResult, GetIpServicesOutputArgs } from "./getIpServices";
export declare const getIpServices: typeof import("./getIpServices").getIpServices;
export declare const getIpServicesOutput: typeof import("./getIpServices").getIpServicesOutput;
export { GetIpv6AddressesArgs, GetIpv6AddressesResult, GetIpv6AddressesOutputArgs } from "./getIpv6Addresses";
export declare const getIpv6Addresses: typeof import("./getIpv6Addresses").getIpv6Addresses;
export declare const getIpv6AddressesOutput: typeof import("./getIpv6Addresses").getIpv6AddressesOutput;
export { GetIpv6FirewallArgs, GetIpv6FirewallResult, GetIpv6FirewallOutputArgs } from "./getIpv6Firewall";
export declare const getIpv6Firewall: typeof import("./getIpv6Firewall").getIpv6Firewall;
export declare const getIpv6FirewallOutput: typeof import("./getIpv6Firewall").getIpv6FirewallOutput;
export { GetSystemResourceArgs, GetSystemResourceResult, GetSystemResourceOutputArgs } from "./getSystemResource";
export declare const getSystemResource: typeof import("./getSystemResource").getSystemResource;
export declare const getSystemResourceOutput: typeof import("./getSystemResource").getSystemResourceOutput;
export { GetSystemRouterboardArgs, GetSystemRouterboardResult, GetSystemRouterboardOutputArgs } from "./getSystemRouterboard";
export declare const getSystemRouterboard: typeof import("./getSystemRouterboard").getSystemRouterboard;
export declare const getSystemRouterboardOutput: typeof import("./getSystemRouterboard").getSystemRouterboardOutput;
export { GetWifiEasyConnectArgs, GetWifiEasyConnectResult, GetWifiEasyConnectOutputArgs } from "./getWifiEasyConnect";
export declare const getWifiEasyConnect: typeof import("./getWifiEasyConnect").getWifiEasyConnect;
export declare const getWifiEasyConnectOutput: typeof import("./getWifiEasyConnect").getWifiEasyConnectOutput;
export { GetX509Args, GetX509Result, GetX509OutputArgs } from "./getX509";
export declare const getX509: typeof import("./getX509").getX509;
export declare const getX509Output: typeof import("./getX509").getX509Output;
export { GreArgs, GreState } from "./gre";
export type Gre = import("./gre").Gre;
export declare const Gre: typeof import("./gre").Gre;
export { IdentityArgs, IdentityState } from "./identity";
export type Identity = import("./identity").Identity;
export declare const Identity: typeof import("./identity").Identity;
export { Interface6to4Args, Interface6to4State } from "./interface6to4";
export type Interface6to4 = import("./interface6to4").Interface6to4;
export declare const Interface6to4: typeof import("./interface6to4").Interface6to4;
export { InterfaceBondingArgs, InterfaceBondingState } from "./interfaceBonding";
export type InterfaceBonding = import("./interfaceBonding").InterfaceBonding;
export declare const InterfaceBonding: typeof import("./interfaceBonding").InterfaceBonding;
export { InterfaceBridgeArgs, InterfaceBridgeState } from "./interfaceBridge";
export type InterfaceBridge = import("./interfaceBridge").InterfaceBridge;
export declare const InterfaceBridge: typeof import("./interfaceBridge").InterfaceBridge;
export { InterfaceBridgePortArgs, InterfaceBridgePortState } from "./interfaceBridgePort";
export type InterfaceBridgePort = import("./interfaceBridgePort").InterfaceBridgePort;
export declare const InterfaceBridgePort: typeof import("./interfaceBridgePort").InterfaceBridgePort;
export { InterfaceBridgeSettingsArgs, InterfaceBridgeSettingsState } from "./interfaceBridgeSettings";
export type InterfaceBridgeSettings = import("./interfaceBridgeSettings").InterfaceBridgeSettings;
export declare const InterfaceBridgeSettings: typeof import("./interfaceBridgeSettings").InterfaceBridgeSettings;
export { InterfaceBridgeVlanArgs, InterfaceBridgeVlanState } from "./interfaceBridgeVlan";
export type InterfaceBridgeVlan = import("./interfaceBridgeVlan").InterfaceBridgeVlan;
export declare const InterfaceBridgeVlan: typeof import("./interfaceBridgeVlan").InterfaceBridgeVlan;
export { InterfaceDot1xClientArgs, InterfaceDot1xClientState } from "./interfaceDot1xClient";
export type InterfaceDot1xClient = import("./interfaceDot1xClient").InterfaceDot1xClient;
export declare const InterfaceDot1xClient: typeof import("./interfaceDot1xClient").InterfaceDot1xClient;
export { InterfaceDot1xServerArgs, InterfaceDot1xServerState } from "./interfaceDot1xServer";
export type InterfaceDot1xServer = import("./interfaceDot1xServer").InterfaceDot1xServer;
export declare const InterfaceDot1xServer: typeof import("./interfaceDot1xServer").InterfaceDot1xServer;
export { InterfaceEoipArgs, InterfaceEoipState } from "./interfaceEoip";
export type InterfaceEoip = import("./interfaceEoip").InterfaceEoip;
export declare const InterfaceEoip: typeof import("./interfaceEoip").InterfaceEoip;
export { InterfaceEthernetArgs, InterfaceEthernetState } from "./interfaceEthernet";
export type InterfaceEthernet = import("./interfaceEthernet").InterfaceEthernet;
export declare const InterfaceEthernet: typeof import("./interfaceEthernet").InterfaceEthernet;
export { InterfaceEthernetSwitchArgs, InterfaceEthernetSwitchState } from "./interfaceEthernetSwitch";
export type InterfaceEthernetSwitch = import("./interfaceEthernetSwitch").InterfaceEthernetSwitch;
export declare const InterfaceEthernetSwitch: typeof import("./interfaceEthernetSwitch").InterfaceEthernetSwitch;
export { InterfaceEthernetSwitchHostArgs, InterfaceEthernetSwitchHostState } from "./interfaceEthernetSwitchHost";
export type InterfaceEthernetSwitchHost = import("./interfaceEthernetSwitchHost").InterfaceEthernetSwitchHost;
export declare const InterfaceEthernetSwitchHost: typeof import("./interfaceEthernetSwitchHost").InterfaceEthernetSwitchHost;
export { InterfaceEthernetSwitchPortArgs, InterfaceEthernetSwitchPortState } from "./interfaceEthernetSwitchPort";
export type InterfaceEthernetSwitchPort = import("./interfaceEthernetSwitchPort").InterfaceEthernetSwitchPort;
export declare const InterfaceEthernetSwitchPort: typeof import("./interfaceEthernetSwitchPort").InterfaceEthernetSwitchPort;
export { InterfaceEthernetSwitchPortIsolationArgs, InterfaceEthernetSwitchPortIsolationState } from "./interfaceEthernetSwitchPortIsolation";
export type InterfaceEthernetSwitchPortIsolation = import("./interfaceEthernetSwitchPortIsolation").InterfaceEthernetSwitchPortIsolation;
export declare const InterfaceEthernetSwitchPortIsolation: typeof import("./interfaceEthernetSwitchPortIsolation").InterfaceEthernetSwitchPortIsolation;
export { InterfaceEthernetSwitchRuleArgs, InterfaceEthernetSwitchRuleState } from "./interfaceEthernetSwitchRule";
export type InterfaceEthernetSwitchRule = import("./interfaceEthernetSwitchRule").InterfaceEthernetSwitchRule;
export declare const InterfaceEthernetSwitchRule: typeof import("./interfaceEthernetSwitchRule").InterfaceEthernetSwitchRule;
export { InterfaceEthernetSwitchVlanArgs, InterfaceEthernetSwitchVlanState } from "./interfaceEthernetSwitchVlan";
export type InterfaceEthernetSwitchVlan = import("./interfaceEthernetSwitchVlan").InterfaceEthernetSwitchVlan;
export declare const InterfaceEthernetSwitchVlan: typeof import("./interfaceEthernetSwitchVlan").InterfaceEthernetSwitchVlan;
export { InterfaceGreArgs, InterfaceGreState } from "./interfaceGre";
export type InterfaceGre = import("./interfaceGre").InterfaceGre;
export declare const InterfaceGre: typeof import("./interfaceGre").InterfaceGre;
export { InterfaceIpipArgs, InterfaceIpipState } from "./interfaceIpip";
export type InterfaceIpip = import("./interfaceIpip").InterfaceIpip;
export declare const InterfaceIpip: typeof import("./interfaceIpip").InterfaceIpip;
export { InterfaceListArgs, InterfaceListState } from "./interfaceList";
export type InterfaceList = import("./interfaceList").InterfaceList;
export declare const InterfaceList: typeof import("./interfaceList").InterfaceList;
export { InterfaceListMemberArgs, InterfaceListMemberState } from "./interfaceListMember";
export type InterfaceListMember = import("./interfaceListMember").InterfaceListMember;
export declare const InterfaceListMember: typeof import("./interfaceListMember").InterfaceListMember;
export { InterfaceLteArgs, InterfaceLteState } from "./interfaceLte";
export type InterfaceLte = import("./interfaceLte").InterfaceLte;
export declare const InterfaceLte: typeof import("./interfaceLte").InterfaceLte;
export { InterfaceLteApnArgs, InterfaceLteApnState } from "./interfaceLteApn";
export type InterfaceLteApn = import("./interfaceLteApn").InterfaceLteApn;
export declare const InterfaceLteApn: typeof import("./interfaceLteApn").InterfaceLteApn;
export { InterfaceMacvlanArgs, InterfaceMacvlanState } from "./interfaceMacvlan";
export type InterfaceMacvlan = import("./interfaceMacvlan").InterfaceMacvlan;
export declare const InterfaceMacvlan: typeof import("./interfaceMacvlan").InterfaceMacvlan;
export { InterfaceOvpnClientArgs, InterfaceOvpnClientState } from "./interfaceOvpnClient";
export type InterfaceOvpnClient = import("./interfaceOvpnClient").InterfaceOvpnClient;
export declare const InterfaceOvpnClient: typeof import("./interfaceOvpnClient").InterfaceOvpnClient;
export { InterfaceOvpnServerArgs, InterfaceOvpnServerState } from "./interfaceOvpnServer";
export type InterfaceOvpnServer = import("./interfaceOvpnServer").InterfaceOvpnServer;
export declare const InterfaceOvpnServer: typeof import("./interfaceOvpnServer").InterfaceOvpnServer;
export { InterfacePppoeClientArgs, InterfacePppoeClientState } from "./interfacePppoeClient";
export type InterfacePppoeClient = import("./interfacePppoeClient").InterfacePppoeClient;
export declare const InterfacePppoeClient: typeof import("./interfacePppoeClient").InterfacePppoeClient;
export { InterfaceVethArgs, InterfaceVethState } from "./interfaceVeth";
export type InterfaceVeth = import("./interfaceVeth").InterfaceVeth;
export declare const InterfaceVeth: typeof import("./interfaceVeth").InterfaceVeth;
export { InterfaceVlanArgs, InterfaceVlanState } from "./interfaceVlan";
export type InterfaceVlan = import("./interfaceVlan").InterfaceVlan;
export declare const InterfaceVlan: typeof import("./interfaceVlan").InterfaceVlan;
export { InterfaceVrrpArgs, InterfaceVrrpState } from "./interfaceVrrp";
export type InterfaceVrrp = import("./interfaceVrrp").InterfaceVrrp;
export declare const InterfaceVrrp: typeof import("./interfaceVrrp").InterfaceVrrp;
export { InterfaceVxlanArgs, InterfaceVxlanState } from "./interfaceVxlan";
export type InterfaceVxlan = import("./interfaceVxlan").InterfaceVxlan;
export declare const InterfaceVxlan: typeof import("./interfaceVxlan").InterfaceVxlan;
export { InterfaceVxlanVtepsArgs, InterfaceVxlanVtepsState } from "./interfaceVxlanVteps";
export type InterfaceVxlanVteps = import("./interfaceVxlanVteps").InterfaceVxlanVteps;
export declare const InterfaceVxlanVteps: typeof import("./interfaceVxlanVteps").InterfaceVxlanVteps;
export { InterfaceWireguardArgs, InterfaceWireguardState } from "./interfaceWireguard";
export type InterfaceWireguard = import("./interfaceWireguard").InterfaceWireguard;
export declare const InterfaceWireguard: typeof import("./interfaceWireguard").InterfaceWireguard;
export { InterfaceWireguardPeerArgs, InterfaceWireguardPeerState } from "./interfaceWireguardPeer";
export type InterfaceWireguardPeer = import("./interfaceWireguardPeer").InterfaceWireguardPeer;
export declare const InterfaceWireguardPeer: typeof import("./interfaceWireguardPeer").InterfaceWireguardPeer;
export { InterfaceWirelessArgs, InterfaceWirelessState } from "./interfaceWireless";
export type InterfaceWireless = import("./interfaceWireless").InterfaceWireless;
export declare const InterfaceWireless: typeof import("./interfaceWireless").InterfaceWireless;
export { InterfaceWirelessAccessListArgs, InterfaceWirelessAccessListState } from "./interfaceWirelessAccessList";
export type InterfaceWirelessAccessList = import("./interfaceWirelessAccessList").InterfaceWirelessAccessList;
export declare const InterfaceWirelessAccessList: typeof import("./interfaceWirelessAccessList").InterfaceWirelessAccessList;
export { InterfaceWirelessCapArgs, InterfaceWirelessCapState } from "./interfaceWirelessCap";
export type InterfaceWirelessCap = import("./interfaceWirelessCap").InterfaceWirelessCap;
export declare const InterfaceWirelessCap: typeof import("./interfaceWirelessCap").InterfaceWirelessCap;
export { InterfaceWirelessConnectListArgs, InterfaceWirelessConnectListState } from "./interfaceWirelessConnectList";
export type InterfaceWirelessConnectList = import("./interfaceWirelessConnectList").InterfaceWirelessConnectList;
export declare const InterfaceWirelessConnectList: typeof import("./interfaceWirelessConnectList").InterfaceWirelessConnectList;
export { InterfaceWirelessSecurityProfilesArgs, InterfaceWirelessSecurityProfilesState } from "./interfaceWirelessSecurityProfiles";
export type InterfaceWirelessSecurityProfiles = import("./interfaceWirelessSecurityProfiles").InterfaceWirelessSecurityProfiles;
export declare const InterfaceWirelessSecurityProfiles: typeof import("./interfaceWirelessSecurityProfiles").InterfaceWirelessSecurityProfiles;
export { IpAddressArgs, IpAddressState } from "./ipAddress";
export type IpAddress = import("./ipAddress").IpAddress;
export declare const IpAddress: typeof import("./ipAddress").IpAddress;
export { IpCloudArgs, IpCloudState } from "./ipCloud";
export type IpCloud = import("./ipCloud").IpCloud;
export declare const IpCloud: typeof import("./ipCloud").IpCloud;
export { IpCloudAdvancedArgs, IpCloudAdvancedState } from "./ipCloudAdvanced";
export type IpCloudAdvanced = import("./ipCloudAdvanced").IpCloudAdvanced;
export declare const IpCloudAdvanced: typeof import("./ipCloudAdvanced").IpCloudAdvanced;
export { IpDhcpClientArgs, IpDhcpClientState } from "./ipDhcpClient";
export type IpDhcpClient = import("./ipDhcpClient").IpDhcpClient;
export declare const IpDhcpClient: typeof import("./ipDhcpClient").IpDhcpClient;
export { IpDhcpClientOptionArgs, IpDhcpClientOptionState } from "./ipDhcpClientOption";
export type IpDhcpClientOption = import("./ipDhcpClientOption").IpDhcpClientOption;
export declare const IpDhcpClientOption: typeof import("./ipDhcpClientOption").IpDhcpClientOption;
export { IpDhcpRelayArgs, IpDhcpRelayState } from "./ipDhcpRelay";
export type IpDhcpRelay = import("./ipDhcpRelay").IpDhcpRelay;
export declare const IpDhcpRelay: typeof import("./ipDhcpRelay").IpDhcpRelay;
export { IpDhcpServerArgs, IpDhcpServerState } from "./ipDhcpServer";
export type IpDhcpServer = import("./ipDhcpServer").IpDhcpServer;
export declare const IpDhcpServer: typeof import("./ipDhcpServer").IpDhcpServer;
export { IpDhcpServerConfigArgs, IpDhcpServerConfigState } from "./ipDhcpServerConfig";
export type IpDhcpServerConfig = import("./ipDhcpServerConfig").IpDhcpServerConfig;
export declare const IpDhcpServerConfig: typeof import("./ipDhcpServerConfig").IpDhcpServerConfig;
export { IpDhcpServerLeaseArgs, IpDhcpServerLeaseState } from "./ipDhcpServerLease";
export type IpDhcpServerLease = import("./ipDhcpServerLease").IpDhcpServerLease;
export declare const IpDhcpServerLease: typeof import("./ipDhcpServerLease").IpDhcpServerLease;
export { IpDhcpServerNetworkArgs, IpDhcpServerNetworkState } from "./ipDhcpServerNetwork";
export type IpDhcpServerNetwork = import("./ipDhcpServerNetwork").IpDhcpServerNetwork;
export declare const IpDhcpServerNetwork: typeof import("./ipDhcpServerNetwork").IpDhcpServerNetwork;
export { IpDhcpServerOptionArgs, IpDhcpServerOptionState } from "./ipDhcpServerOption";
export type IpDhcpServerOption = import("./ipDhcpServerOption").IpDhcpServerOption;
export declare const IpDhcpServerOption: typeof import("./ipDhcpServerOption").IpDhcpServerOption;
export { IpDhcpServerOptionSetArgs, IpDhcpServerOptionSetState } from "./ipDhcpServerOptionSet";
export type IpDhcpServerOptionSet = import("./ipDhcpServerOptionSet").IpDhcpServerOptionSet;
export declare const IpDhcpServerOptionSet: typeof import("./ipDhcpServerOptionSet").IpDhcpServerOptionSet;
export { IpDnsArgs, IpDnsState } from "./ipDns";
export type IpDns = import("./ipDns").IpDns;
export declare const IpDns: typeof import("./ipDns").IpDns;
export { IpDnsAdlistArgs, IpDnsAdlistState } from "./ipDnsAdlist";
export type IpDnsAdlist = import("./ipDnsAdlist").IpDnsAdlist;
export declare const IpDnsAdlist: typeof import("./ipDnsAdlist").IpDnsAdlist;
export { IpDnsRecordArgs, IpDnsRecordState } from "./ipDnsRecord";
export type IpDnsRecord = import("./ipDnsRecord").IpDnsRecord;
export declare const IpDnsRecord: typeof import("./ipDnsRecord").IpDnsRecord;
export { IpFirewallAddrListArgs, IpFirewallAddrListState } from "./ipFirewallAddrList";
export type IpFirewallAddrList = import("./ipFirewallAddrList").IpFirewallAddrList;
export declare const IpFirewallAddrList: typeof import("./ipFirewallAddrList").IpFirewallAddrList;
export { IpFirewallConnectionTrackingArgs, IpFirewallConnectionTrackingState } from "./ipFirewallConnectionTracking";
export type IpFirewallConnectionTracking = import("./ipFirewallConnectionTracking").IpFirewallConnectionTracking;
export declare const IpFirewallConnectionTracking: typeof import("./ipFirewallConnectionTracking").IpFirewallConnectionTracking;
export { IpFirewallFilterArgs, IpFirewallFilterState } from "./ipFirewallFilter";
export type IpFirewallFilter = import("./ipFirewallFilter").IpFirewallFilter;
export declare const IpFirewallFilter: typeof import("./ipFirewallFilter").IpFirewallFilter;
export { IpFirewallMangleArgs, IpFirewallMangleState } from "./ipFirewallMangle";
export type IpFirewallMangle = import("./ipFirewallMangle").IpFirewallMangle;
export declare const IpFirewallMangle: typeof import("./ipFirewallMangle").IpFirewallMangle;
export { IpFirewallNatArgs, IpFirewallNatState } from "./ipFirewallNat";
export type IpFirewallNat = import("./ipFirewallNat").IpFirewallNat;
export declare const IpFirewallNat: typeof import("./ipFirewallNat").IpFirewallNat;
export { IpFirewallRawArgs, IpFirewallRawState } from "./ipFirewallRaw";
export type IpFirewallRaw = import("./ipFirewallRaw").IpFirewallRaw;
export declare const IpFirewallRaw: typeof import("./ipFirewallRaw").IpFirewallRaw;
export { IpHotspotArgs, IpHotspotState } from "./ipHotspot";
export type IpHotspot = import("./ipHotspot").IpHotspot;
export declare const IpHotspot: typeof import("./ipHotspot").IpHotspot;
export { IpHotspotIpBindingArgs, IpHotspotIpBindingState } from "./ipHotspotIpBinding";
export type IpHotspotIpBinding = import("./ipHotspotIpBinding").IpHotspotIpBinding;
export declare const IpHotspotIpBinding: typeof import("./ipHotspotIpBinding").IpHotspotIpBinding;
export { IpHotspotProfileArgs, IpHotspotProfileState } from "./ipHotspotProfile";
export type IpHotspotProfile = import("./ipHotspotProfile").IpHotspotProfile;
export declare const IpHotspotProfile: typeof import("./ipHotspotProfile").IpHotspotProfile;
export { IpHotspotServicePortArgs, IpHotspotServicePortState } from "./ipHotspotServicePort";
export type IpHotspotServicePort = import("./ipHotspotServicePort").IpHotspotServicePort;
export declare const IpHotspotServicePort: typeof import("./ipHotspotServicePort").IpHotspotServicePort;
export { IpHotspotUserArgs, IpHotspotUserState } from "./ipHotspotUser";
export type IpHotspotUser = import("./ipHotspotUser").IpHotspotUser;
export declare const IpHotspotUser: typeof import("./ipHotspotUser").IpHotspotUser;
export { IpHotspotUserProfileArgs, IpHotspotUserProfileState } from "./ipHotspotUserProfile";
export type IpHotspotUserProfile = import("./ipHotspotUserProfile").IpHotspotUserProfile;
export declare const IpHotspotUserProfile: typeof import("./ipHotspotUserProfile").IpHotspotUserProfile;
export { IpHotspotWalledGardenArgs, IpHotspotWalledGardenState } from "./ipHotspotWalledGarden";
export type IpHotspotWalledGarden = import("./ipHotspotWalledGarden").IpHotspotWalledGarden;
export declare const IpHotspotWalledGarden: typeof import("./ipHotspotWalledGarden").IpHotspotWalledGarden;
export { IpHotspotWalledGardenIpArgs, IpHotspotWalledGardenIpState } from "./ipHotspotWalledGardenIp";
export type IpHotspotWalledGardenIp = import("./ipHotspotWalledGardenIp").IpHotspotWalledGardenIp;
export declare const IpHotspotWalledGardenIp: typeof import("./ipHotspotWalledGardenIp").IpHotspotWalledGardenIp;
export { IpIpsecIdentityArgs, IpIpsecIdentityState } from "./ipIpsecIdentity";
export type IpIpsecIdentity = import("./ipIpsecIdentity").IpIpsecIdentity;
export declare const IpIpsecIdentity: typeof import("./ipIpsecIdentity").IpIpsecIdentity;
export { IpIpsecKeyArgs, IpIpsecKeyState } from "./ipIpsecKey";
export type IpIpsecKey = import("./ipIpsecKey").IpIpsecKey;
export declare const IpIpsecKey: typeof import("./ipIpsecKey").IpIpsecKey;
export { IpIpsecModeConfigArgs, IpIpsecModeConfigState } from "./ipIpsecModeConfig";
export type IpIpsecModeConfig = import("./ipIpsecModeConfig").IpIpsecModeConfig;
export declare const IpIpsecModeConfig: typeof import("./ipIpsecModeConfig").IpIpsecModeConfig;
export { IpIpsecPeerArgs, IpIpsecPeerState } from "./ipIpsecPeer";
export type IpIpsecPeer = import("./ipIpsecPeer").IpIpsecPeer;
export declare const IpIpsecPeer: typeof import("./ipIpsecPeer").IpIpsecPeer;
export { IpIpsecPolicyArgs, IpIpsecPolicyState } from "./ipIpsecPolicy";
export type IpIpsecPolicy = import("./ipIpsecPolicy").IpIpsecPolicy;
export declare const IpIpsecPolicy: typeof import("./ipIpsecPolicy").IpIpsecPolicy;
export { IpIpsecPolicyGroupArgs, IpIpsecPolicyGroupState } from "./ipIpsecPolicyGroup";
export type IpIpsecPolicyGroup = import("./ipIpsecPolicyGroup").IpIpsecPolicyGroup;
export declare const IpIpsecPolicyGroup: typeof import("./ipIpsecPolicyGroup").IpIpsecPolicyGroup;
export { IpIpsecProfileArgs, IpIpsecProfileState } from "./ipIpsecProfile";
export type IpIpsecProfile = import("./ipIpsecProfile").IpIpsecProfile;
export declare const IpIpsecProfile: typeof import("./ipIpsecProfile").IpIpsecProfile;
export { IpIpsecProposalArgs, IpIpsecProposalState } from "./ipIpsecProposal";
export type IpIpsecProposal = import("./ipIpsecProposal").IpIpsecProposal;
export declare const IpIpsecProposal: typeof import("./ipIpsecProposal").IpIpsecProposal;
export { IpIpsecSettingsArgs, IpIpsecSettingsState } from "./ipIpsecSettings";
export type IpIpsecSettings = import("./ipIpsecSettings").IpIpsecSettings;
export declare const IpIpsecSettings: typeof import("./ipIpsecSettings").IpIpsecSettings;
export { IpNeighborDiscoverySettingsArgs, IpNeighborDiscoverySettingsState } from "./ipNeighborDiscoverySettings";
export type IpNeighborDiscoverySettings = import("./ipNeighborDiscoverySettings").IpNeighborDiscoverySettings;
export declare const IpNeighborDiscoverySettings: typeof import("./ipNeighborDiscoverySettings").IpNeighborDiscoverySettings;
export { IpPoolArgs, IpPoolState } from "./ipPool";
export type IpPool = import("./ipPool").IpPool;
export declare const IpPool: typeof import("./ipPool").IpPool;
export { IpRouteArgs, IpRouteState } from "./ipRoute";
export type IpRoute = import("./ipRoute").IpRoute;
export declare const IpRoute: typeof import("./ipRoute").IpRoute;
export { IpServiceArgs, IpServiceState } from "./ipService";
export type IpService = import("./ipService").IpService;
export declare const IpService: typeof import("./ipService").IpService;
export { IpSshServerArgs, IpSshServerState } from "./ipSshServer";
export type IpSshServer = import("./ipSshServer").IpSshServer;
export declare const IpSshServer: typeof import("./ipSshServer").IpSshServer;
export { IpUpnpArgs, IpUpnpState } from "./ipUpnp";
export type IpUpnp = import("./ipUpnp").IpUpnp;
export declare const IpUpnp: typeof import("./ipUpnp").IpUpnp;
export { IpUpnpInterfacesArgs, IpUpnpInterfacesState } from "./ipUpnpInterfaces";
export type IpUpnpInterfaces = import("./ipUpnpInterfaces").IpUpnpInterfaces;
export declare const IpUpnpInterfaces: typeof import("./ipUpnpInterfaces").IpUpnpInterfaces;
export { IpVrfArgs, IpVrfState } from "./ipVrf";
export type IpVrf = import("./ipVrf").IpVrf;
export declare const IpVrf: typeof import("./ipVrf").IpVrf;
export { IpipArgs, IpipState } from "./ipip";
export type Ipip = import("./ipip").Ipip;
export declare const Ipip: typeof import("./ipip").Ipip;
export { Ipv6AddressArgs, Ipv6AddressState } from "./ipv6Address";
export type Ipv6Address = import("./ipv6Address").Ipv6Address;
export declare const Ipv6Address: typeof import("./ipv6Address").Ipv6Address;
export { Ipv6DhcpClientArgs, Ipv6DhcpClientState } from "./ipv6DhcpClient";
export type Ipv6DhcpClient = import("./ipv6DhcpClient").Ipv6DhcpClient;
export declare const Ipv6DhcpClient: typeof import("./ipv6DhcpClient").Ipv6DhcpClient;
export { Ipv6DhcpClientOptionArgs, Ipv6DhcpClientOptionState } from "./ipv6DhcpClientOption";
export type Ipv6DhcpClientOption = import("./ipv6DhcpClientOption").Ipv6DhcpClientOption;
export declare const Ipv6DhcpClientOption: typeof import("./ipv6DhcpClientOption").Ipv6DhcpClientOption;
export { Ipv6DhcpServerArgs, Ipv6DhcpServerState } from "./ipv6DhcpServer";
export type Ipv6DhcpServer = import("./ipv6DhcpServer").Ipv6DhcpServer;
export declare const Ipv6DhcpServer: typeof import("./ipv6DhcpServer").Ipv6DhcpServer;
export { Ipv6DhcpServerOptionArgs, Ipv6DhcpServerOptionState } from "./ipv6DhcpServerOption";
export type Ipv6DhcpServerOption = import("./ipv6DhcpServerOption").Ipv6DhcpServerOption;
export declare const Ipv6DhcpServerOption: typeof import("./ipv6DhcpServerOption").Ipv6DhcpServerOption;
export { Ipv6DhcpServerOptionSetsArgs, Ipv6DhcpServerOptionSetsState } from "./ipv6DhcpServerOptionSets";
export type Ipv6DhcpServerOptionSets = import("./ipv6DhcpServerOptionSets").Ipv6DhcpServerOptionSets;
export declare const Ipv6DhcpServerOptionSets: typeof import("./ipv6DhcpServerOptionSets").Ipv6DhcpServerOptionSets;
export { Ipv6FirewallAddrListArgs, Ipv6FirewallAddrListState } from "./ipv6FirewallAddrList";
export type Ipv6FirewallAddrList = import("./ipv6FirewallAddrList").Ipv6FirewallAddrList;
export declare const Ipv6FirewallAddrList: typeof import("./ipv6FirewallAddrList").Ipv6FirewallAddrList;
export { Ipv6FirewallFilterArgs, Ipv6FirewallFilterState } from "./ipv6FirewallFilter";
export type Ipv6FirewallFilter = import("./ipv6FirewallFilter").Ipv6FirewallFilter;
export declare const Ipv6FirewallFilter: typeof import("./ipv6FirewallFilter").Ipv6FirewallFilter;
export { Ipv6NeighborDiscoveryArgs, Ipv6NeighborDiscoveryState } from "./ipv6NeighborDiscovery";
export type Ipv6NeighborDiscovery = import("./ipv6NeighborDiscovery").Ipv6NeighborDiscovery;
export declare const Ipv6NeighborDiscovery: typeof import("./ipv6NeighborDiscovery").Ipv6NeighborDiscovery;
export { Ipv6PoolArgs, Ipv6PoolState } from "./ipv6Pool";
export type Ipv6Pool = import("./ipv6Pool").Ipv6Pool;
export declare const Ipv6Pool: typeof import("./ipv6Pool").Ipv6Pool;
export { Ipv6RouteArgs, Ipv6RouteState } from "./ipv6Route";
export type Ipv6Route = import("./ipv6Route").Ipv6Route;
export declare const Ipv6Route: typeof import("./ipv6Route").Ipv6Route;
export { Ipv6SettingsArgs, Ipv6SettingsState } from "./ipv6Settings";
export type Ipv6Settings = import("./ipv6Settings").Ipv6Settings;
export declare const Ipv6Settings: typeof import("./ipv6Settings").Ipv6Settings;
export { MoveItemsArgs, MoveItemsState } from "./moveItems";
export type MoveItems = import("./moveItems").MoveItems;
export declare const MoveItems: typeof import("./moveItems").MoveItems;
export { OvpnServerArgs, OvpnServerState } from "./ovpnServer";
export type OvpnServer = import("./ovpnServer").OvpnServer;
export declare const OvpnServer: typeof import("./ovpnServer").OvpnServer;
export { PppAaaArgs, PppAaaState } from "./pppAaa";
export type PppAaa = import("./pppAaa").PppAaa;
export declare const PppAaa: typeof import("./pppAaa").PppAaa;
export { PppProfileArgs, PppProfileState } from "./pppProfile";
export type PppProfile = import("./pppProfile").PppProfile;
export declare const PppProfile: typeof import("./pppProfile").PppProfile;
export { PppSecretArgs, PppSecretState } from "./pppSecret";
export type PppSecret = import("./pppSecret").PppSecret;
export declare const PppSecret: typeof import("./pppSecret").PppSecret;
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export declare const Provider: typeof import("./provider").Provider;
export { RadiusArgs, RadiusState } from "./radius";
export type Radius = import("./radius").Radius;
export declare const Radius: typeof import("./radius").Radius;
export { RadiusIncomingArgs, RadiusIncomingState } from "./radiusIncoming";
export type RadiusIncoming = import("./radiusIncoming").RadiusIncoming;
export declare const RadiusIncoming: typeof import("./radiusIncoming").RadiusIncoming;
export { RoutingBgpConnectionArgs, RoutingBgpConnectionState } from "./routingBgpConnection";
export type RoutingBgpConnection = import("./routingBgpConnection").RoutingBgpConnection;
export declare const RoutingBgpConnection: typeof import("./routingBgpConnection").RoutingBgpConnection;
export { RoutingBgpTemplateArgs, RoutingBgpTemplateState } from "./routingBgpTemplate";
export type RoutingBgpTemplate = import("./routingBgpTemplate").RoutingBgpTemplate;
export declare const RoutingBgpTemplate: typeof import("./routingBgpTemplate").RoutingBgpTemplate;
export { RoutingFilterRuleArgs, RoutingFilterRuleState } from "./routingFilterRule";
export type RoutingFilterRule = import("./routingFilterRule").RoutingFilterRule;
export declare const RoutingFilterRule: typeof import("./routingFilterRule").RoutingFilterRule;
export { RoutingOspfAreaArgs, RoutingOspfAreaState } from "./routingOspfArea";
export type RoutingOspfArea = import("./routingOspfArea").RoutingOspfArea;
export declare const RoutingOspfArea: typeof import("./routingOspfArea").RoutingOspfArea;
export { RoutingOspfInstanceArgs, RoutingOspfInstanceState } from "./routingOspfInstance";
export type RoutingOspfInstance = import("./routingOspfInstance").RoutingOspfInstance;
export declare const RoutingOspfInstance: typeof import("./routingOspfInstance").RoutingOspfInstance;
export { RoutingOspfInterfaceTemplateArgs, RoutingOspfInterfaceTemplateState } from "./routingOspfInterfaceTemplate";
export type RoutingOspfInterfaceTemplate = import("./routingOspfInterfaceTemplate").RoutingOspfInterfaceTemplate;
export declare const RoutingOspfInterfaceTemplate: typeof import("./routingOspfInterfaceTemplate").RoutingOspfInterfaceTemplate;
export { RoutingRuleArgs, RoutingRuleState } from "./routingRule";
export type RoutingRule = import("./routingRule").RoutingRule;
export declare const RoutingRule: typeof import("./routingRule").RoutingRule;
export { RoutingTableArgs, RoutingTableState } from "./routingTable";
export type RoutingTable = import("./routingTable").RoutingTable;
export declare const RoutingTable: typeof import("./routingTable").RoutingTable;
export { SchedulerArgs, SchedulerState } from "./scheduler";
export type Scheduler = import("./scheduler").Scheduler;
export declare const Scheduler: typeof import("./scheduler").Scheduler;
export { SnmpArgs, SnmpState } from "./snmp";
export type Snmp = import("./snmp").Snmp;
export declare const Snmp: typeof import("./snmp").Snmp;
export { SnmpCommunityArgs, SnmpCommunityState } from "./snmpCommunity";
export type SnmpCommunity = import("./snmpCommunity").SnmpCommunity;
export declare const SnmpCommunity: typeof import("./snmpCommunity").SnmpCommunity;
export { SystemCertificateArgs, SystemCertificateState } from "./systemCertificate";
export type SystemCertificate = import("./systemCertificate").SystemCertificate;
export declare const SystemCertificate: typeof import("./systemCertificate").SystemCertificate;
export { SystemCertificateScepServerArgs, SystemCertificateScepServerState } from "./systemCertificateScepServer";
export type SystemCertificateScepServer = import("./systemCertificateScepServer").SystemCertificateScepServer;
export declare const SystemCertificateScepServer: typeof import("./systemCertificateScepServer").SystemCertificateScepServer;
export { SystemClockArgs, SystemClockState } from "./systemClock";
export type SystemClock = import("./systemClock").SystemClock;
export declare const SystemClock: typeof import("./systemClock").SystemClock;
export { SystemIdentityArgs, SystemIdentityState } from "./systemIdentity";
export type SystemIdentity = import("./systemIdentity").SystemIdentity;
export declare const SystemIdentity: typeof import("./systemIdentity").SystemIdentity;
export { SystemLedArgs, SystemLedState } from "./systemLed";
export type SystemLed = import("./systemLed").SystemLed;
export declare const SystemLed: typeof import("./systemLed").SystemLed;
export { SystemLedSettingsArgs, SystemLedSettingsState } from "./systemLedSettings";
export type SystemLedSettings = import("./systemLedSettings").SystemLedSettings;
export declare const SystemLedSettings: typeof import("./systemLedSettings").SystemLedSettings;
export { SystemLoggingArgs, SystemLoggingState } from "./systemLogging";
export type SystemLogging = import("./systemLogging").SystemLogging;
export declare const SystemLogging: typeof import("./systemLogging").SystemLogging;
export { SystemLoggingActionArgs, SystemLoggingActionState } from "./systemLoggingAction";
export type SystemLoggingAction = import("./systemLoggingAction").SystemLoggingAction;
export declare const SystemLoggingAction: typeof import("./systemLoggingAction").SystemLoggingAction;
export { SystemNtpClientArgs, SystemNtpClientState } from "./systemNtpClient";
export type SystemNtpClient = import("./systemNtpClient").SystemNtpClient;
export declare const SystemNtpClient: typeof import("./systemNtpClient").SystemNtpClient;
export { SystemNtpServerArgs, SystemNtpServerState } from "./systemNtpServer";
export type SystemNtpServer = import("./systemNtpServer").SystemNtpServer;
export declare const SystemNtpServer: typeof import("./systemNtpServer").SystemNtpServer;
export { SystemRouterboardButtonModeArgs, SystemRouterboardButtonModeState } from "./systemRouterboardButtonMode";
export type SystemRouterboardButtonMode = import("./systemRouterboardButtonMode").SystemRouterboardButtonMode;
export declare const SystemRouterboardButtonMode: typeof import("./systemRouterboardButtonMode").SystemRouterboardButtonMode;
export { SystemRouterboardButtonResetArgs, SystemRouterboardButtonResetState } from "./systemRouterboardButtonReset";
export type SystemRouterboardButtonReset = import("./systemRouterboardButtonReset").SystemRouterboardButtonReset;
export declare const SystemRouterboardButtonReset: typeof import("./systemRouterboardButtonReset").SystemRouterboardButtonReset;
export { SystemRouterboardButtonWpsArgs, SystemRouterboardButtonWpsState } from "./systemRouterboardButtonWps";
export type SystemRouterboardButtonWps = import("./systemRouterboardButtonWps").SystemRouterboardButtonWps;
export declare const SystemRouterboardButtonWps: typeof import("./systemRouterboardButtonWps").SystemRouterboardButtonWps;
export { SystemRouterboardSettingsArgs, SystemRouterboardSettingsState } from "./systemRouterboardSettings";
export type SystemRouterboardSettings = import("./systemRouterboardSettings").SystemRouterboardSettings;
export declare const SystemRouterboardSettings: typeof import("./systemRouterboardSettings").SystemRouterboardSettings;
export { SystemRouterboardUsbArgs, SystemRouterboardUsbState } from "./systemRouterboardUsb";
export type SystemRouterboardUsb = import("./systemRouterboardUsb").SystemRouterboardUsb;
export declare const SystemRouterboardUsb: typeof import("./systemRouterboardUsb").SystemRouterboardUsb;
export { SystemSchedulerArgs, SystemSchedulerState } from "./systemScheduler";
export type SystemScheduler = import("./systemScheduler").SystemScheduler;
export declare const SystemScheduler: typeof import("./systemScheduler").SystemScheduler;
export { SystemScriptArgs, SystemScriptState } from "./systemScript";
export type SystemScript = import("./systemScript").SystemScript;
export declare const SystemScript: typeof import("./systemScript").SystemScript;
export { SystemUserArgs, SystemUserState } from "./systemUser";
export type SystemUser = import("./systemUser").SystemUser;
export declare const SystemUser: typeof import("./systemUser").SystemUser;
export { SystemUserAaaArgs, SystemUserAaaState } from "./systemUserAaa";
export type SystemUserAaa = import("./systemUserAaa").SystemUserAaa;
export declare const SystemUserAaa: typeof import("./systemUserAaa").SystemUserAaa;
export { SystemUserGroupArgs, SystemUserGroupState } from "./systemUserGroup";
export type SystemUserGroup = import("./systemUserGroup").SystemUserGroup;
export declare const SystemUserGroup: typeof import("./systemUserGroup").SystemUserGroup;
export { SystemUserSettingsArgs, SystemUserSettingsState } from "./systemUserSettings";
export type SystemUserSettings = import("./systemUserSettings").SystemUserSettings;
export declare const SystemUserSettings: typeof import("./systemUserSettings").SystemUserSettings;
export { ToolBandwidthServerArgs, ToolBandwidthServerState } from "./toolBandwidthServer";
export type ToolBandwidthServer = import("./toolBandwidthServer").ToolBandwidthServer;
export declare const ToolBandwidthServer: typeof import("./toolBandwidthServer").ToolBandwidthServer;
export { ToolMacServerArgs, ToolMacServerState } from "./toolMacServer";
export type ToolMacServer = import("./toolMacServer").ToolMacServer;
export declare const ToolMacServer: typeof import("./toolMacServer").ToolMacServer;
export { ToolMacServerWinboxArgs, ToolMacServerWinboxState } from "./toolMacServerWinbox";
export type ToolMacServerWinbox = import("./toolMacServerWinbox").ToolMacServerWinbox;
export declare const ToolMacServerWinbox: typeof import("./toolMacServerWinbox").ToolMacServerWinbox;
export { ToolNetwatchArgs, ToolNetwatchState } from "./toolNetwatch";
export type ToolNetwatch = import("./toolNetwatch").ToolNetwatch;
export declare const ToolNetwatch: typeof import("./toolNetwatch").ToolNetwatch;
export { ToolSnifferArgs, ToolSnifferState } from "./toolSniffer";
export type ToolSniffer = import("./toolSniffer").ToolSniffer;
export declare const ToolSniffer: typeof import("./toolSniffer").ToolSniffer;
export { UserManagerAdvancedArgs, UserManagerAdvancedState } from "./userManagerAdvanced";
export type UserManagerAdvanced = import("./userManagerAdvanced").UserManagerAdvanced;
export declare const UserManagerAdvanced: typeof import("./userManagerAdvanced").UserManagerAdvanced;
export { UserManagerAttributeArgs, UserManagerAttributeState } from "./userManagerAttribute";
export type UserManagerAttribute = import("./userManagerAttribute").UserManagerAttribute;
export declare const UserManagerAttribute: typeof import("./userManagerAttribute").UserManagerAttribute;
export { UserManagerDatabaseArgs, UserManagerDatabaseState } from "./userManagerDatabase";
export type UserManagerDatabase = import("./userManagerDatabase").UserManagerDatabase;
export declare const UserManagerDatabase: typeof import("./userManagerDatabase").UserManagerDatabase;
export { UserManagerLimitationArgs, UserManagerLimitationState } from "./userManagerLimitation";
export type UserManagerLimitation = import("./userManagerLimitation").UserManagerLimitation;
export declare const UserManagerLimitation: typeof import("./userManagerLimitation").UserManagerLimitation;
export { UserManagerProfileArgs, UserManagerProfileState } from "./userManagerProfile";
export type UserManagerProfile = import("./userManagerProfile").UserManagerProfile;
export declare const UserManagerProfile: typeof import("./userManagerProfile").UserManagerProfile;
export { UserManagerProfileLimitationArgs, UserManagerProfileLimitationState } from "./userManagerProfileLimitation";
export type UserManagerProfileLimitation = import("./userManagerProfileLimitation").UserManagerProfileLimitation;
export declare const UserManagerProfileLimitation: typeof import("./userManagerProfileLimitation").UserManagerProfileLimitation;
export { UserManagerRouterArgs, UserManagerRouterState } from "./userManagerRouter";
export type UserManagerRouter = import("./userManagerRouter").UserManagerRouter;
export declare const UserManagerRouter: typeof import("./userManagerRouter").UserManagerRouter;
export { UserManagerSettingsArgs, UserManagerSettingsState } from "./userManagerSettings";
export type UserManagerSettings = import("./userManagerSettings").UserManagerSettings;
export declare const UserManagerSettings: typeof import("./userManagerSettings").UserManagerSettings;
export { UserManagerUserArgs, UserManagerUserState } from "./userManagerUser";
export type UserManagerUser = import("./userManagerUser").UserManagerUser;
export declare const UserManagerUser: typeof import("./userManagerUser").UserManagerUser;
export { UserManagerUserGroupArgs, UserManagerUserGroupState } from "./userManagerUserGroup";
export type UserManagerUserGroup = import("./userManagerUserGroup").UserManagerUserGroup;
export declare const UserManagerUserGroup: typeof import("./userManagerUserGroup").UserManagerUserGroup;
export { UserManagerUserProfileArgs, UserManagerUserProfileState } from "./userManagerUserProfile";
export type UserManagerUserProfile = import("./userManagerUserProfile").UserManagerUserProfile;
export declare const UserManagerUserProfile: typeof import("./userManagerUserProfile").UserManagerUserProfile;
export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export declare const Vlan: typeof import("./vlan").Vlan;
export { VrrpArgs, VrrpState } from "./vrrp";
export type Vrrp = import("./vrrp").Vrrp;
export declare const Vrrp: typeof import("./vrrp").Vrrp;
export { WifiArgs, WifiState } from "./wifi";
export type Wifi = import("./wifi").Wifi;
export declare const Wifi: typeof import("./wifi").Wifi;
export { WifiAaaArgs, WifiAaaState } from "./wifiAaa";
export type WifiAaa = import("./wifiAaa").WifiAaa;
export declare const WifiAaa: typeof import("./wifiAaa").WifiAaa;
export { WifiAccessListArgs, WifiAccessListState } from "./wifiAccessList";
export type WifiAccessList = import("./wifiAccessList").WifiAccessList;
export declare const WifiAccessList: typeof import("./wifiAccessList").WifiAccessList;
export { WifiCapArgs, WifiCapState } from "./wifiCap";
export type WifiCap = import("./wifiCap").WifiCap;
export declare const WifiCap: typeof import("./wifiCap").WifiCap;
export { WifiCapsmanArgs, WifiCapsmanState } from "./wifiCapsman";
export type WifiCapsman = import("./wifiCapsman").WifiCapsman;
export declare const WifiCapsman: typeof import("./wifiCapsman").WifiCapsman;
export { WifiChannelArgs, WifiChannelState } from "./wifiChannel";
export type WifiChannel = import("./wifiChannel").WifiChannel;
export declare const WifiChannel: typeof import("./wifiChannel").WifiChannel;
export { WifiConfigurationArgs, WifiConfigurationState } from "./wifiConfiguration";
export type WifiConfiguration = import("./wifiConfiguration").WifiConfiguration;
export declare const WifiConfiguration: typeof import("./wifiConfiguration").WifiConfiguration;
export { WifiDatapathArgs, WifiDatapathState } from "./wifiDatapath";
export type WifiDatapath = import("./wifiDatapath").WifiDatapath;
export declare const WifiDatapath: typeof import("./wifiDatapath").WifiDatapath;
export { WifiInterworkingArgs, WifiInterworkingState } from "./wifiInterworking";
export type WifiInterworking = import("./wifiInterworking").WifiInterworking;
export declare const WifiInterworking: typeof import("./wifiInterworking").WifiInterworking;
export { WifiProvisioningArgs, WifiProvisioningState } from "./wifiProvisioning";
export type WifiProvisioning = import("./wifiProvisioning").WifiProvisioning;
export declare const WifiProvisioning: typeof import("./wifiProvisioning").WifiProvisioning;
export { WifiSecurityArgs, WifiSecurityState } from "./wifiSecurity";
export type WifiSecurity = import("./wifiSecurity").WifiSecurity;
export declare const WifiSecurity: typeof import("./wifiSecurity").WifiSecurity;
export { WifiSteeringArgs, WifiSteeringState } from "./wifiSteering";
export type WifiSteering = import("./wifiSteering").WifiSteering;
export declare const WifiSteering: typeof import("./wifiSteering").WifiSteering;
export { WireguardArgs, WireguardState } from "./wireguard";
export type Wireguard = import("./wireguard").Wireguard;
export declare const Wireguard: typeof import("./wireguard").Wireguard;
export { WireguardKeysArgs, WireguardKeysState } from "./wireguardKeys";
export type WireguardKeys = import("./wireguardKeys").WireguardKeys;
export declare const WireguardKeys: typeof import("./wireguardKeys").WireguardKeys;
export { WireguardPeerArgs, WireguardPeerState } from "./wireguardPeer";
export type WireguardPeer = import("./wireguardPeer").WireguardPeer;
export declare const WireguardPeer: typeof import("./wireguardPeer").WireguardPeer;
export { ZerotierArgs, ZerotierState } from "./zerotier";
export type Zerotier = import("./zerotier").Zerotier;
export declare const Zerotier: typeof import("./zerotier").Zerotier;
export { ZerotierControllerArgs, ZerotierControllerState } from "./zerotierController";
export type ZerotierController = import("./zerotierController").ZerotierController;
export declare const ZerotierController: typeof import("./zerotierController").ZerotierController;
export { ZerotierInterfaceArgs, ZerotierInterfaceState } from "./zerotierInterface";
export type ZerotierInterface = import("./zerotierInterface").ZerotierInterface;
export declare const ZerotierInterface: typeof import("./zerotierInterface").ZerotierInterface;
import * as config from "./config";
import * as types from "./types";
export { config, types, };
