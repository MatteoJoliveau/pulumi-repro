"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIpServicesOutput = exports.getIpServices = exports.getIpRoutesOutput = exports.getIpRoutes = exports.getIpFirewallOutput = exports.getIpFirewall = exports.getIpDhcpServerLeasesOutput = exports.getIpDhcpServerLeases = exports.getIpArpOutput = exports.getIpArp = exports.getIpAddressesOutput = exports.getIpAddresses = exports.getInterfacesOutput = exports.getInterfaces = exports.getFirewallOutput = exports.getFirewall = exports.getFilesOutput = exports.getFiles = exports.FirewallNat = exports.FirewallMangle = exports.FirewallFilter = exports.FirewallAddrList = exports.File = exports.DnsRecord = exports.Dns = exports.DhcpServerNetwork = exports.DhcpServerLease = exports.DhcpServer = exports.DhcpClientOption = exports.DhcpClient = exports.ContainerMounts = exports.ContainerEnvs = exports.ContainerConfig = exports.Container = exports.CertificateScepServer = exports.CapsmanSecurity = exports.CapsmanRates = exports.CapsmanProvisioning = exports.CapsmanManagerInterface = exports.CapsmanManager = exports.CapsmanInterface = exports.CapsmanDatapath = exports.CapsmanConfiguration = exports.CapsmanChannel = exports.CapsmanAccessList = exports.CapsmanAaa = exports.BridgeVlan = exports.BridgePort = exports.BridgeMlag = exports.Bridge = void 0;
exports.InterfaceWirelessCap = exports.InterfaceWirelessAccessList = exports.InterfaceWireless = exports.InterfaceWireguardPeer = exports.InterfaceWireguard = exports.InterfaceVxlanVteps = exports.InterfaceVxlan = exports.InterfaceVrrp = exports.InterfaceVlan = exports.InterfaceVeth = exports.InterfacePppoeClient = exports.InterfaceOvpnServer = exports.InterfaceOvpnClient = exports.InterfaceMacvlan = exports.InterfaceLteApn = exports.InterfaceLte = exports.InterfaceListMember = exports.InterfaceList = exports.InterfaceIpip = exports.InterfaceGre = exports.InterfaceEthernetSwitchVlan = exports.InterfaceEthernetSwitchRule = exports.InterfaceEthernetSwitchPortIsolation = exports.InterfaceEthernetSwitchPort = exports.InterfaceEthernetSwitchHost = exports.InterfaceEthernetSwitch = exports.InterfaceEthernet = exports.InterfaceEoip = exports.InterfaceDot1xServer = exports.InterfaceDot1xClient = exports.InterfaceBridgeVlan = exports.InterfaceBridgeSettings = exports.InterfaceBridgePort = exports.InterfaceBridge = exports.InterfaceBonding = exports.Interface6to4 = exports.Identity = exports.Gre = exports.getX509Output = exports.getX509 = exports.getWifiEasyConnectOutput = exports.getWifiEasyConnect = exports.getSystemRouterboardOutput = exports.getSystemRouterboard = exports.getSystemResourceOutput = exports.getSystemResource = exports.getIpv6FirewallOutput = exports.getIpv6Firewall = exports.getIpv6AddressesOutput = exports.getIpv6Addresses = void 0;
exports.Ipv6Address = exports.Ipip = exports.IpVrf = exports.IpUpnpInterfaces = exports.IpUpnp = exports.IpSshServer = exports.IpService = exports.IpRoute = exports.IpPool = exports.IpNeighborDiscoverySettings = exports.IpIpsecSettings = exports.IpIpsecProposal = exports.IpIpsecProfile = exports.IpIpsecPolicyGroup = exports.IpIpsecPolicy = exports.IpIpsecPeer = exports.IpIpsecModeConfig = exports.IpIpsecKey = exports.IpIpsecIdentity = exports.IpHotspotWalledGardenIp = exports.IpHotspotWalledGarden = exports.IpHotspotUserProfile = exports.IpHotspotUser = exports.IpHotspotServicePort = exports.IpHotspotProfile = exports.IpHotspotIpBinding = exports.IpHotspot = exports.IpFirewallRaw = exports.IpFirewallNat = exports.IpFirewallMangle = exports.IpFirewallFilter = exports.IpFirewallConnectionTracking = exports.IpFirewallAddrList = exports.IpDnsRecord = exports.IpDnsAdlist = exports.IpDns = exports.IpDhcpServerOptionSet = exports.IpDhcpServerOption = exports.IpDhcpServerNetwork = exports.IpDhcpServerLease = exports.IpDhcpServerConfig = exports.IpDhcpServer = exports.IpDhcpRelay = exports.IpDhcpClientOption = exports.IpDhcpClient = exports.IpCloudAdvanced = exports.IpCloud = exports.IpAddress = exports.InterfaceWirelessSecurityProfiles = exports.InterfaceWirelessConnectList = void 0;
exports.SystemUserGroup = exports.SystemUserAaa = exports.SystemUser = exports.SystemScript = exports.SystemScheduler = exports.SystemRouterboardUsb = exports.SystemRouterboardSettings = exports.SystemRouterboardButtonWps = exports.SystemRouterboardButtonReset = exports.SystemRouterboardButtonMode = exports.SystemNtpServer = exports.SystemNtpClient = exports.SystemLoggingAction = exports.SystemLogging = exports.SystemLedSettings = exports.SystemLed = exports.SystemIdentity = exports.SystemClock = exports.SystemCertificateScepServer = exports.SystemCertificate = exports.SnmpCommunity = exports.Snmp = exports.Scheduler = exports.RoutingTable = exports.RoutingRule = exports.RoutingOspfInterfaceTemplate = exports.RoutingOspfInstance = exports.RoutingOspfArea = exports.RoutingFilterRule = exports.RoutingBgpTemplate = exports.RoutingBgpConnection = exports.RadiusIncoming = exports.Radius = exports.Provider = exports.PppSecret = exports.PppProfile = exports.PppAaa = exports.OvpnServer = exports.MoveItems = exports.Ipv6Settings = exports.Ipv6Route = exports.Ipv6Pool = exports.Ipv6NeighborDiscovery = exports.Ipv6FirewallFilter = exports.Ipv6FirewallAddrList = exports.Ipv6DhcpServerOptionSets = exports.Ipv6DhcpServerOption = exports.Ipv6DhcpServer = exports.Ipv6DhcpClientOption = exports.Ipv6DhcpClient = void 0;
exports.types = exports.config = exports.ZerotierInterface = exports.ZerotierController = exports.Zerotier = exports.WireguardPeer = exports.WireguardKeys = exports.Wireguard = exports.WifiSteering = exports.WifiSecurity = exports.WifiProvisioning = exports.WifiInterworking = exports.WifiDatapath = exports.WifiConfiguration = exports.WifiChannel = exports.WifiCapsman = exports.WifiCap = exports.WifiAccessList = exports.WifiAaa = exports.Wifi = exports.Vrrp = exports.Vlan = exports.UserManagerUserProfile = exports.UserManagerUserGroup = exports.UserManagerUser = exports.UserManagerSettings = exports.UserManagerRouter = exports.UserManagerProfileLimitation = exports.UserManagerProfile = exports.UserManagerLimitation = exports.UserManagerDatabase = exports.UserManagerAttribute = exports.UserManagerAdvanced = exports.ToolSniffer = exports.ToolNetwatch = exports.ToolMacServerWinbox = exports.ToolMacServer = exports.ToolBandwidthServer = exports.SystemUserSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.Bridge = null;
utilities.lazyLoad(exports, ["Bridge"], () => require("./bridge"));
exports.BridgeMlag = null;
utilities.lazyLoad(exports, ["BridgeMlag"], () => require("./bridgeMlag"));
exports.BridgePort = null;
utilities.lazyLoad(exports, ["BridgePort"], () => require("./bridgePort"));
exports.BridgeVlan = null;
utilities.lazyLoad(exports, ["BridgeVlan"], () => require("./bridgeVlan"));
exports.CapsmanAaa = null;
utilities.lazyLoad(exports, ["CapsmanAaa"], () => require("./capsmanAaa"));
exports.CapsmanAccessList = null;
utilities.lazyLoad(exports, ["CapsmanAccessList"], () => require("./capsmanAccessList"));
exports.CapsmanChannel = null;
utilities.lazyLoad(exports, ["CapsmanChannel"], () => require("./capsmanChannel"));
exports.CapsmanConfiguration = null;
utilities.lazyLoad(exports, ["CapsmanConfiguration"], () => require("./capsmanConfiguration"));
exports.CapsmanDatapath = null;
utilities.lazyLoad(exports, ["CapsmanDatapath"], () => require("./capsmanDatapath"));
exports.CapsmanInterface = null;
utilities.lazyLoad(exports, ["CapsmanInterface"], () => require("./capsmanInterface"));
exports.CapsmanManager = null;
utilities.lazyLoad(exports, ["CapsmanManager"], () => require("./capsmanManager"));
exports.CapsmanManagerInterface = null;
utilities.lazyLoad(exports, ["CapsmanManagerInterface"], () => require("./capsmanManagerInterface"));
exports.CapsmanProvisioning = null;
utilities.lazyLoad(exports, ["CapsmanProvisioning"], () => require("./capsmanProvisioning"));
exports.CapsmanRates = null;
utilities.lazyLoad(exports, ["CapsmanRates"], () => require("./capsmanRates"));
exports.CapsmanSecurity = null;
utilities.lazyLoad(exports, ["CapsmanSecurity"], () => require("./capsmanSecurity"));
exports.CertificateScepServer = null;
utilities.lazyLoad(exports, ["CertificateScepServer"], () => require("./certificateScepServer"));
exports.Container = null;
utilities.lazyLoad(exports, ["Container"], () => require("./container"));
exports.ContainerConfig = null;
utilities.lazyLoad(exports, ["ContainerConfig"], () => require("./containerConfig"));
exports.ContainerEnvs = null;
utilities.lazyLoad(exports, ["ContainerEnvs"], () => require("./containerEnvs"));
exports.ContainerMounts = null;
utilities.lazyLoad(exports, ["ContainerMounts"], () => require("./containerMounts"));
exports.DhcpClient = null;
utilities.lazyLoad(exports, ["DhcpClient"], () => require("./dhcpClient"));
exports.DhcpClientOption = null;
utilities.lazyLoad(exports, ["DhcpClientOption"], () => require("./dhcpClientOption"));
exports.DhcpServer = null;
utilities.lazyLoad(exports, ["DhcpServer"], () => require("./dhcpServer"));
exports.DhcpServerLease = null;
utilities.lazyLoad(exports, ["DhcpServerLease"], () => require("./dhcpServerLease"));
exports.DhcpServerNetwork = null;
utilities.lazyLoad(exports, ["DhcpServerNetwork"], () => require("./dhcpServerNetwork"));
exports.Dns = null;
utilities.lazyLoad(exports, ["Dns"], () => require("./dns"));
exports.DnsRecord = null;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));
exports.File = null;
utilities.lazyLoad(exports, ["File"], () => require("./file"));
exports.FirewallAddrList = null;
utilities.lazyLoad(exports, ["FirewallAddrList"], () => require("./firewallAddrList"));
exports.FirewallFilter = null;
utilities.lazyLoad(exports, ["FirewallFilter"], () => require("./firewallFilter"));
exports.FirewallMangle = null;
utilities.lazyLoad(exports, ["FirewallMangle"], () => require("./firewallMangle"));
exports.FirewallNat = null;
utilities.lazyLoad(exports, ["FirewallNat"], () => require("./firewallNat"));
exports.getFiles = null;
exports.getFilesOutput = null;
utilities.lazyLoad(exports, ["getFiles", "getFilesOutput"], () => require("./getFiles"));
exports.getFirewall = null;
exports.getFirewallOutput = null;
utilities.lazyLoad(exports, ["getFirewall", "getFirewallOutput"], () => require("./getFirewall"));
exports.getInterfaces = null;
exports.getInterfacesOutput = null;
utilities.lazyLoad(exports, ["getInterfaces", "getInterfacesOutput"], () => require("./getInterfaces"));
exports.getIpAddresses = null;
exports.getIpAddressesOutput = null;
utilities.lazyLoad(exports, ["getIpAddresses", "getIpAddressesOutput"], () => require("./getIpAddresses"));
exports.getIpArp = null;
exports.getIpArpOutput = null;
utilities.lazyLoad(exports, ["getIpArp", "getIpArpOutput"], () => require("./getIpArp"));
exports.getIpDhcpServerLeases = null;
exports.getIpDhcpServerLeasesOutput = null;
utilities.lazyLoad(exports, ["getIpDhcpServerLeases", "getIpDhcpServerLeasesOutput"], () => require("./getIpDhcpServerLeases"));
exports.getIpFirewall = null;
exports.getIpFirewallOutput = null;
utilities.lazyLoad(exports, ["getIpFirewall", "getIpFirewallOutput"], () => require("./getIpFirewall"));
exports.getIpRoutes = null;
exports.getIpRoutesOutput = null;
utilities.lazyLoad(exports, ["getIpRoutes", "getIpRoutesOutput"], () => require("./getIpRoutes"));
exports.getIpServices = null;
exports.getIpServicesOutput = null;
utilities.lazyLoad(exports, ["getIpServices", "getIpServicesOutput"], () => require("./getIpServices"));
exports.getIpv6Addresses = null;
exports.getIpv6AddressesOutput = null;
utilities.lazyLoad(exports, ["getIpv6Addresses", "getIpv6AddressesOutput"], () => require("./getIpv6Addresses"));
exports.getIpv6Firewall = null;
exports.getIpv6FirewallOutput = null;
utilities.lazyLoad(exports, ["getIpv6Firewall", "getIpv6FirewallOutput"], () => require("./getIpv6Firewall"));
exports.getSystemResource = null;
exports.getSystemResourceOutput = null;
utilities.lazyLoad(exports, ["getSystemResource", "getSystemResourceOutput"], () => require("./getSystemResource"));
exports.getSystemRouterboard = null;
exports.getSystemRouterboardOutput = null;
utilities.lazyLoad(exports, ["getSystemRouterboard", "getSystemRouterboardOutput"], () => require("./getSystemRouterboard"));
exports.getWifiEasyConnect = null;
exports.getWifiEasyConnectOutput = null;
utilities.lazyLoad(exports, ["getWifiEasyConnect", "getWifiEasyConnectOutput"], () => require("./getWifiEasyConnect"));
exports.getX509 = null;
exports.getX509Output = null;
utilities.lazyLoad(exports, ["getX509", "getX509Output"], () => require("./getX509"));
exports.Gre = null;
utilities.lazyLoad(exports, ["Gre"], () => require("./gre"));
exports.Identity = null;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));
exports.Interface6to4 = null;
utilities.lazyLoad(exports, ["Interface6to4"], () => require("./interface6to4"));
exports.InterfaceBonding = null;
utilities.lazyLoad(exports, ["InterfaceBonding"], () => require("./interfaceBonding"));
exports.InterfaceBridge = null;
utilities.lazyLoad(exports, ["InterfaceBridge"], () => require("./interfaceBridge"));
exports.InterfaceBridgePort = null;
utilities.lazyLoad(exports, ["InterfaceBridgePort"], () => require("./interfaceBridgePort"));
exports.InterfaceBridgeSettings = null;
utilities.lazyLoad(exports, ["InterfaceBridgeSettings"], () => require("./interfaceBridgeSettings"));
exports.InterfaceBridgeVlan = null;
utilities.lazyLoad(exports, ["InterfaceBridgeVlan"], () => require("./interfaceBridgeVlan"));
exports.InterfaceDot1xClient = null;
utilities.lazyLoad(exports, ["InterfaceDot1xClient"], () => require("./interfaceDot1xClient"));
exports.InterfaceDot1xServer = null;
utilities.lazyLoad(exports, ["InterfaceDot1xServer"], () => require("./interfaceDot1xServer"));
exports.InterfaceEoip = null;
utilities.lazyLoad(exports, ["InterfaceEoip"], () => require("./interfaceEoip"));
exports.InterfaceEthernet = null;
utilities.lazyLoad(exports, ["InterfaceEthernet"], () => require("./interfaceEthernet"));
exports.InterfaceEthernetSwitch = null;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitch"], () => require("./interfaceEthernetSwitch"));
exports.InterfaceEthernetSwitchHost = null;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitchHost"], () => require("./interfaceEthernetSwitchHost"));
exports.InterfaceEthernetSwitchPort = null;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitchPort"], () => require("./interfaceEthernetSwitchPort"));
exports.InterfaceEthernetSwitchPortIsolation = null;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitchPortIsolation"], () => require("./interfaceEthernetSwitchPortIsolation"));
exports.InterfaceEthernetSwitchRule = null;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitchRule"], () => require("./interfaceEthernetSwitchRule"));
exports.InterfaceEthernetSwitchVlan = null;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitchVlan"], () => require("./interfaceEthernetSwitchVlan"));
exports.InterfaceGre = null;
utilities.lazyLoad(exports, ["InterfaceGre"], () => require("./interfaceGre"));
exports.InterfaceIpip = null;
utilities.lazyLoad(exports, ["InterfaceIpip"], () => require("./interfaceIpip"));
exports.InterfaceList = null;
utilities.lazyLoad(exports, ["InterfaceList"], () => require("./interfaceList"));
exports.InterfaceListMember = null;
utilities.lazyLoad(exports, ["InterfaceListMember"], () => require("./interfaceListMember"));
exports.InterfaceLte = null;
utilities.lazyLoad(exports, ["InterfaceLte"], () => require("./interfaceLte"));
exports.InterfaceLteApn = null;
utilities.lazyLoad(exports, ["InterfaceLteApn"], () => require("./interfaceLteApn"));
exports.InterfaceMacvlan = null;
utilities.lazyLoad(exports, ["InterfaceMacvlan"], () => require("./interfaceMacvlan"));
exports.InterfaceOvpnClient = null;
utilities.lazyLoad(exports, ["InterfaceOvpnClient"], () => require("./interfaceOvpnClient"));
exports.InterfaceOvpnServer = null;
utilities.lazyLoad(exports, ["InterfaceOvpnServer"], () => require("./interfaceOvpnServer"));
exports.InterfacePppoeClient = null;
utilities.lazyLoad(exports, ["InterfacePppoeClient"], () => require("./interfacePppoeClient"));
exports.InterfaceVeth = null;
utilities.lazyLoad(exports, ["InterfaceVeth"], () => require("./interfaceVeth"));
exports.InterfaceVlan = null;
utilities.lazyLoad(exports, ["InterfaceVlan"], () => require("./interfaceVlan"));
exports.InterfaceVrrp = null;
utilities.lazyLoad(exports, ["InterfaceVrrp"], () => require("./interfaceVrrp"));
exports.InterfaceVxlan = null;
utilities.lazyLoad(exports, ["InterfaceVxlan"], () => require("./interfaceVxlan"));
exports.InterfaceVxlanVteps = null;
utilities.lazyLoad(exports, ["InterfaceVxlanVteps"], () => require("./interfaceVxlanVteps"));
exports.InterfaceWireguard = null;
utilities.lazyLoad(exports, ["InterfaceWireguard"], () => require("./interfaceWireguard"));
exports.InterfaceWireguardPeer = null;
utilities.lazyLoad(exports, ["InterfaceWireguardPeer"], () => require("./interfaceWireguardPeer"));
exports.InterfaceWireless = null;
utilities.lazyLoad(exports, ["InterfaceWireless"], () => require("./interfaceWireless"));
exports.InterfaceWirelessAccessList = null;
utilities.lazyLoad(exports, ["InterfaceWirelessAccessList"], () => require("./interfaceWirelessAccessList"));
exports.InterfaceWirelessCap = null;
utilities.lazyLoad(exports, ["InterfaceWirelessCap"], () => require("./interfaceWirelessCap"));
exports.InterfaceWirelessConnectList = null;
utilities.lazyLoad(exports, ["InterfaceWirelessConnectList"], () => require("./interfaceWirelessConnectList"));
exports.InterfaceWirelessSecurityProfiles = null;
utilities.lazyLoad(exports, ["InterfaceWirelessSecurityProfiles"], () => require("./interfaceWirelessSecurityProfiles"));
exports.IpAddress = null;
utilities.lazyLoad(exports, ["IpAddress"], () => require("./ipAddress"));
exports.IpCloud = null;
utilities.lazyLoad(exports, ["IpCloud"], () => require("./ipCloud"));
exports.IpCloudAdvanced = null;
utilities.lazyLoad(exports, ["IpCloudAdvanced"], () => require("./ipCloudAdvanced"));
exports.IpDhcpClient = null;
utilities.lazyLoad(exports, ["IpDhcpClient"], () => require("./ipDhcpClient"));
exports.IpDhcpClientOption = null;
utilities.lazyLoad(exports, ["IpDhcpClientOption"], () => require("./ipDhcpClientOption"));
exports.IpDhcpRelay = null;
utilities.lazyLoad(exports, ["IpDhcpRelay"], () => require("./ipDhcpRelay"));
exports.IpDhcpServer = null;
utilities.lazyLoad(exports, ["IpDhcpServer"], () => require("./ipDhcpServer"));
exports.IpDhcpServerConfig = null;
utilities.lazyLoad(exports, ["IpDhcpServerConfig"], () => require("./ipDhcpServerConfig"));
exports.IpDhcpServerLease = null;
utilities.lazyLoad(exports, ["IpDhcpServerLease"], () => require("./ipDhcpServerLease"));
exports.IpDhcpServerNetwork = null;
utilities.lazyLoad(exports, ["IpDhcpServerNetwork"], () => require("./ipDhcpServerNetwork"));
exports.IpDhcpServerOption = null;
utilities.lazyLoad(exports, ["IpDhcpServerOption"], () => require("./ipDhcpServerOption"));
exports.IpDhcpServerOptionSet = null;
utilities.lazyLoad(exports, ["IpDhcpServerOptionSet"], () => require("./ipDhcpServerOptionSet"));
exports.IpDns = null;
utilities.lazyLoad(exports, ["IpDns"], () => require("./ipDns"));
exports.IpDnsAdlist = null;
utilities.lazyLoad(exports, ["IpDnsAdlist"], () => require("./ipDnsAdlist"));
exports.IpDnsRecord = null;
utilities.lazyLoad(exports, ["IpDnsRecord"], () => require("./ipDnsRecord"));
exports.IpFirewallAddrList = null;
utilities.lazyLoad(exports, ["IpFirewallAddrList"], () => require("./ipFirewallAddrList"));
exports.IpFirewallConnectionTracking = null;
utilities.lazyLoad(exports, ["IpFirewallConnectionTracking"], () => require("./ipFirewallConnectionTracking"));
exports.IpFirewallFilter = null;
utilities.lazyLoad(exports, ["IpFirewallFilter"], () => require("./ipFirewallFilter"));
exports.IpFirewallMangle = null;
utilities.lazyLoad(exports, ["IpFirewallMangle"], () => require("./ipFirewallMangle"));
exports.IpFirewallNat = null;
utilities.lazyLoad(exports, ["IpFirewallNat"], () => require("./ipFirewallNat"));
exports.IpFirewallRaw = null;
utilities.lazyLoad(exports, ["IpFirewallRaw"], () => require("./ipFirewallRaw"));
exports.IpHotspot = null;
utilities.lazyLoad(exports, ["IpHotspot"], () => require("./ipHotspot"));
exports.IpHotspotIpBinding = null;
utilities.lazyLoad(exports, ["IpHotspotIpBinding"], () => require("./ipHotspotIpBinding"));
exports.IpHotspotProfile = null;
utilities.lazyLoad(exports, ["IpHotspotProfile"], () => require("./ipHotspotProfile"));
exports.IpHotspotServicePort = null;
utilities.lazyLoad(exports, ["IpHotspotServicePort"], () => require("./ipHotspotServicePort"));
exports.IpHotspotUser = null;
utilities.lazyLoad(exports, ["IpHotspotUser"], () => require("./ipHotspotUser"));
exports.IpHotspotUserProfile = null;
utilities.lazyLoad(exports, ["IpHotspotUserProfile"], () => require("./ipHotspotUserProfile"));
exports.IpHotspotWalledGarden = null;
utilities.lazyLoad(exports, ["IpHotspotWalledGarden"], () => require("./ipHotspotWalledGarden"));
exports.IpHotspotWalledGardenIp = null;
utilities.lazyLoad(exports, ["IpHotspotWalledGardenIp"], () => require("./ipHotspotWalledGardenIp"));
exports.IpIpsecIdentity = null;
utilities.lazyLoad(exports, ["IpIpsecIdentity"], () => require("./ipIpsecIdentity"));
exports.IpIpsecKey = null;
utilities.lazyLoad(exports, ["IpIpsecKey"], () => require("./ipIpsecKey"));
exports.IpIpsecModeConfig = null;
utilities.lazyLoad(exports, ["IpIpsecModeConfig"], () => require("./ipIpsecModeConfig"));
exports.IpIpsecPeer = null;
utilities.lazyLoad(exports, ["IpIpsecPeer"], () => require("./ipIpsecPeer"));
exports.IpIpsecPolicy = null;
utilities.lazyLoad(exports, ["IpIpsecPolicy"], () => require("./ipIpsecPolicy"));
exports.IpIpsecPolicyGroup = null;
utilities.lazyLoad(exports, ["IpIpsecPolicyGroup"], () => require("./ipIpsecPolicyGroup"));
exports.IpIpsecProfile = null;
utilities.lazyLoad(exports, ["IpIpsecProfile"], () => require("./ipIpsecProfile"));
exports.IpIpsecProposal = null;
utilities.lazyLoad(exports, ["IpIpsecProposal"], () => require("./ipIpsecProposal"));
exports.IpIpsecSettings = null;
utilities.lazyLoad(exports, ["IpIpsecSettings"], () => require("./ipIpsecSettings"));
exports.IpNeighborDiscoverySettings = null;
utilities.lazyLoad(exports, ["IpNeighborDiscoverySettings"], () => require("./ipNeighborDiscoverySettings"));
exports.IpPool = null;
utilities.lazyLoad(exports, ["IpPool"], () => require("./ipPool"));
exports.IpRoute = null;
utilities.lazyLoad(exports, ["IpRoute"], () => require("./ipRoute"));
exports.IpService = null;
utilities.lazyLoad(exports, ["IpService"], () => require("./ipService"));
exports.IpSshServer = null;
utilities.lazyLoad(exports, ["IpSshServer"], () => require("./ipSshServer"));
exports.IpUpnp = null;
utilities.lazyLoad(exports, ["IpUpnp"], () => require("./ipUpnp"));
exports.IpUpnpInterfaces = null;
utilities.lazyLoad(exports, ["IpUpnpInterfaces"], () => require("./ipUpnpInterfaces"));
exports.IpVrf = null;
utilities.lazyLoad(exports, ["IpVrf"], () => require("./ipVrf"));
exports.Ipip = null;
utilities.lazyLoad(exports, ["Ipip"], () => require("./ipip"));
exports.Ipv6Address = null;
utilities.lazyLoad(exports, ["Ipv6Address"], () => require("./ipv6Address"));
exports.Ipv6DhcpClient = null;
utilities.lazyLoad(exports, ["Ipv6DhcpClient"], () => require("./ipv6DhcpClient"));
exports.Ipv6DhcpClientOption = null;
utilities.lazyLoad(exports, ["Ipv6DhcpClientOption"], () => require("./ipv6DhcpClientOption"));
exports.Ipv6DhcpServer = null;
utilities.lazyLoad(exports, ["Ipv6DhcpServer"], () => require("./ipv6DhcpServer"));
exports.Ipv6DhcpServerOption = null;
utilities.lazyLoad(exports, ["Ipv6DhcpServerOption"], () => require("./ipv6DhcpServerOption"));
exports.Ipv6DhcpServerOptionSets = null;
utilities.lazyLoad(exports, ["Ipv6DhcpServerOptionSets"], () => require("./ipv6DhcpServerOptionSets"));
exports.Ipv6FirewallAddrList = null;
utilities.lazyLoad(exports, ["Ipv6FirewallAddrList"], () => require("./ipv6FirewallAddrList"));
exports.Ipv6FirewallFilter = null;
utilities.lazyLoad(exports, ["Ipv6FirewallFilter"], () => require("./ipv6FirewallFilter"));
exports.Ipv6NeighborDiscovery = null;
utilities.lazyLoad(exports, ["Ipv6NeighborDiscovery"], () => require("./ipv6NeighborDiscovery"));
exports.Ipv6Pool = null;
utilities.lazyLoad(exports, ["Ipv6Pool"], () => require("./ipv6Pool"));
exports.Ipv6Route = null;
utilities.lazyLoad(exports, ["Ipv6Route"], () => require("./ipv6Route"));
exports.Ipv6Settings = null;
utilities.lazyLoad(exports, ["Ipv6Settings"], () => require("./ipv6Settings"));
exports.MoveItems = null;
utilities.lazyLoad(exports, ["MoveItems"], () => require("./moveItems"));
exports.OvpnServer = null;
utilities.lazyLoad(exports, ["OvpnServer"], () => require("./ovpnServer"));
exports.PppAaa = null;
utilities.lazyLoad(exports, ["PppAaa"], () => require("./pppAaa"));
exports.PppProfile = null;
utilities.lazyLoad(exports, ["PppProfile"], () => require("./pppProfile"));
exports.PppSecret = null;
utilities.lazyLoad(exports, ["PppSecret"], () => require("./pppSecret"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.Radius = null;
utilities.lazyLoad(exports, ["Radius"], () => require("./radius"));
exports.RadiusIncoming = null;
utilities.lazyLoad(exports, ["RadiusIncoming"], () => require("./radiusIncoming"));
exports.RoutingBgpConnection = null;
utilities.lazyLoad(exports, ["RoutingBgpConnection"], () => require("./routingBgpConnection"));
exports.RoutingBgpTemplate = null;
utilities.lazyLoad(exports, ["RoutingBgpTemplate"], () => require("./routingBgpTemplate"));
exports.RoutingFilterRule = null;
utilities.lazyLoad(exports, ["RoutingFilterRule"], () => require("./routingFilterRule"));
exports.RoutingOspfArea = null;
utilities.lazyLoad(exports, ["RoutingOspfArea"], () => require("./routingOspfArea"));
exports.RoutingOspfInstance = null;
utilities.lazyLoad(exports, ["RoutingOspfInstance"], () => require("./routingOspfInstance"));
exports.RoutingOspfInterfaceTemplate = null;
utilities.lazyLoad(exports, ["RoutingOspfInterfaceTemplate"], () => require("./routingOspfInterfaceTemplate"));
exports.RoutingRule = null;
utilities.lazyLoad(exports, ["RoutingRule"], () => require("./routingRule"));
exports.RoutingTable = null;
utilities.lazyLoad(exports, ["RoutingTable"], () => require("./routingTable"));
exports.Scheduler = null;
utilities.lazyLoad(exports, ["Scheduler"], () => require("./scheduler"));
exports.Snmp = null;
utilities.lazyLoad(exports, ["Snmp"], () => require("./snmp"));
exports.SnmpCommunity = null;
utilities.lazyLoad(exports, ["SnmpCommunity"], () => require("./snmpCommunity"));
exports.SystemCertificate = null;
utilities.lazyLoad(exports, ["SystemCertificate"], () => require("./systemCertificate"));
exports.SystemCertificateScepServer = null;
utilities.lazyLoad(exports, ["SystemCertificateScepServer"], () => require("./systemCertificateScepServer"));
exports.SystemClock = null;
utilities.lazyLoad(exports, ["SystemClock"], () => require("./systemClock"));
exports.SystemIdentity = null;
utilities.lazyLoad(exports, ["SystemIdentity"], () => require("./systemIdentity"));
exports.SystemLed = null;
utilities.lazyLoad(exports, ["SystemLed"], () => require("./systemLed"));
exports.SystemLedSettings = null;
utilities.lazyLoad(exports, ["SystemLedSettings"], () => require("./systemLedSettings"));
exports.SystemLogging = null;
utilities.lazyLoad(exports, ["SystemLogging"], () => require("./systemLogging"));
exports.SystemLoggingAction = null;
utilities.lazyLoad(exports, ["SystemLoggingAction"], () => require("./systemLoggingAction"));
exports.SystemNtpClient = null;
utilities.lazyLoad(exports, ["SystemNtpClient"], () => require("./systemNtpClient"));
exports.SystemNtpServer = null;
utilities.lazyLoad(exports, ["SystemNtpServer"], () => require("./systemNtpServer"));
exports.SystemRouterboardButtonMode = null;
utilities.lazyLoad(exports, ["SystemRouterboardButtonMode"], () => require("./systemRouterboardButtonMode"));
exports.SystemRouterboardButtonReset = null;
utilities.lazyLoad(exports, ["SystemRouterboardButtonReset"], () => require("./systemRouterboardButtonReset"));
exports.SystemRouterboardButtonWps = null;
utilities.lazyLoad(exports, ["SystemRouterboardButtonWps"], () => require("./systemRouterboardButtonWps"));
exports.SystemRouterboardSettings = null;
utilities.lazyLoad(exports, ["SystemRouterboardSettings"], () => require("./systemRouterboardSettings"));
exports.SystemRouterboardUsb = null;
utilities.lazyLoad(exports, ["SystemRouterboardUsb"], () => require("./systemRouterboardUsb"));
exports.SystemScheduler = null;
utilities.lazyLoad(exports, ["SystemScheduler"], () => require("./systemScheduler"));
exports.SystemScript = null;
utilities.lazyLoad(exports, ["SystemScript"], () => require("./systemScript"));
exports.SystemUser = null;
utilities.lazyLoad(exports, ["SystemUser"], () => require("./systemUser"));
exports.SystemUserAaa = null;
utilities.lazyLoad(exports, ["SystemUserAaa"], () => require("./systemUserAaa"));
exports.SystemUserGroup = null;
utilities.lazyLoad(exports, ["SystemUserGroup"], () => require("./systemUserGroup"));
exports.SystemUserSettings = null;
utilities.lazyLoad(exports, ["SystemUserSettings"], () => require("./systemUserSettings"));
exports.ToolBandwidthServer = null;
utilities.lazyLoad(exports, ["ToolBandwidthServer"], () => require("./toolBandwidthServer"));
exports.ToolMacServer = null;
utilities.lazyLoad(exports, ["ToolMacServer"], () => require("./toolMacServer"));
exports.ToolMacServerWinbox = null;
utilities.lazyLoad(exports, ["ToolMacServerWinbox"], () => require("./toolMacServerWinbox"));
exports.ToolNetwatch = null;
utilities.lazyLoad(exports, ["ToolNetwatch"], () => require("./toolNetwatch"));
exports.ToolSniffer = null;
utilities.lazyLoad(exports, ["ToolSniffer"], () => require("./toolSniffer"));
exports.UserManagerAdvanced = null;
utilities.lazyLoad(exports, ["UserManagerAdvanced"], () => require("./userManagerAdvanced"));
exports.UserManagerAttribute = null;
utilities.lazyLoad(exports, ["UserManagerAttribute"], () => require("./userManagerAttribute"));
exports.UserManagerDatabase = null;
utilities.lazyLoad(exports, ["UserManagerDatabase"], () => require("./userManagerDatabase"));
exports.UserManagerLimitation = null;
utilities.lazyLoad(exports, ["UserManagerLimitation"], () => require("./userManagerLimitation"));
exports.UserManagerProfile = null;
utilities.lazyLoad(exports, ["UserManagerProfile"], () => require("./userManagerProfile"));
exports.UserManagerProfileLimitation = null;
utilities.lazyLoad(exports, ["UserManagerProfileLimitation"], () => require("./userManagerProfileLimitation"));
exports.UserManagerRouter = null;
utilities.lazyLoad(exports, ["UserManagerRouter"], () => require("./userManagerRouter"));
exports.UserManagerSettings = null;
utilities.lazyLoad(exports, ["UserManagerSettings"], () => require("./userManagerSettings"));
exports.UserManagerUser = null;
utilities.lazyLoad(exports, ["UserManagerUser"], () => require("./userManagerUser"));
exports.UserManagerUserGroup = null;
utilities.lazyLoad(exports, ["UserManagerUserGroup"], () => require("./userManagerUserGroup"));
exports.UserManagerUserProfile = null;
utilities.lazyLoad(exports, ["UserManagerUserProfile"], () => require("./userManagerUserProfile"));
exports.Vlan = null;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));
exports.Vrrp = null;
utilities.lazyLoad(exports, ["Vrrp"], () => require("./vrrp"));
exports.Wifi = null;
utilities.lazyLoad(exports, ["Wifi"], () => require("./wifi"));
exports.WifiAaa = null;
utilities.lazyLoad(exports, ["WifiAaa"], () => require("./wifiAaa"));
exports.WifiAccessList = null;
utilities.lazyLoad(exports, ["WifiAccessList"], () => require("./wifiAccessList"));
exports.WifiCap = null;
utilities.lazyLoad(exports, ["WifiCap"], () => require("./wifiCap"));
exports.WifiCapsman = null;
utilities.lazyLoad(exports, ["WifiCapsman"], () => require("./wifiCapsman"));
exports.WifiChannel = null;
utilities.lazyLoad(exports, ["WifiChannel"], () => require("./wifiChannel"));
exports.WifiConfiguration = null;
utilities.lazyLoad(exports, ["WifiConfiguration"], () => require("./wifiConfiguration"));
exports.WifiDatapath = null;
utilities.lazyLoad(exports, ["WifiDatapath"], () => require("./wifiDatapath"));
exports.WifiInterworking = null;
utilities.lazyLoad(exports, ["WifiInterworking"], () => require("./wifiInterworking"));
exports.WifiProvisioning = null;
utilities.lazyLoad(exports, ["WifiProvisioning"], () => require("./wifiProvisioning"));
exports.WifiSecurity = null;
utilities.lazyLoad(exports, ["WifiSecurity"], () => require("./wifiSecurity"));
exports.WifiSteering = null;
utilities.lazyLoad(exports, ["WifiSteering"], () => require("./wifiSteering"));
exports.Wireguard = null;
utilities.lazyLoad(exports, ["Wireguard"], () => require("./wireguard"));
exports.WireguardKeys = null;
utilities.lazyLoad(exports, ["WireguardKeys"], () => require("./wireguardKeys"));
exports.WireguardPeer = null;
utilities.lazyLoad(exports, ["WireguardPeer"], () => require("./wireguardPeer"));
exports.Zerotier = null;
utilities.lazyLoad(exports, ["Zerotier"], () => require("./zerotier"));
exports.ZerotierController = null;
utilities.lazyLoad(exports, ["ZerotierController"], () => require("./zerotierController"));
exports.ZerotierInterface = null;
utilities.lazyLoad(exports, ["ZerotierInterface"], () => require("./zerotierInterface"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "routeros:index/bridge:Bridge":
                return new exports.Bridge(name, undefined, { urn });
            case "routeros:index/bridgeMlag:BridgeMlag":
                return new exports.BridgeMlag(name, undefined, { urn });
            case "routeros:index/bridgePort:BridgePort":
                return new exports.BridgePort(name, undefined, { urn });
            case "routeros:index/bridgeVlan:BridgeVlan":
                return new exports.BridgeVlan(name, undefined, { urn });
            case "routeros:index/capsmanAaa:CapsmanAaa":
                return new exports.CapsmanAaa(name, undefined, { urn });
            case "routeros:index/capsmanAccessList:CapsmanAccessList":
                return new exports.CapsmanAccessList(name, undefined, { urn });
            case "routeros:index/capsmanChannel:CapsmanChannel":
                return new exports.CapsmanChannel(name, undefined, { urn });
            case "routeros:index/capsmanConfiguration:CapsmanConfiguration":
                return new exports.CapsmanConfiguration(name, undefined, { urn });
            case "routeros:index/capsmanDatapath:CapsmanDatapath":
                return new exports.CapsmanDatapath(name, undefined, { urn });
            case "routeros:index/capsmanInterface:CapsmanInterface":
                return new exports.CapsmanInterface(name, undefined, { urn });
            case "routeros:index/capsmanManager:CapsmanManager":
                return new exports.CapsmanManager(name, undefined, { urn });
            case "routeros:index/capsmanManagerInterface:CapsmanManagerInterface":
                return new exports.CapsmanManagerInterface(name, undefined, { urn });
            case "routeros:index/capsmanProvisioning:CapsmanProvisioning":
                return new exports.CapsmanProvisioning(name, undefined, { urn });
            case "routeros:index/capsmanRates:CapsmanRates":
                return new exports.CapsmanRates(name, undefined, { urn });
            case "routeros:index/capsmanSecurity:CapsmanSecurity":
                return new exports.CapsmanSecurity(name, undefined, { urn });
            case "routeros:index/certificateScepServer:CertificateScepServer":
                return new exports.CertificateScepServer(name, undefined, { urn });
            case "routeros:index/container:Container":
                return new exports.Container(name, undefined, { urn });
            case "routeros:index/containerConfig:ContainerConfig":
                return new exports.ContainerConfig(name, undefined, { urn });
            case "routeros:index/containerEnvs:ContainerEnvs":
                return new exports.ContainerEnvs(name, undefined, { urn });
            case "routeros:index/containerMounts:ContainerMounts":
                return new exports.ContainerMounts(name, undefined, { urn });
            case "routeros:index/dhcpClient:DhcpClient":
                return new exports.DhcpClient(name, undefined, { urn });
            case "routeros:index/dhcpClientOption:DhcpClientOption":
                return new exports.DhcpClientOption(name, undefined, { urn });
            case "routeros:index/dhcpServer:DhcpServer":
                return new exports.DhcpServer(name, undefined, { urn });
            case "routeros:index/dhcpServerLease:DhcpServerLease":
                return new exports.DhcpServerLease(name, undefined, { urn });
            case "routeros:index/dhcpServerNetwork:DhcpServerNetwork":
                return new exports.DhcpServerNetwork(name, undefined, { urn });
            case "routeros:index/dns:Dns":
                return new exports.Dns(name, undefined, { urn });
            case "routeros:index/dnsRecord:DnsRecord":
                return new exports.DnsRecord(name, undefined, { urn });
            case "routeros:index/file:File":
                return new exports.File(name, undefined, { urn });
            case "routeros:index/firewallAddrList:FirewallAddrList":
                return new exports.FirewallAddrList(name, undefined, { urn });
            case "routeros:index/firewallFilter:FirewallFilter":
                return new exports.FirewallFilter(name, undefined, { urn });
            case "routeros:index/firewallMangle:FirewallMangle":
                return new exports.FirewallMangle(name, undefined, { urn });
            case "routeros:index/firewallNat:FirewallNat":
                return new exports.FirewallNat(name, undefined, { urn });
            case "routeros:index/gre:Gre":
                return new exports.Gre(name, undefined, { urn });
            case "routeros:index/identity:Identity":
                return new exports.Identity(name, undefined, { urn });
            case "routeros:index/interface6to4:Interface6to4":
                return new exports.Interface6to4(name, undefined, { urn });
            case "routeros:index/interfaceBonding:InterfaceBonding":
                return new exports.InterfaceBonding(name, undefined, { urn });
            case "routeros:index/interfaceBridge:InterfaceBridge":
                return new exports.InterfaceBridge(name, undefined, { urn });
            case "routeros:index/interfaceBridgePort:InterfaceBridgePort":
                return new exports.InterfaceBridgePort(name, undefined, { urn });
            case "routeros:index/interfaceBridgeSettings:InterfaceBridgeSettings":
                return new exports.InterfaceBridgeSettings(name, undefined, { urn });
            case "routeros:index/interfaceBridgeVlan:InterfaceBridgeVlan":
                return new exports.InterfaceBridgeVlan(name, undefined, { urn });
            case "routeros:index/interfaceDot1xClient:InterfaceDot1xClient":
                return new exports.InterfaceDot1xClient(name, undefined, { urn });
            case "routeros:index/interfaceDot1xServer:InterfaceDot1xServer":
                return new exports.InterfaceDot1xServer(name, undefined, { urn });
            case "routeros:index/interfaceEoip:InterfaceEoip":
                return new exports.InterfaceEoip(name, undefined, { urn });
            case "routeros:index/interfaceEthernet:InterfaceEthernet":
                return new exports.InterfaceEthernet(name, undefined, { urn });
            case "routeros:index/interfaceEthernetSwitch:InterfaceEthernetSwitch":
                return new exports.InterfaceEthernetSwitch(name, undefined, { urn });
            case "routeros:index/interfaceEthernetSwitchHost:InterfaceEthernetSwitchHost":
                return new exports.InterfaceEthernetSwitchHost(name, undefined, { urn });
            case "routeros:index/interfaceEthernetSwitchPort:InterfaceEthernetSwitchPort":
                return new exports.InterfaceEthernetSwitchPort(name, undefined, { urn });
            case "routeros:index/interfaceEthernetSwitchPortIsolation:InterfaceEthernetSwitchPortIsolation":
                return new exports.InterfaceEthernetSwitchPortIsolation(name, undefined, { urn });
            case "routeros:index/interfaceEthernetSwitchRule:InterfaceEthernetSwitchRule":
                return new exports.InterfaceEthernetSwitchRule(name, undefined, { urn });
            case "routeros:index/interfaceEthernetSwitchVlan:InterfaceEthernetSwitchVlan":
                return new exports.InterfaceEthernetSwitchVlan(name, undefined, { urn });
            case "routeros:index/interfaceGre:InterfaceGre":
                return new exports.InterfaceGre(name, undefined, { urn });
            case "routeros:index/interfaceIpip:InterfaceIpip":
                return new exports.InterfaceIpip(name, undefined, { urn });
            case "routeros:index/interfaceList:InterfaceList":
                return new exports.InterfaceList(name, undefined, { urn });
            case "routeros:index/interfaceListMember:InterfaceListMember":
                return new exports.InterfaceListMember(name, undefined, { urn });
            case "routeros:index/interfaceLte:InterfaceLte":
                return new exports.InterfaceLte(name, undefined, { urn });
            case "routeros:index/interfaceLteApn:InterfaceLteApn":
                return new exports.InterfaceLteApn(name, undefined, { urn });
            case "routeros:index/interfaceMacvlan:InterfaceMacvlan":
                return new exports.InterfaceMacvlan(name, undefined, { urn });
            case "routeros:index/interfaceOvpnClient:InterfaceOvpnClient":
                return new exports.InterfaceOvpnClient(name, undefined, { urn });
            case "routeros:index/interfaceOvpnServer:InterfaceOvpnServer":
                return new exports.InterfaceOvpnServer(name, undefined, { urn });
            case "routeros:index/interfacePppoeClient:InterfacePppoeClient":
                return new exports.InterfacePppoeClient(name, undefined, { urn });
            case "routeros:index/interfaceVeth:InterfaceVeth":
                return new exports.InterfaceVeth(name, undefined, { urn });
            case "routeros:index/interfaceVlan:InterfaceVlan":
                return new exports.InterfaceVlan(name, undefined, { urn });
            case "routeros:index/interfaceVrrp:InterfaceVrrp":
                return new exports.InterfaceVrrp(name, undefined, { urn });
            case "routeros:index/interfaceVxlan:InterfaceVxlan":
                return new exports.InterfaceVxlan(name, undefined, { urn });
            case "routeros:index/interfaceVxlanVteps:InterfaceVxlanVteps":
                return new exports.InterfaceVxlanVteps(name, undefined, { urn });
            case "routeros:index/interfaceWireguard:InterfaceWireguard":
                return new exports.InterfaceWireguard(name, undefined, { urn });
            case "routeros:index/interfaceWireguardPeer:InterfaceWireguardPeer":
                return new exports.InterfaceWireguardPeer(name, undefined, { urn });
            case "routeros:index/interfaceWireless:InterfaceWireless":
                return new exports.InterfaceWireless(name, undefined, { urn });
            case "routeros:index/interfaceWirelessAccessList:InterfaceWirelessAccessList":
                return new exports.InterfaceWirelessAccessList(name, undefined, { urn });
            case "routeros:index/interfaceWirelessCap:InterfaceWirelessCap":
                return new exports.InterfaceWirelessCap(name, undefined, { urn });
            case "routeros:index/interfaceWirelessConnectList:InterfaceWirelessConnectList":
                return new exports.InterfaceWirelessConnectList(name, undefined, { urn });
            case "routeros:index/interfaceWirelessSecurityProfiles:InterfaceWirelessSecurityProfiles":
                return new exports.InterfaceWirelessSecurityProfiles(name, undefined, { urn });
            case "routeros:index/ipAddress:IpAddress":
                return new exports.IpAddress(name, undefined, { urn });
            case "routeros:index/ipCloud:IpCloud":
                return new exports.IpCloud(name, undefined, { urn });
            case "routeros:index/ipCloudAdvanced:IpCloudAdvanced":
                return new exports.IpCloudAdvanced(name, undefined, { urn });
            case "routeros:index/ipDhcpClient:IpDhcpClient":
                return new exports.IpDhcpClient(name, undefined, { urn });
            case "routeros:index/ipDhcpClientOption:IpDhcpClientOption":
                return new exports.IpDhcpClientOption(name, undefined, { urn });
            case "routeros:index/ipDhcpRelay:IpDhcpRelay":
                return new exports.IpDhcpRelay(name, undefined, { urn });
            case "routeros:index/ipDhcpServer:IpDhcpServer":
                return new exports.IpDhcpServer(name, undefined, { urn });
            case "routeros:index/ipDhcpServerConfig:IpDhcpServerConfig":
                return new exports.IpDhcpServerConfig(name, undefined, { urn });
            case "routeros:index/ipDhcpServerLease:IpDhcpServerLease":
                return new exports.IpDhcpServerLease(name, undefined, { urn });
            case "routeros:index/ipDhcpServerNetwork:IpDhcpServerNetwork":
                return new exports.IpDhcpServerNetwork(name, undefined, { urn });
            case "routeros:index/ipDhcpServerOption:IpDhcpServerOption":
                return new exports.IpDhcpServerOption(name, undefined, { urn });
            case "routeros:index/ipDhcpServerOptionSet:IpDhcpServerOptionSet":
                return new exports.IpDhcpServerOptionSet(name, undefined, { urn });
            case "routeros:index/ipDns:IpDns":
                return new exports.IpDns(name, undefined, { urn });
            case "routeros:index/ipDnsAdlist:IpDnsAdlist":
                return new exports.IpDnsAdlist(name, undefined, { urn });
            case "routeros:index/ipDnsRecord:IpDnsRecord":
                return new exports.IpDnsRecord(name, undefined, { urn });
            case "routeros:index/ipFirewallAddrList:IpFirewallAddrList":
                return new exports.IpFirewallAddrList(name, undefined, { urn });
            case "routeros:index/ipFirewallConnectionTracking:IpFirewallConnectionTracking":
                return new exports.IpFirewallConnectionTracking(name, undefined, { urn });
            case "routeros:index/ipFirewallFilter:IpFirewallFilter":
                return new exports.IpFirewallFilter(name, undefined, { urn });
            case "routeros:index/ipFirewallMangle:IpFirewallMangle":
                return new exports.IpFirewallMangle(name, undefined, { urn });
            case "routeros:index/ipFirewallNat:IpFirewallNat":
                return new exports.IpFirewallNat(name, undefined, { urn });
            case "routeros:index/ipFirewallRaw:IpFirewallRaw":
                return new exports.IpFirewallRaw(name, undefined, { urn });
            case "routeros:index/ipHotspot:IpHotspot":
                return new exports.IpHotspot(name, undefined, { urn });
            case "routeros:index/ipHotspotIpBinding:IpHotspotIpBinding":
                return new exports.IpHotspotIpBinding(name, undefined, { urn });
            case "routeros:index/ipHotspotProfile:IpHotspotProfile":
                return new exports.IpHotspotProfile(name, undefined, { urn });
            case "routeros:index/ipHotspotServicePort:IpHotspotServicePort":
                return new exports.IpHotspotServicePort(name, undefined, { urn });
            case "routeros:index/ipHotspotUser:IpHotspotUser":
                return new exports.IpHotspotUser(name, undefined, { urn });
            case "routeros:index/ipHotspotUserProfile:IpHotspotUserProfile":
                return new exports.IpHotspotUserProfile(name, undefined, { urn });
            case "routeros:index/ipHotspotWalledGarden:IpHotspotWalledGarden":
                return new exports.IpHotspotWalledGarden(name, undefined, { urn });
            case "routeros:index/ipHotspotWalledGardenIp:IpHotspotWalledGardenIp":
                return new exports.IpHotspotWalledGardenIp(name, undefined, { urn });
            case "routeros:index/ipIpsecIdentity:IpIpsecIdentity":
                return new exports.IpIpsecIdentity(name, undefined, { urn });
            case "routeros:index/ipIpsecKey:IpIpsecKey":
                return new exports.IpIpsecKey(name, undefined, { urn });
            case "routeros:index/ipIpsecModeConfig:IpIpsecModeConfig":
                return new exports.IpIpsecModeConfig(name, undefined, { urn });
            case "routeros:index/ipIpsecPeer:IpIpsecPeer":
                return new exports.IpIpsecPeer(name, undefined, { urn });
            case "routeros:index/ipIpsecPolicy:IpIpsecPolicy":
                return new exports.IpIpsecPolicy(name, undefined, { urn });
            case "routeros:index/ipIpsecPolicyGroup:IpIpsecPolicyGroup":
                return new exports.IpIpsecPolicyGroup(name, undefined, { urn });
            case "routeros:index/ipIpsecProfile:IpIpsecProfile":
                return new exports.IpIpsecProfile(name, undefined, { urn });
            case "routeros:index/ipIpsecProposal:IpIpsecProposal":
                return new exports.IpIpsecProposal(name, undefined, { urn });
            case "routeros:index/ipIpsecSettings:IpIpsecSettings":
                return new exports.IpIpsecSettings(name, undefined, { urn });
            case "routeros:index/ipNeighborDiscoverySettings:IpNeighborDiscoverySettings":
                return new exports.IpNeighborDiscoverySettings(name, undefined, { urn });
            case "routeros:index/ipPool:IpPool":
                return new exports.IpPool(name, undefined, { urn });
            case "routeros:index/ipRoute:IpRoute":
                return new exports.IpRoute(name, undefined, { urn });
            case "routeros:index/ipService:IpService":
                return new exports.IpService(name, undefined, { urn });
            case "routeros:index/ipSshServer:IpSshServer":
                return new exports.IpSshServer(name, undefined, { urn });
            case "routeros:index/ipUpnp:IpUpnp":
                return new exports.IpUpnp(name, undefined, { urn });
            case "routeros:index/ipUpnpInterfaces:IpUpnpInterfaces":
                return new exports.IpUpnpInterfaces(name, undefined, { urn });
            case "routeros:index/ipVrf:IpVrf":
                return new exports.IpVrf(name, undefined, { urn });
            case "routeros:index/ipip:Ipip":
                return new exports.Ipip(name, undefined, { urn });
            case "routeros:index/ipv6Address:Ipv6Address":
                return new exports.Ipv6Address(name, undefined, { urn });
            case "routeros:index/ipv6DhcpClient:Ipv6DhcpClient":
                return new exports.Ipv6DhcpClient(name, undefined, { urn });
            case "routeros:index/ipv6DhcpClientOption:Ipv6DhcpClientOption":
                return new exports.Ipv6DhcpClientOption(name, undefined, { urn });
            case "routeros:index/ipv6DhcpServer:Ipv6DhcpServer":
                return new exports.Ipv6DhcpServer(name, undefined, { urn });
            case "routeros:index/ipv6DhcpServerOption:Ipv6DhcpServerOption":
                return new exports.Ipv6DhcpServerOption(name, undefined, { urn });
            case "routeros:index/ipv6DhcpServerOptionSets:Ipv6DhcpServerOptionSets":
                return new exports.Ipv6DhcpServerOptionSets(name, undefined, { urn });
            case "routeros:index/ipv6FirewallAddrList:Ipv6FirewallAddrList":
                return new exports.Ipv6FirewallAddrList(name, undefined, { urn });
            case "routeros:index/ipv6FirewallFilter:Ipv6FirewallFilter":
                return new exports.Ipv6FirewallFilter(name, undefined, { urn });
            case "routeros:index/ipv6NeighborDiscovery:Ipv6NeighborDiscovery":
                return new exports.Ipv6NeighborDiscovery(name, undefined, { urn });
            case "routeros:index/ipv6Pool:Ipv6Pool":
                return new exports.Ipv6Pool(name, undefined, { urn });
            case "routeros:index/ipv6Route:Ipv6Route":
                return new exports.Ipv6Route(name, undefined, { urn });
            case "routeros:index/ipv6Settings:Ipv6Settings":
                return new exports.Ipv6Settings(name, undefined, { urn });
            case "routeros:index/moveItems:MoveItems":
                return new exports.MoveItems(name, undefined, { urn });
            case "routeros:index/ovpnServer:OvpnServer":
                return new exports.OvpnServer(name, undefined, { urn });
            case "routeros:index/pppAaa:PppAaa":
                return new exports.PppAaa(name, undefined, { urn });
            case "routeros:index/pppProfile:PppProfile":
                return new exports.PppProfile(name, undefined, { urn });
            case "routeros:index/pppSecret:PppSecret":
                return new exports.PppSecret(name, undefined, { urn });
            case "routeros:index/radius:Radius":
                return new exports.Radius(name, undefined, { urn });
            case "routeros:index/radiusIncoming:RadiusIncoming":
                return new exports.RadiusIncoming(name, undefined, { urn });
            case "routeros:index/routingBgpConnection:RoutingBgpConnection":
                return new exports.RoutingBgpConnection(name, undefined, { urn });
            case "routeros:index/routingBgpTemplate:RoutingBgpTemplate":
                return new exports.RoutingBgpTemplate(name, undefined, { urn });
            case "routeros:index/routingFilterRule:RoutingFilterRule":
                return new exports.RoutingFilterRule(name, undefined, { urn });
            case "routeros:index/routingOspfArea:RoutingOspfArea":
                return new exports.RoutingOspfArea(name, undefined, { urn });
            case "routeros:index/routingOspfInstance:RoutingOspfInstance":
                return new exports.RoutingOspfInstance(name, undefined, { urn });
            case "routeros:index/routingOspfInterfaceTemplate:RoutingOspfInterfaceTemplate":
                return new exports.RoutingOspfInterfaceTemplate(name, undefined, { urn });
            case "routeros:index/routingRule:RoutingRule":
                return new exports.RoutingRule(name, undefined, { urn });
            case "routeros:index/routingTable:RoutingTable":
                return new exports.RoutingTable(name, undefined, { urn });
            case "routeros:index/scheduler:Scheduler":
                return new exports.Scheduler(name, undefined, { urn });
            case "routeros:index/snmp:Snmp":
                return new exports.Snmp(name, undefined, { urn });
            case "routeros:index/snmpCommunity:SnmpCommunity":
                return new exports.SnmpCommunity(name, undefined, { urn });
            case "routeros:index/systemCertificate:SystemCertificate":
                return new exports.SystemCertificate(name, undefined, { urn });
            case "routeros:index/systemCertificateScepServer:SystemCertificateScepServer":
                return new exports.SystemCertificateScepServer(name, undefined, { urn });
            case "routeros:index/systemClock:SystemClock":
                return new exports.SystemClock(name, undefined, { urn });
            case "routeros:index/systemIdentity:SystemIdentity":
                return new exports.SystemIdentity(name, undefined, { urn });
            case "routeros:index/systemLed:SystemLed":
                return new exports.SystemLed(name, undefined, { urn });
            case "routeros:index/systemLedSettings:SystemLedSettings":
                return new exports.SystemLedSettings(name, undefined, { urn });
            case "routeros:index/systemLogging:SystemLogging":
                return new exports.SystemLogging(name, undefined, { urn });
            case "routeros:index/systemLoggingAction:SystemLoggingAction":
                return new exports.SystemLoggingAction(name, undefined, { urn });
            case "routeros:index/systemNtpClient:SystemNtpClient":
                return new exports.SystemNtpClient(name, undefined, { urn });
            case "routeros:index/systemNtpServer:SystemNtpServer":
                return new exports.SystemNtpServer(name, undefined, { urn });
            case "routeros:index/systemRouterboardButtonMode:SystemRouterboardButtonMode":
                return new exports.SystemRouterboardButtonMode(name, undefined, { urn });
            case "routeros:index/systemRouterboardButtonReset:SystemRouterboardButtonReset":
                return new exports.SystemRouterboardButtonReset(name, undefined, { urn });
            case "routeros:index/systemRouterboardButtonWps:SystemRouterboardButtonWps":
                return new exports.SystemRouterboardButtonWps(name, undefined, { urn });
            case "routeros:index/systemRouterboardSettings:SystemRouterboardSettings":
                return new exports.SystemRouterboardSettings(name, undefined, { urn });
            case "routeros:index/systemRouterboardUsb:SystemRouterboardUsb":
                return new exports.SystemRouterboardUsb(name, undefined, { urn });
            case "routeros:index/systemScheduler:SystemScheduler":
                return new exports.SystemScheduler(name, undefined, { urn });
            case "routeros:index/systemScript:SystemScript":
                return new exports.SystemScript(name, undefined, { urn });
            case "routeros:index/systemUser:SystemUser":
                return new exports.SystemUser(name, undefined, { urn });
            case "routeros:index/systemUserAaa:SystemUserAaa":
                return new exports.SystemUserAaa(name, undefined, { urn });
            case "routeros:index/systemUserGroup:SystemUserGroup":
                return new exports.SystemUserGroup(name, undefined, { urn });
            case "routeros:index/systemUserSettings:SystemUserSettings":
                return new exports.SystemUserSettings(name, undefined, { urn });
            case "routeros:index/toolBandwidthServer:ToolBandwidthServer":
                return new exports.ToolBandwidthServer(name, undefined, { urn });
            case "routeros:index/toolMacServer:ToolMacServer":
                return new exports.ToolMacServer(name, undefined, { urn });
            case "routeros:index/toolMacServerWinbox:ToolMacServerWinbox":
                return new exports.ToolMacServerWinbox(name, undefined, { urn });
            case "routeros:index/toolNetwatch:ToolNetwatch":
                return new exports.ToolNetwatch(name, undefined, { urn });
            case "routeros:index/toolSniffer:ToolSniffer":
                return new exports.ToolSniffer(name, undefined, { urn });
            case "routeros:index/userManagerAdvanced:UserManagerAdvanced":
                return new exports.UserManagerAdvanced(name, undefined, { urn });
            case "routeros:index/userManagerAttribute:UserManagerAttribute":
                return new exports.UserManagerAttribute(name, undefined, { urn });
            case "routeros:index/userManagerDatabase:UserManagerDatabase":
                return new exports.UserManagerDatabase(name, undefined, { urn });
            case "routeros:index/userManagerLimitation:UserManagerLimitation":
                return new exports.UserManagerLimitation(name, undefined, { urn });
            case "routeros:index/userManagerProfile:UserManagerProfile":
                return new exports.UserManagerProfile(name, undefined, { urn });
            case "routeros:index/userManagerProfileLimitation:UserManagerProfileLimitation":
                return new exports.UserManagerProfileLimitation(name, undefined, { urn });
            case "routeros:index/userManagerRouter:UserManagerRouter":
                return new exports.UserManagerRouter(name, undefined, { urn });
            case "routeros:index/userManagerSettings:UserManagerSettings":
                return new exports.UserManagerSettings(name, undefined, { urn });
            case "routeros:index/userManagerUser:UserManagerUser":
                return new exports.UserManagerUser(name, undefined, { urn });
            case "routeros:index/userManagerUserGroup:UserManagerUserGroup":
                return new exports.UserManagerUserGroup(name, undefined, { urn });
            case "routeros:index/userManagerUserProfile:UserManagerUserProfile":
                return new exports.UserManagerUserProfile(name, undefined, { urn });
            case "routeros:index/vlan:Vlan":
                return new exports.Vlan(name, undefined, { urn });
            case "routeros:index/vrrp:Vrrp":
                return new exports.Vrrp(name, undefined, { urn });
            case "routeros:index/wifi:Wifi":
                return new exports.Wifi(name, undefined, { urn });
            case "routeros:index/wifiAaa:WifiAaa":
                return new exports.WifiAaa(name, undefined, { urn });
            case "routeros:index/wifiAccessList:WifiAccessList":
                return new exports.WifiAccessList(name, undefined, { urn });
            case "routeros:index/wifiCap:WifiCap":
                return new exports.WifiCap(name, undefined, { urn });
            case "routeros:index/wifiCapsman:WifiCapsman":
                return new exports.WifiCapsman(name, undefined, { urn });
            case "routeros:index/wifiChannel:WifiChannel":
                return new exports.WifiChannel(name, undefined, { urn });
            case "routeros:index/wifiConfiguration:WifiConfiguration":
                return new exports.WifiConfiguration(name, undefined, { urn });
            case "routeros:index/wifiDatapath:WifiDatapath":
                return new exports.WifiDatapath(name, undefined, { urn });
            case "routeros:index/wifiInterworking:WifiInterworking":
                return new exports.WifiInterworking(name, undefined, { urn });
            case "routeros:index/wifiProvisioning:WifiProvisioning":
                return new exports.WifiProvisioning(name, undefined, { urn });
            case "routeros:index/wifiSecurity:WifiSecurity":
                return new exports.WifiSecurity(name, undefined, { urn });
            case "routeros:index/wifiSteering:WifiSteering":
                return new exports.WifiSteering(name, undefined, { urn });
            case "routeros:index/wireguard:Wireguard":
                return new exports.Wireguard(name, undefined, { urn });
            case "routeros:index/wireguardKeys:WireguardKeys":
                return new exports.WireguardKeys(name, undefined, { urn });
            case "routeros:index/wireguardPeer:WireguardPeer":
                return new exports.WireguardPeer(name, undefined, { urn });
            case "routeros:index/zerotier:Zerotier":
                return new exports.Zerotier(name, undefined, { urn });
            case "routeros:index/zerotierController:ZerotierController":
                return new exports.ZerotierController(name, undefined, { urn });
            case "routeros:index/zerotierInterface:ZerotierInterface":
                return new exports.ZerotierInterface(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("routeros", "index/bridge", _module);
pulumi.runtime.registerResourceModule("routeros", "index/bridgeMlag", _module);
pulumi.runtime.registerResourceModule("routeros", "index/bridgePort", _module);
pulumi.runtime.registerResourceModule("routeros", "index/bridgeVlan", _module);
pulumi.runtime.registerResourceModule("routeros", "index/capsmanAaa", _module);
pulumi.runtime.registerResourceModule("routeros", "index/capsmanAccessList", _module);
pulumi.runtime.registerResourceModule("routeros", "index/capsmanChannel", _module);
pulumi.runtime.registerResourceModule("routeros", "index/capsmanConfiguration", _module);
pulumi.runtime.registerResourceModule("routeros", "index/capsmanDatapath", _module);
pulumi.runtime.registerResourceModule("routeros", "index/capsmanInterface", _module);
pulumi.runtime.registerResourceModule("routeros", "index/capsmanManager", _module);
pulumi.runtime.registerResourceModule("routeros", "index/capsmanManagerInterface", _module);
pulumi.runtime.registerResourceModule("routeros", "index/capsmanProvisioning", _module);
pulumi.runtime.registerResourceModule("routeros", "index/capsmanRates", _module);
pulumi.runtime.registerResourceModule("routeros", "index/capsmanSecurity", _module);
pulumi.runtime.registerResourceModule("routeros", "index/certificateScepServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/container", _module);
pulumi.runtime.registerResourceModule("routeros", "index/containerConfig", _module);
pulumi.runtime.registerResourceModule("routeros", "index/containerEnvs", _module);
pulumi.runtime.registerResourceModule("routeros", "index/containerMounts", _module);
pulumi.runtime.registerResourceModule("routeros", "index/dhcpClient", _module);
pulumi.runtime.registerResourceModule("routeros", "index/dhcpClientOption", _module);
pulumi.runtime.registerResourceModule("routeros", "index/dhcpServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/dhcpServerLease", _module);
pulumi.runtime.registerResourceModule("routeros", "index/dhcpServerNetwork", _module);
pulumi.runtime.registerResourceModule("routeros", "index/dns", _module);
pulumi.runtime.registerResourceModule("routeros", "index/dnsRecord", _module);
pulumi.runtime.registerResourceModule("routeros", "index/file", _module);
pulumi.runtime.registerResourceModule("routeros", "index/firewallAddrList", _module);
pulumi.runtime.registerResourceModule("routeros", "index/firewallFilter", _module);
pulumi.runtime.registerResourceModule("routeros", "index/firewallMangle", _module);
pulumi.runtime.registerResourceModule("routeros", "index/firewallNat", _module);
pulumi.runtime.registerResourceModule("routeros", "index/gre", _module);
pulumi.runtime.registerResourceModule("routeros", "index/identity", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interface6to4", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceBonding", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceBridge", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceBridgePort", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceBridgeSettings", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceBridgeVlan", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceDot1xClient", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceDot1xServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEoip", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernet", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitch", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitchHost", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitchPort", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitchPortIsolation", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitchRule", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitchVlan", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceGre", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceIpip", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceList", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceListMember", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceLte", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceLteApn", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceMacvlan", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceOvpnClient", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceOvpnServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfacePppoeClient", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceVeth", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceVlan", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceVrrp", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceVxlan", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceVxlanVteps", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWireguard", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWireguardPeer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWireless", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWirelessAccessList", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWirelessCap", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWirelessConnectList", _module);
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWirelessSecurityProfiles", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipAddress", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipCloud", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipCloudAdvanced", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpClient", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpClientOption", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpRelay", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServerConfig", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServerLease", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServerNetwork", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServerOption", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServerOptionSet", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDns", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDnsAdlist", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipDnsRecord", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallAddrList", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallConnectionTracking", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallFilter", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallMangle", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallNat", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallRaw", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspot", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotIpBinding", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotProfile", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotServicePort", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotUser", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotUserProfile", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotWalledGarden", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotWalledGardenIp", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecIdentity", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecKey", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecModeConfig", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecPeer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecPolicy", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecPolicyGroup", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecProfile", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecProposal", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecSettings", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipNeighborDiscoverySettings", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipPool", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipRoute", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipService", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipSshServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipUpnp", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipUpnpInterfaces", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipVrf", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipip", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6Address", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6DhcpClient", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6DhcpClientOption", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6DhcpServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6DhcpServerOption", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6DhcpServerOptionSets", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6FirewallAddrList", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6FirewallFilter", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6NeighborDiscovery", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6Pool", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6Route", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ipv6Settings", _module);
pulumi.runtime.registerResourceModule("routeros", "index/moveItems", _module);
pulumi.runtime.registerResourceModule("routeros", "index/ovpnServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/pppAaa", _module);
pulumi.runtime.registerResourceModule("routeros", "index/pppProfile", _module);
pulumi.runtime.registerResourceModule("routeros", "index/pppSecret", _module);
pulumi.runtime.registerResourceModule("routeros", "index/radius", _module);
pulumi.runtime.registerResourceModule("routeros", "index/radiusIncoming", _module);
pulumi.runtime.registerResourceModule("routeros", "index/routingBgpConnection", _module);
pulumi.runtime.registerResourceModule("routeros", "index/routingBgpTemplate", _module);
pulumi.runtime.registerResourceModule("routeros", "index/routingFilterRule", _module);
pulumi.runtime.registerResourceModule("routeros", "index/routingOspfArea", _module);
pulumi.runtime.registerResourceModule("routeros", "index/routingOspfInstance", _module);
pulumi.runtime.registerResourceModule("routeros", "index/routingOspfInterfaceTemplate", _module);
pulumi.runtime.registerResourceModule("routeros", "index/routingRule", _module);
pulumi.runtime.registerResourceModule("routeros", "index/routingTable", _module);
pulumi.runtime.registerResourceModule("routeros", "index/scheduler", _module);
pulumi.runtime.registerResourceModule("routeros", "index/snmp", _module);
pulumi.runtime.registerResourceModule("routeros", "index/snmpCommunity", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemCertificate", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemCertificateScepServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemClock", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemIdentity", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemLed", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemLedSettings", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemLogging", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemLoggingAction", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemNtpClient", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemNtpServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemRouterboardButtonMode", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemRouterboardButtonReset", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemRouterboardButtonWps", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemRouterboardSettings", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemRouterboardUsb", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemScheduler", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemScript", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemUser", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemUserAaa", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemUserGroup", _module);
pulumi.runtime.registerResourceModule("routeros", "index/systemUserSettings", _module);
pulumi.runtime.registerResourceModule("routeros", "index/toolBandwidthServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/toolMacServer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/toolMacServerWinbox", _module);
pulumi.runtime.registerResourceModule("routeros", "index/toolNetwatch", _module);
pulumi.runtime.registerResourceModule("routeros", "index/toolSniffer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/userManagerAdvanced", _module);
pulumi.runtime.registerResourceModule("routeros", "index/userManagerAttribute", _module);
pulumi.runtime.registerResourceModule("routeros", "index/userManagerDatabase", _module);
pulumi.runtime.registerResourceModule("routeros", "index/userManagerLimitation", _module);
pulumi.runtime.registerResourceModule("routeros", "index/userManagerProfile", _module);
pulumi.runtime.registerResourceModule("routeros", "index/userManagerProfileLimitation", _module);
pulumi.runtime.registerResourceModule("routeros", "index/userManagerRouter", _module);
pulumi.runtime.registerResourceModule("routeros", "index/userManagerSettings", _module);
pulumi.runtime.registerResourceModule("routeros", "index/userManagerUser", _module);
pulumi.runtime.registerResourceModule("routeros", "index/userManagerUserGroup", _module);
pulumi.runtime.registerResourceModule("routeros", "index/userManagerUserProfile", _module);
pulumi.runtime.registerResourceModule("routeros", "index/vlan", _module);
pulumi.runtime.registerResourceModule("routeros", "index/vrrp", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifi", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifiAaa", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifiAccessList", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifiCap", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifiCapsman", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifiChannel", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifiConfiguration", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifiDatapath", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifiInterworking", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifiProvisioning", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifiSecurity", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wifiSteering", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wireguard", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wireguardKeys", _module);
pulumi.runtime.registerResourceModule("routeros", "index/wireguardPeer", _module);
pulumi.runtime.registerResourceModule("routeros", "index/zerotier", _module);
pulumi.runtime.registerResourceModule("routeros", "index/zerotierController", _module);
pulumi.runtime.registerResourceModule("routeros", "index/zerotierInterface", _module);
pulumi.runtime.registerResourcePackage("routeros", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:routeros") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map