"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.InterfaceEthernetSwitchHost = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class InterfaceEthernetSwitchHost extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceEthernetSwitchHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new InterfaceEthernetSwitchHost(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of InterfaceEthernetSwitchHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceEthernetSwitchHost.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["copyToCpu"] = state ? state.copyToCpu : undefined;
            resourceInputs["drop"] = state ? state.drop : undefined;
            resourceInputs["dynamic"] = state ? state.dynamic : undefined;
            resourceInputs["interfaceEthernetSwitchHostId"] = state ? state.interfaceEthernetSwitchHostId : undefined;
            resourceInputs["invalid"] = state ? state.invalid : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["mirror"] = state ? state.mirror : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["redirectToCpu"] = state ? state.redirectToCpu : undefined;
            resourceInputs["shareVlanLearned"] = state ? state.shareVlanLearned : undefined;
            resourceInputs["switch"] = state ? state.switch : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.macAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'macAddress'");
            }
            if ((!args || args.ports === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ports'");
            }
            if ((!args || args.switch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'switch'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["copyToCpu"] = args ? args.copyToCpu : undefined;
            resourceInputs["drop"] = args ? args.drop : undefined;
            resourceInputs["interfaceEthernetSwitchHostId"] = args ? args.interfaceEthernetSwitchHostId : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["mirror"] = args ? args.mirror : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["redirectToCpu"] = args ? args.redirectToCpu : undefined;
            resourceInputs["shareVlanLearned"] = args ? args.shareVlanLearned : undefined;
            resourceInputs["switch"] = args ? args.switch : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["dynamic"] = undefined /*out*/;
            resourceInputs["invalid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceEthernetSwitchHost.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.InterfaceEthernetSwitchHost = InterfaceEthernetSwitchHost;
/** @internal */
InterfaceEthernetSwitchHost.__pulumiType = 'routeros:index/interfaceEthernetSwitchHost:InterfaceEthernetSwitchHost';
//# sourceMappingURL=interfaceEthernetSwitchHost.js.map