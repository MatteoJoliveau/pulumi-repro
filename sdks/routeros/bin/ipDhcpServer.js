"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpDhcpServer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class IpDhcpServer extends pulumi.CustomResource {
    /**
     * Get an existing IpDhcpServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IpDhcpServer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IpDhcpServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpDhcpServer.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["addArp"] = state ? state.addArp : undefined;
            resourceInputs["addressPool"] = state ? state.addressPool : undefined;
            resourceInputs["allowDualStackQueue"] = state ? state.allowDualStackQueue : undefined;
            resourceInputs["alwaysBroadcast"] = state ? state.alwaysBroadcast : undefined;
            resourceInputs["authoritative"] = state ? state.authoritative : undefined;
            resourceInputs["bootpLeaseTime"] = state ? state.bootpLeaseTime : undefined;
            resourceInputs["bootpSupport"] = state ? state.bootpSupport : undefined;
            resourceInputs["clientMacLimit"] = state ? state.clientMacLimit : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["conflictDetection"] = state ? state.conflictDetection : undefined;
            resourceInputs["delayThreshold"] = state ? state.delayThreshold : undefined;
            resourceInputs["dhcpOptionSet"] = state ? state.dhcpOptionSet : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dynamic"] = state ? state.dynamic : undefined;
            resourceInputs["insertQueueBefore"] = state ? state.insertQueueBefore : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["invalid"] = state ? state.invalid : undefined;
            resourceInputs["ipDhcpServerId"] = state ? state.ipDhcpServerId : undefined;
            resourceInputs["leaseScript"] = state ? state.leaseScript : undefined;
            resourceInputs["leaseTime"] = state ? state.leaseTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentQueue"] = state ? state.parentQueue : undefined;
            resourceInputs["relay"] = state ? state.relay : undefined;
            resourceInputs["srcAddress"] = state ? state.srcAddress : undefined;
            resourceInputs["useFramedAsClassless"] = state ? state.useFramedAsClassless : undefined;
            resourceInputs["useRadius"] = state ? state.useRadius : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["addArp"] = args ? args.addArp : undefined;
            resourceInputs["addressPool"] = args ? args.addressPool : undefined;
            resourceInputs["allowDualStackQueue"] = args ? args.allowDualStackQueue : undefined;
            resourceInputs["alwaysBroadcast"] = args ? args.alwaysBroadcast : undefined;
            resourceInputs["authoritative"] = args ? args.authoritative : undefined;
            resourceInputs["bootpLeaseTime"] = args ? args.bootpLeaseTime : undefined;
            resourceInputs["bootpSupport"] = args ? args.bootpSupport : undefined;
            resourceInputs["clientMacLimit"] = args ? args.clientMacLimit : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["conflictDetection"] = args ? args.conflictDetection : undefined;
            resourceInputs["delayThreshold"] = args ? args.delayThreshold : undefined;
            resourceInputs["dhcpOptionSet"] = args ? args.dhcpOptionSet : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["insertQueueBefore"] = args ? args.insertQueueBefore : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipDhcpServerId"] = args ? args.ipDhcpServerId : undefined;
            resourceInputs["leaseScript"] = args ? args.leaseScript : undefined;
            resourceInputs["leaseTime"] = args ? args.leaseTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentQueue"] = args ? args.parentQueue : undefined;
            resourceInputs["relay"] = args ? args.relay : undefined;
            resourceInputs["srcAddress"] = args ? args.srcAddress : undefined;
            resourceInputs["useFramedAsClassless"] = args ? args.useFramedAsClassless : undefined;
            resourceInputs["useRadius"] = args ? args.useRadius : undefined;
            resourceInputs["dynamic"] = undefined /*out*/;
            resourceInputs["invalid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpDhcpServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.IpDhcpServer = IpDhcpServer;
/** @internal */
IpDhcpServer.__pulumiType = 'routeros:index/ipDhcpServer:IpDhcpServer';
//# sourceMappingURL=ipDhcpServer.js.map