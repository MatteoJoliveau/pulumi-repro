"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpDhcpServerNetwork = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class IpDhcpServerNetwork extends pulumi.CustomResource {
    /**
     * Get an existing IpDhcpServerNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IpDhcpServerNetwork(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IpDhcpServerNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpDhcpServerNetwork.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["bootFileName"] = state ? state.bootFileName : undefined;
            resourceInputs["capsManagers"] = state ? state.capsManagers : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["dhcpOptionSet"] = state ? state.dhcpOptionSet : undefined;
            resourceInputs["dhcpOptions"] = state ? state.dhcpOptions : undefined;
            resourceInputs["dnsNone"] = state ? state.dnsNone : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["dynamic"] = state ? state.dynamic : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["ipDhcpServerNetworkId"] = state ? state.ipDhcpServerNetworkId : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["nextServer"] = state ? state.nextServer : undefined;
            resourceInputs["ntpServers"] = state ? state.ntpServers : undefined;
            resourceInputs["winsServers"] = state ? state.winsServers : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["bootFileName"] = args ? args.bootFileName : undefined;
            resourceInputs["capsManagers"] = args ? args.capsManagers : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["dhcpOptionSet"] = args ? args.dhcpOptionSet : undefined;
            resourceInputs["dhcpOptions"] = args ? args.dhcpOptions : undefined;
            resourceInputs["dnsNone"] = args ? args.dnsNone : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["ipDhcpServerNetworkId"] = args ? args.ipDhcpServerNetworkId : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["nextServer"] = args ? args.nextServer : undefined;
            resourceInputs["ntpServers"] = args ? args.ntpServers : undefined;
            resourceInputs["winsServers"] = args ? args.winsServers : undefined;
            resourceInputs["dynamic"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpDhcpServerNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.IpDhcpServerNetwork = IpDhcpServerNetwork;
/** @internal */
IpDhcpServerNetwork.__pulumiType = 'routeros:index/ipDhcpServerNetwork:IpDhcpServerNetwork';
//# sourceMappingURL=ipDhcpServerNetwork.js.map