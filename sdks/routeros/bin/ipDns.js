"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpDns = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class IpDns extends pulumi.CustomResource {
    /**
     * Get an existing IpDns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IpDns(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IpDns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpDns.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["addressListExtraTime"] = state ? state.addressListExtraTime : undefined;
            resourceInputs["allowRemoteRequests"] = state ? state.allowRemoteRequests : undefined;
            resourceInputs["cacheMaxTtl"] = state ? state.cacheMaxTtl : undefined;
            resourceInputs["cacheSize"] = state ? state.cacheSize : undefined;
            resourceInputs["cacheUsed"] = state ? state.cacheUsed : undefined;
            resourceInputs["dohMaxConcurrentQueries"] = state ? state.dohMaxConcurrentQueries : undefined;
            resourceInputs["dohMaxServerConnections"] = state ? state.dohMaxServerConnections : undefined;
            resourceInputs["dohTimeout"] = state ? state.dohTimeout : undefined;
            resourceInputs["dynamicServers"] = state ? state.dynamicServers : undefined;
            resourceInputs["ipDnsId"] = state ? state.ipDnsId : undefined;
            resourceInputs["maxConcurrentQueries"] = state ? state.maxConcurrentQueries : undefined;
            resourceInputs["maxConcurrentTcpSessions"] = state ? state.maxConcurrentTcpSessions : undefined;
            resourceInputs["maxUdpPacketSize"] = state ? state.maxUdpPacketSize : undefined;
            resourceInputs["mdnsRepeatIfaces"] = state ? state.mdnsRepeatIfaces : undefined;
            resourceInputs["queryServerTimeout"] = state ? state.queryServerTimeout : undefined;
            resourceInputs["queryTotalTimeout"] = state ? state.queryTotalTimeout : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["useDohServer"] = state ? state.useDohServer : undefined;
            resourceInputs["verifyDohCert"] = state ? state.verifyDohCert : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["addressListExtraTime"] = args ? args.addressListExtraTime : undefined;
            resourceInputs["allowRemoteRequests"] = args ? args.allowRemoteRequests : undefined;
            resourceInputs["cacheMaxTtl"] = args ? args.cacheMaxTtl : undefined;
            resourceInputs["cacheSize"] = args ? args.cacheSize : undefined;
            resourceInputs["dohMaxConcurrentQueries"] = args ? args.dohMaxConcurrentQueries : undefined;
            resourceInputs["dohMaxServerConnections"] = args ? args.dohMaxServerConnections : undefined;
            resourceInputs["dohTimeout"] = args ? args.dohTimeout : undefined;
            resourceInputs["ipDnsId"] = args ? args.ipDnsId : undefined;
            resourceInputs["maxConcurrentQueries"] = args ? args.maxConcurrentQueries : undefined;
            resourceInputs["maxConcurrentTcpSessions"] = args ? args.maxConcurrentTcpSessions : undefined;
            resourceInputs["maxUdpPacketSize"] = args ? args.maxUdpPacketSize : undefined;
            resourceInputs["mdnsRepeatIfaces"] = args ? args.mdnsRepeatIfaces : undefined;
            resourceInputs["queryServerTimeout"] = args ? args.queryServerTimeout : undefined;
            resourceInputs["queryTotalTimeout"] = args ? args.queryTotalTimeout : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["useDohServer"] = args ? args.useDohServer : undefined;
            resourceInputs["verifyDohCert"] = args ? args.verifyDohCert : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["cacheUsed"] = undefined /*out*/;
            resourceInputs["dynamicServers"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpDns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.IpDns = IpDns;
/** @internal */
IpDns.__pulumiType = 'routeros:index/ipDns:IpDns';
//# sourceMappingURL=ipDns.js.map