"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpIpsecIdentity = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class IpIpsecIdentity extends pulumi.CustomResource {
    /**
     * Get an existing IpIpsecIdentity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IpIpsecIdentity(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IpIpsecIdentity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpIpsecIdentity.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["authMethod"] = state ? state.authMethod : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dynamic"] = state ? state.dynamic : undefined;
            resourceInputs["eapMethods"] = state ? state.eapMethods : undefined;
            resourceInputs["generatePolicy"] = state ? state.generatePolicy : undefined;
            resourceInputs["ipIpsecIdentityId"] = state ? state.ipIpsecIdentityId : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["matchBy"] = state ? state.matchBy : undefined;
            resourceInputs["modeConfig"] = state ? state.modeConfig : undefined;
            resourceInputs["myId"] = state ? state.myId : undefined;
            resourceInputs["notrackChain"] = state ? state.notrackChain : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["peer"] = state ? state.peer : undefined;
            resourceInputs["policyTemplateGroup"] = state ? state.policyTemplateGroup : undefined;
            resourceInputs["remoteCertificate"] = state ? state.remoteCertificate : undefined;
            resourceInputs["remoteId"] = state ? state.remoteId : undefined;
            resourceInputs["remoteKey"] = state ? state.remoteKey : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.peer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peer'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["authMethod"] = args ? args.authMethod : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["eapMethods"] = args ? args.eapMethods : undefined;
            resourceInputs["generatePolicy"] = args ? args.generatePolicy : undefined;
            resourceInputs["ipIpsecIdentityId"] = args ? args.ipIpsecIdentityId : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["matchBy"] = args ? args.matchBy : undefined;
            resourceInputs["modeConfig"] = args ? args.modeConfig : undefined;
            resourceInputs["myId"] = args ? args.myId : undefined;
            resourceInputs["notrackChain"] = args ? args.notrackChain : undefined;
            resourceInputs["password"] = (args === null || args === void 0 ? void 0 : args.password) ? pulumi.secret(args.password) : undefined;
            resourceInputs["peer"] = args ? args.peer : undefined;
            resourceInputs["policyTemplateGroup"] = args ? args.policyTemplateGroup : undefined;
            resourceInputs["remoteCertificate"] = args ? args.remoteCertificate : undefined;
            resourceInputs["remoteId"] = args ? args.remoteId : undefined;
            resourceInputs["remoteKey"] = args ? args.remoteKey : undefined;
            resourceInputs["secret"] = (args === null || args === void 0 ? void 0 : args.secret) ? pulumi.secret(args.secret) : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["dynamic"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IpIpsecIdentity.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.IpIpsecIdentity = IpIpsecIdentity;
/** @internal */
IpIpsecIdentity.__pulumiType = 'routeros:index/ipIpsecIdentity:IpIpsecIdentity';
//# sourceMappingURL=ipIpsecIdentity.js.map