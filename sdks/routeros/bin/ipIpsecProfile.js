"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpIpsecProfile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class IpIpsecProfile extends pulumi.CustomResource {
    /**
     * Get an existing IpIpsecProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IpIpsecProfile(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IpIpsecProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpIpsecProfile.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["dhGroups"] = state ? state.dhGroups : undefined;
            resourceInputs["dpdInterval"] = state ? state.dpdInterval : undefined;
            resourceInputs["dpdMaximumFailures"] = state ? state.dpdMaximumFailures : undefined;
            resourceInputs["encAlgorithms"] = state ? state.encAlgorithms : undefined;
            resourceInputs["hashAlgorithm"] = state ? state.hashAlgorithm : undefined;
            resourceInputs["ipIpsecProfileId"] = state ? state.ipIpsecProfileId : undefined;
            resourceInputs["lifebytes"] = state ? state.lifebytes : undefined;
            resourceInputs["lifetime"] = state ? state.lifetime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natTraversal"] = state ? state.natTraversal : undefined;
            resourceInputs["prfAlgorithm"] = state ? state.prfAlgorithm : undefined;
            resourceInputs["proposalCheck"] = state ? state.proposalCheck : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["dhGroups"] = args ? args.dhGroups : undefined;
            resourceInputs["dpdInterval"] = args ? args.dpdInterval : undefined;
            resourceInputs["dpdMaximumFailures"] = args ? args.dpdMaximumFailures : undefined;
            resourceInputs["encAlgorithms"] = args ? args.encAlgorithms : undefined;
            resourceInputs["hashAlgorithm"] = args ? args.hashAlgorithm : undefined;
            resourceInputs["ipIpsecProfileId"] = args ? args.ipIpsecProfileId : undefined;
            resourceInputs["lifebytes"] = args ? args.lifebytes : undefined;
            resourceInputs["lifetime"] = args ? args.lifetime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natTraversal"] = args ? args.natTraversal : undefined;
            resourceInputs["prfAlgorithm"] = args ? args.prfAlgorithm : undefined;
            resourceInputs["proposalCheck"] = args ? args.proposalCheck : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpIpsecProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.IpIpsecProfile = IpIpsecProfile;
/** @internal */
IpIpsecProfile.__pulumiType = 'routeros:index/ipIpsecProfile:IpIpsecProfile';
//# sourceMappingURL=ipIpsecProfile.js.map