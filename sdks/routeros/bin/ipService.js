"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IpService = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class IpService extends pulumi.CustomResource {
    /**
     * Get an existing IpService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IpService(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IpService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpService.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["invalid"] = state ? state.invalid : undefined;
            resourceInputs["ipServiceId"] = state ? state.ipServiceId : undefined;
            resourceInputs["maxSessions"] = state ? state.maxSessions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numbers"] = state ? state.numbers : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["tlsVersion"] = state ? state.tlsVersion : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.numbers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numbers'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["ipServiceId"] = args ? args.ipServiceId : undefined;
            resourceInputs["maxSessions"] = args ? args.maxSessions : undefined;
            resourceInputs["numbers"] = args ? args.numbers : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["tlsVersion"] = args ? args.tlsVersion : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["invalid"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.IpService = IpService;
/** @internal */
IpService.__pulumiType = 'routeros:index/ipService:IpService';
//# sourceMappingURL=ipService.js.map