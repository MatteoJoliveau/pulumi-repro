"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ipv6NeighborDiscovery = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Ipv6NeighborDiscovery extends pulumi.CustomResource {
    /**
     * Get an existing Ipv6NeighborDiscovery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Ipv6NeighborDiscovery(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Ipv6NeighborDiscovery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ipv6NeighborDiscovery.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___dropVal_"] = state ? state.___dropVal_ : undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["advertiseDns"] = state ? state.advertiseDns : undefined;
            resourceInputs["advertiseMacAddress"] = state ? state.advertiseMacAddress : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["hopLimit"] = state ? state.hopLimit : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["invalid"] = state ? state.invalid : undefined;
            resourceInputs["ipv6NeighborDiscoveryId"] = state ? state.ipv6NeighborDiscoveryId : undefined;
            resourceInputs["managedAddressConfiguration"] = state ? state.managedAddressConfiguration : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["otherConfiguration"] = state ? state.otherConfiguration : undefined;
            resourceInputs["pref64s"] = state ? state.pref64s : undefined;
            resourceInputs["raDelay"] = state ? state.raDelay : undefined;
            resourceInputs["raInterval"] = state ? state.raInterval : undefined;
            resourceInputs["raLifetime"] = state ? state.raLifetime : undefined;
            resourceInputs["raPreference"] = state ? state.raPreference : undefined;
            resourceInputs["reachableTime"] = state ? state.reachableTime : undefined;
            resourceInputs["retransmitInterval"] = state ? state.retransmitInterval : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.interface === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interface'");
            }
            resourceInputs["___dropVal_"] = args ? args.___dropVal_ : undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["advertiseDns"] = args ? args.advertiseDns : undefined;
            resourceInputs["advertiseMacAddress"] = args ? args.advertiseMacAddress : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["hopLimit"] = args ? args.hopLimit : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ipv6NeighborDiscoveryId"] = args ? args.ipv6NeighborDiscoveryId : undefined;
            resourceInputs["managedAddressConfiguration"] = args ? args.managedAddressConfiguration : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["otherConfiguration"] = args ? args.otherConfiguration : undefined;
            resourceInputs["pref64s"] = args ? args.pref64s : undefined;
            resourceInputs["raDelay"] = args ? args.raDelay : undefined;
            resourceInputs["raInterval"] = args ? args.raInterval : undefined;
            resourceInputs["raLifetime"] = args ? args.raLifetime : undefined;
            resourceInputs["raPreference"] = args ? args.raPreference : undefined;
            resourceInputs["reachableTime"] = args ? args.reachableTime : undefined;
            resourceInputs["retransmitInterval"] = args ? args.retransmitInterval : undefined;
            resourceInputs["default"] = undefined /*out*/;
            resourceInputs["invalid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ipv6NeighborDiscovery.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Ipv6NeighborDiscovery = Ipv6NeighborDiscovery;
/** @internal */
Ipv6NeighborDiscovery.__pulumiType = 'routeros:index/ipv6NeighborDiscovery:Ipv6NeighborDiscovery';
//# sourceMappingURL=ipv6NeighborDiscovery.js.map