"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ipv6Settings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Ipv6Settings extends pulumi.CustomResource {
    /**
     * Get an existing Ipv6Settings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Ipv6Settings(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Ipv6Settings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ipv6Settings.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["acceptRedirects"] = state ? state.acceptRedirects : undefined;
            resourceInputs["acceptRouterAdvertisements"] = state ? state.acceptRouterAdvertisements : undefined;
            resourceInputs["disableIpv6"] = state ? state.disableIpv6 : undefined;
            resourceInputs["forward"] = state ? state.forward : undefined;
            resourceInputs["ipv6SettingsId"] = state ? state.ipv6SettingsId : undefined;
            resourceInputs["maxNeighborEntries"] = state ? state.maxNeighborEntries : undefined;
            resourceInputs["multipathHashPolicy"] = state ? state.multipathHashPolicy : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["acceptRedirects"] = args ? args.acceptRedirects : undefined;
            resourceInputs["acceptRouterAdvertisements"] = args ? args.acceptRouterAdvertisements : undefined;
            resourceInputs["disableIpv6"] = args ? args.disableIpv6 : undefined;
            resourceInputs["forward"] = args ? args.forward : undefined;
            resourceInputs["ipv6SettingsId"] = args ? args.ipv6SettingsId : undefined;
            resourceInputs["maxNeighborEntries"] = args ? args.maxNeighborEntries : undefined;
            resourceInputs["multipathHashPolicy"] = args ? args.multipathHashPolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ipv6Settings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Ipv6Settings = Ipv6Settings;
/** @internal */
Ipv6Settings.__pulumiType = 'routeros:index/ipv6Settings:Ipv6Settings';
//# sourceMappingURL=ipv6Settings.js.map