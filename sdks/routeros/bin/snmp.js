"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Snmp = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class Snmp extends pulumi.CustomResource {
    /**
     * Get an existing Snmp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Snmp(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Snmp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snmp.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["contact"] = state ? state.contact : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["engineId"] = state ? state.engineId : undefined;
            resourceInputs["engineIdSuffix"] = state ? state.engineIdSuffix : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["snmpId"] = state ? state.snmpId : undefined;
            resourceInputs["srcAddress"] = state ? state.srcAddress : undefined;
            resourceInputs["trapCommunity"] = state ? state.trapCommunity : undefined;
            resourceInputs["trapGenerators"] = state ? state.trapGenerators : undefined;
            resourceInputs["trapInterfaces"] = state ? state.trapInterfaces : undefined;
            resourceInputs["trapTargets"] = state ? state.trapTargets : undefined;
            resourceInputs["trapVersion"] = state ? state.trapVersion : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["contact"] = args ? args.contact : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["engineIdSuffix"] = args ? args.engineIdSuffix : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["snmpId"] = args ? args.snmpId : undefined;
            resourceInputs["srcAddress"] = args ? args.srcAddress : undefined;
            resourceInputs["trapCommunity"] = (args === null || args === void 0 ? void 0 : args.trapCommunity) ? pulumi.secret(args.trapCommunity) : undefined;
            resourceInputs["trapGenerators"] = args ? args.trapGenerators : undefined;
            resourceInputs["trapInterfaces"] = args ? args.trapInterfaces : undefined;
            resourceInputs["trapTargets"] = args ? args.trapTargets : undefined;
            resourceInputs["trapVersion"] = args ? args.trapVersion : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["engineId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["trapCommunity"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Snmp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.Snmp = Snmp;
/** @internal */
Snmp.__pulumiType = 'routeros:index/snmp:Snmp';
//# sourceMappingURL=snmp.js.map