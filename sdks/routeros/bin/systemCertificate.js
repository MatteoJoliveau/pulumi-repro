"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemCertificate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class SystemCertificate extends pulumi.CustomResource {
    /**
     * Get an existing SystemCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SystemCertificate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SystemCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemCertificate.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["___skip_"] = state ? state.___skip_ : undefined;
            resourceInputs["akid"] = state ? state.akid : undefined;
            resourceInputs["authority"] = state ? state.authority : undefined;
            resourceInputs["ca"] = state ? state.ca : undefined;
            resourceInputs["caCrlHost"] = state ? state.caCrlHost : undefined;
            resourceInputs["caFingerprint"] = state ? state.caFingerprint : undefined;
            resourceInputs["challengePassword"] = state ? state.challengePassword : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["copyFrom"] = state ? state.copyFrom : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["crl"] = state ? state.crl : undefined;
            resourceInputs["daysValid"] = state ? state.daysValid : undefined;
            resourceInputs["digestAlgorithm"] = state ? state.digestAlgorithm : undefined;
            resourceInputs["dsa"] = state ? state.dsa : undefined;
            resourceInputs["expired"] = state ? state.expired : undefined;
            resourceInputs["expiresAfter"] = state ? state.expiresAfter : undefined;
            resourceInputs["fingerprint"] = state ? state.fingerprint : undefined;
            resourceInputs["imports"] = state ? state.imports : undefined;
            resourceInputs["invalidAfter"] = state ? state.invalidAfter : undefined;
            resourceInputs["invalidBefore"] = state ? state.invalidBefore : undefined;
            resourceInputs["issued"] = state ? state.issued : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["keySize"] = state ? state.keySize : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["keyUsages"] = state ? state.keyUsages : undefined;
            resourceInputs["locality"] = state ? state.locality : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["reqFingerprint"] = state ? state.reqFingerprint : undefined;
            resourceInputs["revoked"] = state ? state.revoked : undefined;
            resourceInputs["scepUrl"] = state ? state.scepUrl : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["signViaSceps"] = state ? state.signViaSceps : undefined;
            resourceInputs["signs"] = state ? state.signs : undefined;
            resourceInputs["skid"] = state ? state.skid : undefined;
            resourceInputs["smartCardKey"] = state ? state.smartCardKey : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subjectAltName"] = state ? state.subjectAltName : undefined;
            resourceInputs["systemCertificateId"] = state ? state.systemCertificateId : undefined;
            resourceInputs["trusted"] = state ? state.trusted : undefined;
            resourceInputs["unit"] = state ? state.unit : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["___skip_"] = args ? args.___skip_ : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["copyFrom"] = args ? args.copyFrom : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["daysValid"] = args ? args.daysValid : undefined;
            resourceInputs["imports"] = args ? args.imports : undefined;
            resourceInputs["keySize"] = args ? args.keySize : undefined;
            resourceInputs["keyUsages"] = args ? args.keyUsages : undefined;
            resourceInputs["locality"] = args ? args.locality : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["signViaSceps"] = args ? args.signViaSceps : undefined;
            resourceInputs["signs"] = args ? args.signs : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["subjectAltName"] = args ? args.subjectAltName : undefined;
            resourceInputs["systemCertificateId"] = args ? args.systemCertificateId : undefined;
            resourceInputs["trusted"] = args ? args.trusted : undefined;
            resourceInputs["unit"] = args ? args.unit : undefined;
            resourceInputs["akid"] = undefined /*out*/;
            resourceInputs["authority"] = undefined /*out*/;
            resourceInputs["ca"] = undefined /*out*/;
            resourceInputs["caCrlHost"] = undefined /*out*/;
            resourceInputs["caFingerprint"] = undefined /*out*/;
            resourceInputs["challengePassword"] = undefined /*out*/;
            resourceInputs["crl"] = undefined /*out*/;
            resourceInputs["digestAlgorithm"] = undefined /*out*/;
            resourceInputs["dsa"] = undefined /*out*/;
            resourceInputs["expired"] = undefined /*out*/;
            resourceInputs["expiresAfter"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["invalidAfter"] = undefined /*out*/;
            resourceInputs["invalidBefore"] = undefined /*out*/;
            resourceInputs["issued"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["keyType"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["reqFingerprint"] = undefined /*out*/;
            resourceInputs["revoked"] = undefined /*out*/;
            resourceInputs["scepUrl"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["skid"] = undefined /*out*/;
            resourceInputs["smartCardKey"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["challengePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SystemCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.SystemCertificate = SystemCertificate;
/** @internal */
SystemCertificate.__pulumiType = 'routeros:index/systemCertificate:SystemCertificate';
//# sourceMappingURL=systemCertificate.js.map