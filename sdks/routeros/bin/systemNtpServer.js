"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemNtpServer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class SystemNtpServer extends pulumi.CustomResource {
    /**
     * Get an existing SystemNtpServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SystemNtpServer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SystemNtpServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemNtpServer.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["authKey"] = state ? state.authKey : undefined;
            resourceInputs["broadcast"] = state ? state.broadcast : undefined;
            resourceInputs["broadcastAddresses"] = state ? state.broadcastAddresses : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["localClockStratum"] = state ? state.localClockStratum : undefined;
            resourceInputs["manycast"] = state ? state.manycast : undefined;
            resourceInputs["multicast"] = state ? state.multicast : undefined;
            resourceInputs["systemNtpServerId"] = state ? state.systemNtpServerId : undefined;
            resourceInputs["useLocalClock"] = state ? state.useLocalClock : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["authKey"] = args ? args.authKey : undefined;
            resourceInputs["broadcast"] = args ? args.broadcast : undefined;
            resourceInputs["broadcastAddresses"] = args ? args.broadcastAddresses : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["localClockStratum"] = args ? args.localClockStratum : undefined;
            resourceInputs["manycast"] = args ? args.manycast : undefined;
            resourceInputs["multicast"] = args ? args.multicast : undefined;
            resourceInputs["systemNtpServerId"] = args ? args.systemNtpServerId : undefined;
            resourceInputs["useLocalClock"] = args ? args.useLocalClock : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemNtpServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.SystemNtpServer = SystemNtpServer;
/** @internal */
SystemNtpServer.__pulumiType = 'routeros:index/systemNtpServer:SystemNtpServer';
//# sourceMappingURL=systemNtpServer.js.map