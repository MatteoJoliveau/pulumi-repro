"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolBandwidthServer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class ToolBandwidthServer extends pulumi.CustomResource {
    /**
     * Get an existing ToolBandwidthServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ToolBandwidthServer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ToolBandwidthServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ToolBandwidthServer.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["allocateUdpPortsFrom"] = state ? state.allocateUdpPortsFrom : undefined;
            resourceInputs["authenticate"] = state ? state.authenticate : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["maxSessions"] = state ? state.maxSessions : undefined;
            resourceInputs["toolBandwidthServerId"] = state ? state.toolBandwidthServerId : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["allocateUdpPortsFrom"] = args ? args.allocateUdpPortsFrom : undefined;
            resourceInputs["authenticate"] = args ? args.authenticate : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["maxSessions"] = args ? args.maxSessions : undefined;
            resourceInputs["toolBandwidthServerId"] = args ? args.toolBandwidthServerId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ToolBandwidthServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.ToolBandwidthServer = ToolBandwidthServer;
/** @internal */
ToolBandwidthServer.__pulumiType = 'routeros:index/toolBandwidthServer:ToolBandwidthServer';
//# sourceMappingURL=toolBandwidthServer.js.map