"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolNetwatch = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class ToolNetwatch extends pulumi.CustomResource {
    /**
     * Get an existing ToolNetwatch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ToolNetwatch(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ToolNetwatch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ToolNetwatch.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["___skip_"] = state ? state.___skip_ : undefined;
            resourceInputs["acceptIcmpTimeExceeded"] = state ? state.acceptIcmpTimeExceeded : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dnsServer"] = state ? state.dnsServer : undefined;
            resourceInputs["downScript"] = state ? state.downScript : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["httpCodeMax"] = state ? state.httpCodeMax : undefined;
            resourceInputs["httpCodeMin"] = state ? state.httpCodeMin : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetCount"] = state ? state.packetCount : undefined;
            resourceInputs["packetInterval"] = state ? state.packetInterval : undefined;
            resourceInputs["packetSize"] = state ? state.packetSize : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["recordType"] = state ? state.recordType : undefined;
            resourceInputs["srcAddress"] = state ? state.srcAddress : undefined;
            resourceInputs["startDelay"] = state ? state.startDelay : undefined;
            resourceInputs["startupDelay"] = state ? state.startupDelay : undefined;
            resourceInputs["testScript"] = state ? state.testScript : undefined;
            resourceInputs["thrAvg"] = state ? state.thrAvg : undefined;
            resourceInputs["thrHttpTime"] = state ? state.thrHttpTime : undefined;
            resourceInputs["thrJitter"] = state ? state.thrJitter : undefined;
            resourceInputs["thrLossCount"] = state ? state.thrLossCount : undefined;
            resourceInputs["thrLossPercent"] = state ? state.thrLossPercent : undefined;
            resourceInputs["thrMax"] = state ? state.thrMax : undefined;
            resourceInputs["thrStdev"] = state ? state.thrStdev : undefined;
            resourceInputs["thrTcpConnTime"] = state ? state.thrTcpConnTime : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["toolNetwatchId"] = state ? state.toolNetwatchId : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["upScript"] = state ? state.upScript : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["___skip_"] = args ? args.___skip_ : undefined;
            resourceInputs["acceptIcmpTimeExceeded"] = args ? args.acceptIcmpTimeExceeded : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["dnsServer"] = args ? args.dnsServer : undefined;
            resourceInputs["downScript"] = args ? args.downScript : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["httpCodeMax"] = args ? args.httpCodeMax : undefined;
            resourceInputs["httpCodeMin"] = args ? args.httpCodeMin : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetCount"] = args ? args.packetCount : undefined;
            resourceInputs["packetInterval"] = args ? args.packetInterval : undefined;
            resourceInputs["packetSize"] = args ? args.packetSize : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["srcAddress"] = args ? args.srcAddress : undefined;
            resourceInputs["startDelay"] = args ? args.startDelay : undefined;
            resourceInputs["startupDelay"] = args ? args.startupDelay : undefined;
            resourceInputs["testScript"] = args ? args.testScript : undefined;
            resourceInputs["thrAvg"] = args ? args.thrAvg : undefined;
            resourceInputs["thrHttpTime"] = args ? args.thrHttpTime : undefined;
            resourceInputs["thrJitter"] = args ? args.thrJitter : undefined;
            resourceInputs["thrLossCount"] = args ? args.thrLossCount : undefined;
            resourceInputs["thrLossPercent"] = args ? args.thrLossPercent : undefined;
            resourceInputs["thrMax"] = args ? args.thrMax : undefined;
            resourceInputs["thrStdev"] = args ? args.thrStdev : undefined;
            resourceInputs["thrTcpConnTime"] = args ? args.thrTcpConnTime : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["toolNetwatchId"] = args ? args.toolNetwatchId : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["upScript"] = args ? args.upScript : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ToolNetwatch.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.ToolNetwatch = ToolNetwatch;
/** @internal */
ToolNetwatch.__pulumiType = 'routeros:index/toolNetwatch:ToolNetwatch';
//# sourceMappingURL=toolNetwatch.js.map