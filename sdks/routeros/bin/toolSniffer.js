"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolSniffer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class ToolSniffer extends pulumi.CustomResource {
    /**
     * Get an existing ToolSniffer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ToolSniffer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ToolSniffer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ToolSniffer.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["___skip_"] = state ? state.___skip_ : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fileLimit"] = state ? state.fileLimit : undefined;
            resourceInputs["fileName"] = state ? state.fileName : undefined;
            resourceInputs["filterCpu"] = state ? state.filterCpu : undefined;
            resourceInputs["filterDirection"] = state ? state.filterDirection : undefined;
            resourceInputs["filterDstIpAddresses"] = state ? state.filterDstIpAddresses : undefined;
            resourceInputs["filterDstIpv6Addresses"] = state ? state.filterDstIpv6Addresses : undefined;
            resourceInputs["filterDstMacAddresses"] = state ? state.filterDstMacAddresses : undefined;
            resourceInputs["filterDstPorts"] = state ? state.filterDstPorts : undefined;
            resourceInputs["filterInterfaces"] = state ? state.filterInterfaces : undefined;
            resourceInputs["filterIpAddresses"] = state ? state.filterIpAddresses : undefined;
            resourceInputs["filterIpProtocols"] = state ? state.filterIpProtocols : undefined;
            resourceInputs["filterIpv6Addresses"] = state ? state.filterIpv6Addresses : undefined;
            resourceInputs["filterMacAddresses"] = state ? state.filterMacAddresses : undefined;
            resourceInputs["filterMacProtocols"] = state ? state.filterMacProtocols : undefined;
            resourceInputs["filterOperatorBetweenEntries"] = state ? state.filterOperatorBetweenEntries : undefined;
            resourceInputs["filterPorts"] = state ? state.filterPorts : undefined;
            resourceInputs["filterSize"] = state ? state.filterSize : undefined;
            resourceInputs["filterSrcIpAddresses"] = state ? state.filterSrcIpAddresses : undefined;
            resourceInputs["filterSrcIpv6Addresses"] = state ? state.filterSrcIpv6Addresses : undefined;
            resourceInputs["filterSrcMacAddresses"] = state ? state.filterSrcMacAddresses : undefined;
            resourceInputs["filterSrcPorts"] = state ? state.filterSrcPorts : undefined;
            resourceInputs["filterStream"] = state ? state.filterStream : undefined;
            resourceInputs["filterVlans"] = state ? state.filterVlans : undefined;
            resourceInputs["memoryLimit"] = state ? state.memoryLimit : undefined;
            resourceInputs["memoryScroll"] = state ? state.memoryScroll : undefined;
            resourceInputs["onlyHeaders"] = state ? state.onlyHeaders : undefined;
            resourceInputs["running"] = state ? state.running : undefined;
            resourceInputs["streamingEnabled"] = state ? state.streamingEnabled : undefined;
            resourceInputs["streamingServer"] = state ? state.streamingServer : undefined;
            resourceInputs["toolSnifferId"] = state ? state.toolSnifferId : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["___skip_"] = args ? args.___skip_ : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fileLimit"] = args ? args.fileLimit : undefined;
            resourceInputs["fileName"] = args ? args.fileName : undefined;
            resourceInputs["filterCpu"] = args ? args.filterCpu : undefined;
            resourceInputs["filterDirection"] = args ? args.filterDirection : undefined;
            resourceInputs["filterDstIpAddresses"] = args ? args.filterDstIpAddresses : undefined;
            resourceInputs["filterDstIpv6Addresses"] = args ? args.filterDstIpv6Addresses : undefined;
            resourceInputs["filterDstMacAddresses"] = args ? args.filterDstMacAddresses : undefined;
            resourceInputs["filterDstPorts"] = args ? args.filterDstPorts : undefined;
            resourceInputs["filterInterfaces"] = args ? args.filterInterfaces : undefined;
            resourceInputs["filterIpAddresses"] = args ? args.filterIpAddresses : undefined;
            resourceInputs["filterIpProtocols"] = args ? args.filterIpProtocols : undefined;
            resourceInputs["filterIpv6Addresses"] = args ? args.filterIpv6Addresses : undefined;
            resourceInputs["filterMacAddresses"] = args ? args.filterMacAddresses : undefined;
            resourceInputs["filterMacProtocols"] = args ? args.filterMacProtocols : undefined;
            resourceInputs["filterOperatorBetweenEntries"] = args ? args.filterOperatorBetweenEntries : undefined;
            resourceInputs["filterPorts"] = args ? args.filterPorts : undefined;
            resourceInputs["filterSize"] = args ? args.filterSize : undefined;
            resourceInputs["filterSrcIpAddresses"] = args ? args.filterSrcIpAddresses : undefined;
            resourceInputs["filterSrcIpv6Addresses"] = args ? args.filterSrcIpv6Addresses : undefined;
            resourceInputs["filterSrcMacAddresses"] = args ? args.filterSrcMacAddresses : undefined;
            resourceInputs["filterSrcPorts"] = args ? args.filterSrcPorts : undefined;
            resourceInputs["filterStream"] = args ? args.filterStream : undefined;
            resourceInputs["filterVlans"] = args ? args.filterVlans : undefined;
            resourceInputs["memoryLimit"] = args ? args.memoryLimit : undefined;
            resourceInputs["memoryScroll"] = args ? args.memoryScroll : undefined;
            resourceInputs["onlyHeaders"] = args ? args.onlyHeaders : undefined;
            resourceInputs["streamingEnabled"] = args ? args.streamingEnabled : undefined;
            resourceInputs["streamingServer"] = args ? args.streamingServer : undefined;
            resourceInputs["toolSnifferId"] = args ? args.toolSnifferId : undefined;
            resourceInputs["running"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ToolSniffer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.ToolSniffer = ToolSniffer;
/** @internal */
ToolSniffer.__pulumiType = 'routeros:index/toolSniffer:ToolSniffer';
//# sourceMappingURL=toolSniffer.js.map