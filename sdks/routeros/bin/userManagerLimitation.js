"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserManagerLimitation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class UserManagerLimitation extends pulumi.CustomResource {
    /**
     * Get an existing UserManagerLimitation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UserManagerLimitation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UserManagerLimitation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserManagerLimitation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["downloadLimit"] = state ? state.downloadLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rateLimitBurstRx"] = state ? state.rateLimitBurstRx : undefined;
            resourceInputs["rateLimitBurstThresholdRx"] = state ? state.rateLimitBurstThresholdRx : undefined;
            resourceInputs["rateLimitBurstThresholdTx"] = state ? state.rateLimitBurstThresholdTx : undefined;
            resourceInputs["rateLimitBurstTimeRx"] = state ? state.rateLimitBurstTimeRx : undefined;
            resourceInputs["rateLimitBurstTimeTx"] = state ? state.rateLimitBurstTimeTx : undefined;
            resourceInputs["rateLimitBurstTx"] = state ? state.rateLimitBurstTx : undefined;
            resourceInputs["rateLimitMinRx"] = state ? state.rateLimitMinRx : undefined;
            resourceInputs["rateLimitMinTx"] = state ? state.rateLimitMinTx : undefined;
            resourceInputs["rateLimitPriority"] = state ? state.rateLimitPriority : undefined;
            resourceInputs["rateLimitRx"] = state ? state.rateLimitRx : undefined;
            resourceInputs["rateLimitTx"] = state ? state.rateLimitTx : undefined;
            resourceInputs["resetCountersInterval"] = state ? state.resetCountersInterval : undefined;
            resourceInputs["resetCountersStartTime"] = state ? state.resetCountersStartTime : undefined;
            resourceInputs["transferLimit"] = state ? state.transferLimit : undefined;
            resourceInputs["uploadLimit"] = state ? state.uploadLimit : undefined;
            resourceInputs["uptimeLimit"] = state ? state.uptimeLimit : undefined;
            resourceInputs["userManagerLimitationId"] = state ? state.userManagerLimitationId : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["downloadLimit"] = args ? args.downloadLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rateLimitBurstRx"] = args ? args.rateLimitBurstRx : undefined;
            resourceInputs["rateLimitBurstThresholdRx"] = args ? args.rateLimitBurstThresholdRx : undefined;
            resourceInputs["rateLimitBurstThresholdTx"] = args ? args.rateLimitBurstThresholdTx : undefined;
            resourceInputs["rateLimitBurstTimeRx"] = args ? args.rateLimitBurstTimeRx : undefined;
            resourceInputs["rateLimitBurstTimeTx"] = args ? args.rateLimitBurstTimeTx : undefined;
            resourceInputs["rateLimitBurstTx"] = args ? args.rateLimitBurstTx : undefined;
            resourceInputs["rateLimitMinRx"] = args ? args.rateLimitMinRx : undefined;
            resourceInputs["rateLimitMinTx"] = args ? args.rateLimitMinTx : undefined;
            resourceInputs["rateLimitPriority"] = args ? args.rateLimitPriority : undefined;
            resourceInputs["rateLimitRx"] = args ? args.rateLimitRx : undefined;
            resourceInputs["rateLimitTx"] = args ? args.rateLimitTx : undefined;
            resourceInputs["resetCountersInterval"] = args ? args.resetCountersInterval : undefined;
            resourceInputs["resetCountersStartTime"] = args ? args.resetCountersStartTime : undefined;
            resourceInputs["transferLimit"] = args ? args.transferLimit : undefined;
            resourceInputs["uploadLimit"] = args ? args.uploadLimit : undefined;
            resourceInputs["uptimeLimit"] = args ? args.uptimeLimit : undefined;
            resourceInputs["userManagerLimitationId"] = args ? args.userManagerLimitationId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserManagerLimitation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.UserManagerLimitation = UserManagerLimitation;
/** @internal */
UserManagerLimitation.__pulumiType = 'routeros:index/userManagerLimitation:UserManagerLimitation';
//# sourceMappingURL=userManagerLimitation.js.map