"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WifiCap = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class WifiCap extends pulumi.CustomResource {
    /**
     * Get an existing WifiCap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WifiCap(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WifiCap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WifiCap.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["capsManAddresses"] = state ? state.capsManAddresses : undefined;
            resourceInputs["capsManCertificateCommonNames"] = state ? state.capsManCertificateCommonNames : undefined;
            resourceInputs["capsManNames"] = state ? state.capsManNames : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["currentCapsManAddress"] = state ? state.currentCapsManAddress : undefined;
            resourceInputs["currentCapsManIdentity"] = state ? state.currentCapsManIdentity : undefined;
            resourceInputs["discoveryInterfaces"] = state ? state.discoveryInterfaces : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["lockToCapsMan"] = state ? state.lockToCapsMan : undefined;
            resourceInputs["lockedCapsManCommonName"] = state ? state.lockedCapsManCommonName : undefined;
            resourceInputs["requestedCertificate"] = state ? state.requestedCertificate : undefined;
            resourceInputs["slavesDatapath"] = state ? state.slavesDatapath : undefined;
            resourceInputs["slavesStatic"] = state ? state.slavesStatic : undefined;
            resourceInputs["wifiCapId"] = state ? state.wifiCapId : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["capsManAddresses"] = args ? args.capsManAddresses : undefined;
            resourceInputs["capsManCertificateCommonNames"] = args ? args.capsManCertificateCommonNames : undefined;
            resourceInputs["capsManNames"] = args ? args.capsManNames : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["discoveryInterfaces"] = args ? args.discoveryInterfaces : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["lockToCapsMan"] = args ? args.lockToCapsMan : undefined;
            resourceInputs["slavesDatapath"] = args ? args.slavesDatapath : undefined;
            resourceInputs["slavesStatic"] = args ? args.slavesStatic : undefined;
            resourceInputs["wifiCapId"] = args ? args.wifiCapId : undefined;
            resourceInputs["currentCapsManAddress"] = undefined /*out*/;
            resourceInputs["currentCapsManIdentity"] = undefined /*out*/;
            resourceInputs["lockedCapsManCommonName"] = undefined /*out*/;
            resourceInputs["requestedCertificate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WifiCap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.WifiCap = WifiCap;
/** @internal */
WifiCap.__pulumiType = 'routeros:index/wifiCap:WifiCap';
//# sourceMappingURL=wifiCap.js.map