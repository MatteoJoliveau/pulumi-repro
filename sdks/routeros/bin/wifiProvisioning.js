"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WifiProvisioning = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class WifiProvisioning extends pulumi.CustomResource {
    /**
     * Get an existing WifiProvisioning resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WifiProvisioning(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WifiProvisioning.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WifiProvisioning.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["addressRanges"] = state ? state.addressRanges : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["commonNameRegexp"] = state ? state.commonNameRegexp : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["identityRegexp"] = state ? state.identityRegexp : undefined;
            resourceInputs["masterConfiguration"] = state ? state.masterConfiguration : undefined;
            resourceInputs["nameFormat"] = state ? state.nameFormat : undefined;
            resourceInputs["radioMac"] = state ? state.radioMac : undefined;
            resourceInputs["slaveConfigurations"] = state ? state.slaveConfigurations : undefined;
            resourceInputs["slaveNameFormat"] = state ? state.slaveNameFormat : undefined;
            resourceInputs["supportedBands"] = state ? state.supportedBands : undefined;
            resourceInputs["wifiProvisioningId"] = state ? state.wifiProvisioningId : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["addressRanges"] = args ? args.addressRanges : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["commonNameRegexp"] = args ? args.commonNameRegexp : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["identityRegexp"] = args ? args.identityRegexp : undefined;
            resourceInputs["masterConfiguration"] = args ? args.masterConfiguration : undefined;
            resourceInputs["nameFormat"] = args ? args.nameFormat : undefined;
            resourceInputs["radioMac"] = args ? args.radioMac : undefined;
            resourceInputs["slaveConfigurations"] = args ? args.slaveConfigurations : undefined;
            resourceInputs["slaveNameFormat"] = args ? args.slaveNameFormat : undefined;
            resourceInputs["supportedBands"] = args ? args.supportedBands : undefined;
            resourceInputs["wifiProvisioningId"] = args ? args.wifiProvisioningId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WifiProvisioning.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.WifiProvisioning = WifiProvisioning;
/** @internal */
WifiProvisioning.__pulumiType = 'routeros:index/wifiProvisioning:WifiProvisioning';
//# sourceMappingURL=wifiProvisioning.js.map