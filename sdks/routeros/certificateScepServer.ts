// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CertificateScepServer extends pulumi.CustomResource {
    /**
     * Get an existing CertificateScepServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateScepServerState, opts?: pulumi.CustomResourceOptions): CertificateScepServer {
        return new CertificateScepServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/certificateScepServer:CertificateScepServer';

    /**
     * Returns true if the given object is an instance of CertificateScepServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CertificateScepServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateScepServer.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Name of the CA certificate to use.
     */
    public readonly caCert!: pulumi.Output<string>;
    public readonly certificateScepServerId!: pulumi.Output<string>;
    /**
     * The number of days to sign certificates for.
     */
    public readonly daysValid!: pulumi.Output<number | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the next CA certificate or `none`.
     */
    public readonly nextCaCert!: pulumi.Output<string | undefined>;
    /**
     * HTTP path starting with `/scep/`.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Request lifetime (5m minimum).
     */
    public readonly requestLifetime!: pulumi.Output<string | undefined>;

    /**
     * Create a CertificateScepServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateScepServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateScepServerArgs | CertificateScepServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateScepServerState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["caCert"] = state ? state.caCert : undefined;
            resourceInputs["certificateScepServerId"] = state ? state.certificateScepServerId : undefined;
            resourceInputs["daysValid"] = state ? state.daysValid : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["nextCaCert"] = state ? state.nextCaCert : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["requestLifetime"] = state ? state.requestLifetime : undefined;
        } else {
            const args = argsOrState as CertificateScepServerArgs | undefined;
            if ((!args || args.caCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caCert'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["caCert"] = args ? args.caCert : undefined;
            resourceInputs["certificateScepServerId"] = args ? args.certificateScepServerId : undefined;
            resourceInputs["daysValid"] = args ? args.daysValid : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["nextCaCert"] = args ? args.nextCaCert : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["requestLifetime"] = args ? args.requestLifetime : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificateScepServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CertificateScepServer resources.
 */
export interface CertificateScepServerState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Name of the CA certificate to use.
     */
    caCert?: pulumi.Input<string>;
    certificateScepServerId?: pulumi.Input<string>;
    /**
     * The number of days to sign certificates for.
     */
    daysValid?: pulumi.Input<number>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Name of the next CA certificate or `none`.
     */
    nextCaCert?: pulumi.Input<string>;
    /**
     * HTTP path starting with `/scep/`.
     */
    path?: pulumi.Input<string>;
    /**
     * Request lifetime (5m minimum).
     */
    requestLifetime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CertificateScepServer resource.
 */
export interface CertificateScepServerArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Name of the CA certificate to use.
     */
    caCert: pulumi.Input<string>;
    certificateScepServerId?: pulumi.Input<string>;
    /**
     * The number of days to sign certificates for.
     */
    daysValid?: pulumi.Input<number>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Name of the next CA certificate or `none`.
     */
    nextCaCert?: pulumi.Input<string>;
    /**
     * HTTP path starting with `/scep/`.
     */
    path: pulumi.Input<string>;
    /**
     * Request lifetime (5m minimum).
     */
    requestLifetime?: pulumi.Input<string>;
}
