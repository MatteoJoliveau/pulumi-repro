// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class File extends pulumi.CustomResource {
    /**
     * Get an existing File resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileState, opts?: pulumi.CustomResourceOptions): File {
        return new File(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/file:File';

    /**
     * Returns true if the given object is an instance of File.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is File {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === File.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * The actual content of the file
     */
    public readonly contents!: pulumi.Output<string | undefined>;
    /**
     * A time when the file was created
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    public readonly fileId!: pulumi.Output<string>;
    /**
     * A time when the file was modified
     */
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    /**
     * Name of the file
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Architecture that package is built for. Applies only to RouterOS ".npk" files
     */
    public /*out*/ readonly packageArchitecture!: pulumi.Output<string>;
    /**
     * A time when the package was built. Applies only to RouterOS ".npk" files
     */
    public /*out*/ readonly packageBuiltTime!: pulumi.Output<string>;
    /**
     * Name of the installable package. Applies only to RouterOS ".npk" files
     */
    public /*out*/ readonly packageName!: pulumi.Output<string>;
    /**
     * A version of the installable package. Applies only to RouterOS ".npk" files
     */
    public /*out*/ readonly packageVersion!: pulumi.Output<string>;
    /**
     * File size in bytes
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * Type of the file. For folders, the file type is the directory
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a File resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileArgs | FileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["contents"] = state ? state.contents : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["fileId"] = state ? state.fileId : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packageArchitecture"] = state ? state.packageArchitecture : undefined;
            resourceInputs["packageBuiltTime"] = state ? state.packageBuiltTime : undefined;
            resourceInputs["packageName"] = state ? state.packageName : undefined;
            resourceInputs["packageVersion"] = state ? state.packageVersion : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FileArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["contents"] = args ? args.contents : undefined;
            resourceInputs["fileId"] = args ? args.fileId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["packageArchitecture"] = undefined /*out*/;
            resourceInputs["packageBuiltTime"] = undefined /*out*/;
            resourceInputs["packageName"] = undefined /*out*/;
            resourceInputs["packageVersion"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(File.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering File resources.
 */
export interface FileState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * The actual content of the file
     */
    contents?: pulumi.Input<string>;
    /**
     * A time when the file was created
     */
    creationTime?: pulumi.Input<string>;
    fileId?: pulumi.Input<string>;
    /**
     * A time when the file was modified
     */
    lastModified?: pulumi.Input<string>;
    /**
     * Name of the file
     */
    name?: pulumi.Input<string>;
    /**
     * Architecture that package is built for. Applies only to RouterOS ".npk" files
     */
    packageArchitecture?: pulumi.Input<string>;
    /**
     * A time when the package was built. Applies only to RouterOS ".npk" files
     */
    packageBuiltTime?: pulumi.Input<string>;
    /**
     * Name of the installable package. Applies only to RouterOS ".npk" files
     */
    packageName?: pulumi.Input<string>;
    /**
     * A version of the installable package. Applies only to RouterOS ".npk" files
     */
    packageVersion?: pulumi.Input<string>;
    /**
     * File size in bytes
     */
    size?: pulumi.Input<number>;
    /**
     * Type of the file. For folders, the file type is the directory
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a File resource.
 */
export interface FileArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * The actual content of the file
     */
    contents?: pulumi.Input<string>;
    fileId?: pulumi.Input<string>;
    /**
     * Name of the file
     */
    name?: pulumi.Input<string>;
}
