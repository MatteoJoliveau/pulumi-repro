// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getWifiEasyConnect(args: GetWifiEasyConnectArgs, opts?: pulumi.InvokeOptions): Promise<GetWifiEasyConnectResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("routeros:index/getWifiEasyConnect:getWifiEasyConnect", {
        "eapAnonymous": args.eapAnonymous,
        "eapIdentity": args.eapIdentity,
        "eapMethod": args.eapMethod,
        "eapPhase2": args.eapPhase2,
        "hidden": args.hidden,
        "id": args.id,
        "password": args.password,
        "ssid": args.ssid,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWifiEasyConnect.
 */
export interface GetWifiEasyConnectArgs {
    eapAnonymous?: boolean;
    eapIdentity?: string;
    eapMethod?: string;
    eapPhase2?: string;
    hidden?: boolean;
    id?: string;
    password: string;
    ssid: string;
    type?: string;
}

/**
 * A collection of values returned by getWifiEasyConnect.
 */
export interface GetWifiEasyConnectResult {
    readonly eapAnonymous?: boolean;
    readonly eapIdentity?: string;
    readonly eapMethod?: string;
    readonly eapPhase2?: string;
    readonly hidden?: boolean;
    readonly id: string;
    readonly password: string;
    readonly qrCode: string;
    readonly ssid: string;
    readonly type?: string;
}
export function getWifiEasyConnectOutput(args: GetWifiEasyConnectOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetWifiEasyConnectResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("routeros:index/getWifiEasyConnect:getWifiEasyConnect", {
        "eapAnonymous": args.eapAnonymous,
        "eapIdentity": args.eapIdentity,
        "eapMethod": args.eapMethod,
        "eapPhase2": args.eapPhase2,
        "hidden": args.hidden,
        "id": args.id,
        "password": args.password,
        "ssid": args.ssid,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getWifiEasyConnect.
 */
export interface GetWifiEasyConnectOutputArgs {
    eapAnonymous?: pulumi.Input<boolean>;
    eapIdentity?: pulumi.Input<string>;
    eapMethod?: pulumi.Input<string>;
    eapPhase2?: pulumi.Input<string>;
    hidden?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    ssid: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
