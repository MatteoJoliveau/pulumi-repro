// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BridgeArgs, BridgeState } from "./bridge";
export type Bridge = import("./bridge").Bridge;
export const Bridge: typeof import("./bridge").Bridge = null as any;
utilities.lazyLoad(exports, ["Bridge"], () => require("./bridge"));

export { BridgeMlagArgs, BridgeMlagState } from "./bridgeMlag";
export type BridgeMlag = import("./bridgeMlag").BridgeMlag;
export const BridgeMlag: typeof import("./bridgeMlag").BridgeMlag = null as any;
utilities.lazyLoad(exports, ["BridgeMlag"], () => require("./bridgeMlag"));

export { BridgePortArgs, BridgePortState } from "./bridgePort";
export type BridgePort = import("./bridgePort").BridgePort;
export const BridgePort: typeof import("./bridgePort").BridgePort = null as any;
utilities.lazyLoad(exports, ["BridgePort"], () => require("./bridgePort"));

export { BridgeVlanArgs, BridgeVlanState } from "./bridgeVlan";
export type BridgeVlan = import("./bridgeVlan").BridgeVlan;
export const BridgeVlan: typeof import("./bridgeVlan").BridgeVlan = null as any;
utilities.lazyLoad(exports, ["BridgeVlan"], () => require("./bridgeVlan"));

export { CapsmanAaaArgs, CapsmanAaaState } from "./capsmanAaa";
export type CapsmanAaa = import("./capsmanAaa").CapsmanAaa;
export const CapsmanAaa: typeof import("./capsmanAaa").CapsmanAaa = null as any;
utilities.lazyLoad(exports, ["CapsmanAaa"], () => require("./capsmanAaa"));

export { CapsmanAccessListArgs, CapsmanAccessListState } from "./capsmanAccessList";
export type CapsmanAccessList = import("./capsmanAccessList").CapsmanAccessList;
export const CapsmanAccessList: typeof import("./capsmanAccessList").CapsmanAccessList = null as any;
utilities.lazyLoad(exports, ["CapsmanAccessList"], () => require("./capsmanAccessList"));

export { CapsmanChannelArgs, CapsmanChannelState } from "./capsmanChannel";
export type CapsmanChannel = import("./capsmanChannel").CapsmanChannel;
export const CapsmanChannel: typeof import("./capsmanChannel").CapsmanChannel = null as any;
utilities.lazyLoad(exports, ["CapsmanChannel"], () => require("./capsmanChannel"));

export { CapsmanConfigurationArgs, CapsmanConfigurationState } from "./capsmanConfiguration";
export type CapsmanConfiguration = import("./capsmanConfiguration").CapsmanConfiguration;
export const CapsmanConfiguration: typeof import("./capsmanConfiguration").CapsmanConfiguration = null as any;
utilities.lazyLoad(exports, ["CapsmanConfiguration"], () => require("./capsmanConfiguration"));

export { CapsmanDatapathArgs, CapsmanDatapathState } from "./capsmanDatapath";
export type CapsmanDatapath = import("./capsmanDatapath").CapsmanDatapath;
export const CapsmanDatapath: typeof import("./capsmanDatapath").CapsmanDatapath = null as any;
utilities.lazyLoad(exports, ["CapsmanDatapath"], () => require("./capsmanDatapath"));

export { CapsmanInterfaceArgs, CapsmanInterfaceState } from "./capsmanInterface";
export type CapsmanInterface = import("./capsmanInterface").CapsmanInterface;
export const CapsmanInterface: typeof import("./capsmanInterface").CapsmanInterface = null as any;
utilities.lazyLoad(exports, ["CapsmanInterface"], () => require("./capsmanInterface"));

export { CapsmanManagerArgs, CapsmanManagerState } from "./capsmanManager";
export type CapsmanManager = import("./capsmanManager").CapsmanManager;
export const CapsmanManager: typeof import("./capsmanManager").CapsmanManager = null as any;
utilities.lazyLoad(exports, ["CapsmanManager"], () => require("./capsmanManager"));

export { CapsmanManagerInterfaceArgs, CapsmanManagerInterfaceState } from "./capsmanManagerInterface";
export type CapsmanManagerInterface = import("./capsmanManagerInterface").CapsmanManagerInterface;
export const CapsmanManagerInterface: typeof import("./capsmanManagerInterface").CapsmanManagerInterface = null as any;
utilities.lazyLoad(exports, ["CapsmanManagerInterface"], () => require("./capsmanManagerInterface"));

export { CapsmanProvisioningArgs, CapsmanProvisioningState } from "./capsmanProvisioning";
export type CapsmanProvisioning = import("./capsmanProvisioning").CapsmanProvisioning;
export const CapsmanProvisioning: typeof import("./capsmanProvisioning").CapsmanProvisioning = null as any;
utilities.lazyLoad(exports, ["CapsmanProvisioning"], () => require("./capsmanProvisioning"));

export { CapsmanRatesArgs, CapsmanRatesState } from "./capsmanRates";
export type CapsmanRates = import("./capsmanRates").CapsmanRates;
export const CapsmanRates: typeof import("./capsmanRates").CapsmanRates = null as any;
utilities.lazyLoad(exports, ["CapsmanRates"], () => require("./capsmanRates"));

export { CapsmanSecurityArgs, CapsmanSecurityState } from "./capsmanSecurity";
export type CapsmanSecurity = import("./capsmanSecurity").CapsmanSecurity;
export const CapsmanSecurity: typeof import("./capsmanSecurity").CapsmanSecurity = null as any;
utilities.lazyLoad(exports, ["CapsmanSecurity"], () => require("./capsmanSecurity"));

export { CertificateScepServerArgs, CertificateScepServerState } from "./certificateScepServer";
export type CertificateScepServer = import("./certificateScepServer").CertificateScepServer;
export const CertificateScepServer: typeof import("./certificateScepServer").CertificateScepServer = null as any;
utilities.lazyLoad(exports, ["CertificateScepServer"], () => require("./certificateScepServer"));

export { ContainerArgs, ContainerState } from "./container";
export type Container = import("./container").Container;
export const Container: typeof import("./container").Container = null as any;
utilities.lazyLoad(exports, ["Container"], () => require("./container"));

export { ContainerConfigArgs, ContainerConfigState } from "./containerConfig";
export type ContainerConfig = import("./containerConfig").ContainerConfig;
export const ContainerConfig: typeof import("./containerConfig").ContainerConfig = null as any;
utilities.lazyLoad(exports, ["ContainerConfig"], () => require("./containerConfig"));

export { ContainerEnvsArgs, ContainerEnvsState } from "./containerEnvs";
export type ContainerEnvs = import("./containerEnvs").ContainerEnvs;
export const ContainerEnvs: typeof import("./containerEnvs").ContainerEnvs = null as any;
utilities.lazyLoad(exports, ["ContainerEnvs"], () => require("./containerEnvs"));

export { ContainerMountsArgs, ContainerMountsState } from "./containerMounts";
export type ContainerMounts = import("./containerMounts").ContainerMounts;
export const ContainerMounts: typeof import("./containerMounts").ContainerMounts = null as any;
utilities.lazyLoad(exports, ["ContainerMounts"], () => require("./containerMounts"));

export { DhcpClientArgs, DhcpClientState } from "./dhcpClient";
export type DhcpClient = import("./dhcpClient").DhcpClient;
export const DhcpClient: typeof import("./dhcpClient").DhcpClient = null as any;
utilities.lazyLoad(exports, ["DhcpClient"], () => require("./dhcpClient"));

export { DhcpClientOptionArgs, DhcpClientOptionState } from "./dhcpClientOption";
export type DhcpClientOption = import("./dhcpClientOption").DhcpClientOption;
export const DhcpClientOption: typeof import("./dhcpClientOption").DhcpClientOption = null as any;
utilities.lazyLoad(exports, ["DhcpClientOption"], () => require("./dhcpClientOption"));

export { DhcpServerArgs, DhcpServerState } from "./dhcpServer";
export type DhcpServer = import("./dhcpServer").DhcpServer;
export const DhcpServer: typeof import("./dhcpServer").DhcpServer = null as any;
utilities.lazyLoad(exports, ["DhcpServer"], () => require("./dhcpServer"));

export { DhcpServerLeaseArgs, DhcpServerLeaseState } from "./dhcpServerLease";
export type DhcpServerLease = import("./dhcpServerLease").DhcpServerLease;
export const DhcpServerLease: typeof import("./dhcpServerLease").DhcpServerLease = null as any;
utilities.lazyLoad(exports, ["DhcpServerLease"], () => require("./dhcpServerLease"));

export { DhcpServerNetworkArgs, DhcpServerNetworkState } from "./dhcpServerNetwork";
export type DhcpServerNetwork = import("./dhcpServerNetwork").DhcpServerNetwork;
export const DhcpServerNetwork: typeof import("./dhcpServerNetwork").DhcpServerNetwork = null as any;
utilities.lazyLoad(exports, ["DhcpServerNetwork"], () => require("./dhcpServerNetwork"));

export { DnsArgs, DnsState } from "./dns";
export type Dns = import("./dns").Dns;
export const Dns: typeof import("./dns").Dns = null as any;
utilities.lazyLoad(exports, ["Dns"], () => require("./dns"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { FirewallAddrListArgs, FirewallAddrListState } from "./firewallAddrList";
export type FirewallAddrList = import("./firewallAddrList").FirewallAddrList;
export const FirewallAddrList: typeof import("./firewallAddrList").FirewallAddrList = null as any;
utilities.lazyLoad(exports, ["FirewallAddrList"], () => require("./firewallAddrList"));

export { FirewallFilterArgs, FirewallFilterState } from "./firewallFilter";
export type FirewallFilter = import("./firewallFilter").FirewallFilter;
export const FirewallFilter: typeof import("./firewallFilter").FirewallFilter = null as any;
utilities.lazyLoad(exports, ["FirewallFilter"], () => require("./firewallFilter"));

export { FirewallMangleArgs, FirewallMangleState } from "./firewallMangle";
export type FirewallMangle = import("./firewallMangle").FirewallMangle;
export const FirewallMangle: typeof import("./firewallMangle").FirewallMangle = null as any;
utilities.lazyLoad(exports, ["FirewallMangle"], () => require("./firewallMangle"));

export { FirewallNatArgs, FirewallNatState } from "./firewallNat";
export type FirewallNat = import("./firewallNat").FirewallNat;
export const FirewallNat: typeof import("./firewallNat").FirewallNat = null as any;
utilities.lazyLoad(exports, ["FirewallNat"], () => require("./firewallNat"));

export { GetFilesArgs, GetFilesResult, GetFilesOutputArgs } from "./getFiles";
export const getFiles: typeof import("./getFiles").getFiles = null as any;
export const getFilesOutput: typeof import("./getFiles").getFilesOutput = null as any;
utilities.lazyLoad(exports, ["getFiles","getFilesOutput"], () => require("./getFiles"));

export { GetFirewallArgs, GetFirewallResult, GetFirewallOutputArgs } from "./getFirewall";
export const getFirewall: typeof import("./getFirewall").getFirewall = null as any;
export const getFirewallOutput: typeof import("./getFirewall").getFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getFirewall","getFirewallOutput"], () => require("./getFirewall"));

export { GetInterfacesArgs, GetInterfacesResult, GetInterfacesOutputArgs } from "./getInterfaces";
export const getInterfaces: typeof import("./getInterfaces").getInterfaces = null as any;
export const getInterfacesOutput: typeof import("./getInterfaces").getInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaces","getInterfacesOutput"], () => require("./getInterfaces"));

export { GetIpAddressesArgs, GetIpAddressesResult, GetIpAddressesOutputArgs } from "./getIpAddresses";
export const getIpAddresses: typeof import("./getIpAddresses").getIpAddresses = null as any;
export const getIpAddressesOutput: typeof import("./getIpAddresses").getIpAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getIpAddresses","getIpAddressesOutput"], () => require("./getIpAddresses"));

export { GetIpArpArgs, GetIpArpResult, GetIpArpOutputArgs } from "./getIpArp";
export const getIpArp: typeof import("./getIpArp").getIpArp = null as any;
export const getIpArpOutput: typeof import("./getIpArp").getIpArpOutput = null as any;
utilities.lazyLoad(exports, ["getIpArp","getIpArpOutput"], () => require("./getIpArp"));

export { GetIpDhcpServerLeasesArgs, GetIpDhcpServerLeasesResult, GetIpDhcpServerLeasesOutputArgs } from "./getIpDhcpServerLeases";
export const getIpDhcpServerLeases: typeof import("./getIpDhcpServerLeases").getIpDhcpServerLeases = null as any;
export const getIpDhcpServerLeasesOutput: typeof import("./getIpDhcpServerLeases").getIpDhcpServerLeasesOutput = null as any;
utilities.lazyLoad(exports, ["getIpDhcpServerLeases","getIpDhcpServerLeasesOutput"], () => require("./getIpDhcpServerLeases"));

export { GetIpFirewallArgs, GetIpFirewallResult, GetIpFirewallOutputArgs } from "./getIpFirewall";
export const getIpFirewall: typeof import("./getIpFirewall").getIpFirewall = null as any;
export const getIpFirewallOutput: typeof import("./getIpFirewall").getIpFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getIpFirewall","getIpFirewallOutput"], () => require("./getIpFirewall"));

export { GetIpRoutesArgs, GetIpRoutesResult, GetIpRoutesOutputArgs } from "./getIpRoutes";
export const getIpRoutes: typeof import("./getIpRoutes").getIpRoutes = null as any;
export const getIpRoutesOutput: typeof import("./getIpRoutes").getIpRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getIpRoutes","getIpRoutesOutput"], () => require("./getIpRoutes"));

export { GetIpServicesArgs, GetIpServicesResult, GetIpServicesOutputArgs } from "./getIpServices";
export const getIpServices: typeof import("./getIpServices").getIpServices = null as any;
export const getIpServicesOutput: typeof import("./getIpServices").getIpServicesOutput = null as any;
utilities.lazyLoad(exports, ["getIpServices","getIpServicesOutput"], () => require("./getIpServices"));

export { GetIpv6AddressesArgs, GetIpv6AddressesResult, GetIpv6AddressesOutputArgs } from "./getIpv6Addresses";
export const getIpv6Addresses: typeof import("./getIpv6Addresses").getIpv6Addresses = null as any;
export const getIpv6AddressesOutput: typeof import("./getIpv6Addresses").getIpv6AddressesOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6Addresses","getIpv6AddressesOutput"], () => require("./getIpv6Addresses"));

export { GetIpv6FirewallArgs, GetIpv6FirewallResult, GetIpv6FirewallOutputArgs } from "./getIpv6Firewall";
export const getIpv6Firewall: typeof import("./getIpv6Firewall").getIpv6Firewall = null as any;
export const getIpv6FirewallOutput: typeof import("./getIpv6Firewall").getIpv6FirewallOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6Firewall","getIpv6FirewallOutput"], () => require("./getIpv6Firewall"));

export { GetSystemResourceArgs, GetSystemResourceResult, GetSystemResourceOutputArgs } from "./getSystemResource";
export const getSystemResource: typeof import("./getSystemResource").getSystemResource = null as any;
export const getSystemResourceOutput: typeof import("./getSystemResource").getSystemResourceOutput = null as any;
utilities.lazyLoad(exports, ["getSystemResource","getSystemResourceOutput"], () => require("./getSystemResource"));

export { GetSystemRouterboardArgs, GetSystemRouterboardResult, GetSystemRouterboardOutputArgs } from "./getSystemRouterboard";
export const getSystemRouterboard: typeof import("./getSystemRouterboard").getSystemRouterboard = null as any;
export const getSystemRouterboardOutput: typeof import("./getSystemRouterboard").getSystemRouterboardOutput = null as any;
utilities.lazyLoad(exports, ["getSystemRouterboard","getSystemRouterboardOutput"], () => require("./getSystemRouterboard"));

export { GetWifiEasyConnectArgs, GetWifiEasyConnectResult, GetWifiEasyConnectOutputArgs } from "./getWifiEasyConnect";
export const getWifiEasyConnect: typeof import("./getWifiEasyConnect").getWifiEasyConnect = null as any;
export const getWifiEasyConnectOutput: typeof import("./getWifiEasyConnect").getWifiEasyConnectOutput = null as any;
utilities.lazyLoad(exports, ["getWifiEasyConnect","getWifiEasyConnectOutput"], () => require("./getWifiEasyConnect"));

export { GetX509Args, GetX509Result, GetX509OutputArgs } from "./getX509";
export const getX509: typeof import("./getX509").getX509 = null as any;
export const getX509Output: typeof import("./getX509").getX509Output = null as any;
utilities.lazyLoad(exports, ["getX509","getX509Output"], () => require("./getX509"));

export { GreArgs, GreState } from "./gre";
export type Gre = import("./gre").Gre;
export const Gre: typeof import("./gre").Gre = null as any;
utilities.lazyLoad(exports, ["Gre"], () => require("./gre"));

export { IdentityArgs, IdentityState } from "./identity";
export type Identity = import("./identity").Identity;
export const Identity: typeof import("./identity").Identity = null as any;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));

export { Interface6to4Args, Interface6to4State } from "./interface6to4";
export type Interface6to4 = import("./interface6to4").Interface6to4;
export const Interface6to4: typeof import("./interface6to4").Interface6to4 = null as any;
utilities.lazyLoad(exports, ["Interface6to4"], () => require("./interface6to4"));

export { InterfaceBondingArgs, InterfaceBondingState } from "./interfaceBonding";
export type InterfaceBonding = import("./interfaceBonding").InterfaceBonding;
export const InterfaceBonding: typeof import("./interfaceBonding").InterfaceBonding = null as any;
utilities.lazyLoad(exports, ["InterfaceBonding"], () => require("./interfaceBonding"));

export { InterfaceBridgeArgs, InterfaceBridgeState } from "./interfaceBridge";
export type InterfaceBridge = import("./interfaceBridge").InterfaceBridge;
export const InterfaceBridge: typeof import("./interfaceBridge").InterfaceBridge = null as any;
utilities.lazyLoad(exports, ["InterfaceBridge"], () => require("./interfaceBridge"));

export { InterfaceBridgePortArgs, InterfaceBridgePortState } from "./interfaceBridgePort";
export type InterfaceBridgePort = import("./interfaceBridgePort").InterfaceBridgePort;
export const InterfaceBridgePort: typeof import("./interfaceBridgePort").InterfaceBridgePort = null as any;
utilities.lazyLoad(exports, ["InterfaceBridgePort"], () => require("./interfaceBridgePort"));

export { InterfaceBridgeSettingsArgs, InterfaceBridgeSettingsState } from "./interfaceBridgeSettings";
export type InterfaceBridgeSettings = import("./interfaceBridgeSettings").InterfaceBridgeSettings;
export const InterfaceBridgeSettings: typeof import("./interfaceBridgeSettings").InterfaceBridgeSettings = null as any;
utilities.lazyLoad(exports, ["InterfaceBridgeSettings"], () => require("./interfaceBridgeSettings"));

export { InterfaceBridgeVlanArgs, InterfaceBridgeVlanState } from "./interfaceBridgeVlan";
export type InterfaceBridgeVlan = import("./interfaceBridgeVlan").InterfaceBridgeVlan;
export const InterfaceBridgeVlan: typeof import("./interfaceBridgeVlan").InterfaceBridgeVlan = null as any;
utilities.lazyLoad(exports, ["InterfaceBridgeVlan"], () => require("./interfaceBridgeVlan"));

export { InterfaceDot1xClientArgs, InterfaceDot1xClientState } from "./interfaceDot1xClient";
export type InterfaceDot1xClient = import("./interfaceDot1xClient").InterfaceDot1xClient;
export const InterfaceDot1xClient: typeof import("./interfaceDot1xClient").InterfaceDot1xClient = null as any;
utilities.lazyLoad(exports, ["InterfaceDot1xClient"], () => require("./interfaceDot1xClient"));

export { InterfaceDot1xServerArgs, InterfaceDot1xServerState } from "./interfaceDot1xServer";
export type InterfaceDot1xServer = import("./interfaceDot1xServer").InterfaceDot1xServer;
export const InterfaceDot1xServer: typeof import("./interfaceDot1xServer").InterfaceDot1xServer = null as any;
utilities.lazyLoad(exports, ["InterfaceDot1xServer"], () => require("./interfaceDot1xServer"));

export { InterfaceEoipArgs, InterfaceEoipState } from "./interfaceEoip";
export type InterfaceEoip = import("./interfaceEoip").InterfaceEoip;
export const InterfaceEoip: typeof import("./interfaceEoip").InterfaceEoip = null as any;
utilities.lazyLoad(exports, ["InterfaceEoip"], () => require("./interfaceEoip"));

export { InterfaceEthernetArgs, InterfaceEthernetState } from "./interfaceEthernet";
export type InterfaceEthernet = import("./interfaceEthernet").InterfaceEthernet;
export const InterfaceEthernet: typeof import("./interfaceEthernet").InterfaceEthernet = null as any;
utilities.lazyLoad(exports, ["InterfaceEthernet"], () => require("./interfaceEthernet"));

export { InterfaceEthernetSwitchArgs, InterfaceEthernetSwitchState } from "./interfaceEthernetSwitch";
export type InterfaceEthernetSwitch = import("./interfaceEthernetSwitch").InterfaceEthernetSwitch;
export const InterfaceEthernetSwitch: typeof import("./interfaceEthernetSwitch").InterfaceEthernetSwitch = null as any;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitch"], () => require("./interfaceEthernetSwitch"));

export { InterfaceEthernetSwitchHostArgs, InterfaceEthernetSwitchHostState } from "./interfaceEthernetSwitchHost";
export type InterfaceEthernetSwitchHost = import("./interfaceEthernetSwitchHost").InterfaceEthernetSwitchHost;
export const InterfaceEthernetSwitchHost: typeof import("./interfaceEthernetSwitchHost").InterfaceEthernetSwitchHost = null as any;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitchHost"], () => require("./interfaceEthernetSwitchHost"));

export { InterfaceEthernetSwitchPortArgs, InterfaceEthernetSwitchPortState } from "./interfaceEthernetSwitchPort";
export type InterfaceEthernetSwitchPort = import("./interfaceEthernetSwitchPort").InterfaceEthernetSwitchPort;
export const InterfaceEthernetSwitchPort: typeof import("./interfaceEthernetSwitchPort").InterfaceEthernetSwitchPort = null as any;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitchPort"], () => require("./interfaceEthernetSwitchPort"));

export { InterfaceEthernetSwitchPortIsolationArgs, InterfaceEthernetSwitchPortIsolationState } from "./interfaceEthernetSwitchPortIsolation";
export type InterfaceEthernetSwitchPortIsolation = import("./interfaceEthernetSwitchPortIsolation").InterfaceEthernetSwitchPortIsolation;
export const InterfaceEthernetSwitchPortIsolation: typeof import("./interfaceEthernetSwitchPortIsolation").InterfaceEthernetSwitchPortIsolation = null as any;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitchPortIsolation"], () => require("./interfaceEthernetSwitchPortIsolation"));

export { InterfaceEthernetSwitchRuleArgs, InterfaceEthernetSwitchRuleState } from "./interfaceEthernetSwitchRule";
export type InterfaceEthernetSwitchRule = import("./interfaceEthernetSwitchRule").InterfaceEthernetSwitchRule;
export const InterfaceEthernetSwitchRule: typeof import("./interfaceEthernetSwitchRule").InterfaceEthernetSwitchRule = null as any;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitchRule"], () => require("./interfaceEthernetSwitchRule"));

export { InterfaceEthernetSwitchVlanArgs, InterfaceEthernetSwitchVlanState } from "./interfaceEthernetSwitchVlan";
export type InterfaceEthernetSwitchVlan = import("./interfaceEthernetSwitchVlan").InterfaceEthernetSwitchVlan;
export const InterfaceEthernetSwitchVlan: typeof import("./interfaceEthernetSwitchVlan").InterfaceEthernetSwitchVlan = null as any;
utilities.lazyLoad(exports, ["InterfaceEthernetSwitchVlan"], () => require("./interfaceEthernetSwitchVlan"));

export { InterfaceGreArgs, InterfaceGreState } from "./interfaceGre";
export type InterfaceGre = import("./interfaceGre").InterfaceGre;
export const InterfaceGre: typeof import("./interfaceGre").InterfaceGre = null as any;
utilities.lazyLoad(exports, ["InterfaceGre"], () => require("./interfaceGre"));

export { InterfaceIpipArgs, InterfaceIpipState } from "./interfaceIpip";
export type InterfaceIpip = import("./interfaceIpip").InterfaceIpip;
export const InterfaceIpip: typeof import("./interfaceIpip").InterfaceIpip = null as any;
utilities.lazyLoad(exports, ["InterfaceIpip"], () => require("./interfaceIpip"));

export { InterfaceListArgs, InterfaceListState } from "./interfaceList";
export type InterfaceList = import("./interfaceList").InterfaceList;
export const InterfaceList: typeof import("./interfaceList").InterfaceList = null as any;
utilities.lazyLoad(exports, ["InterfaceList"], () => require("./interfaceList"));

export { InterfaceListMemberArgs, InterfaceListMemberState } from "./interfaceListMember";
export type InterfaceListMember = import("./interfaceListMember").InterfaceListMember;
export const InterfaceListMember: typeof import("./interfaceListMember").InterfaceListMember = null as any;
utilities.lazyLoad(exports, ["InterfaceListMember"], () => require("./interfaceListMember"));

export { InterfaceLteArgs, InterfaceLteState } from "./interfaceLte";
export type InterfaceLte = import("./interfaceLte").InterfaceLte;
export const InterfaceLte: typeof import("./interfaceLte").InterfaceLte = null as any;
utilities.lazyLoad(exports, ["InterfaceLte"], () => require("./interfaceLte"));

export { InterfaceLteApnArgs, InterfaceLteApnState } from "./interfaceLteApn";
export type InterfaceLteApn = import("./interfaceLteApn").InterfaceLteApn;
export const InterfaceLteApn: typeof import("./interfaceLteApn").InterfaceLteApn = null as any;
utilities.lazyLoad(exports, ["InterfaceLteApn"], () => require("./interfaceLteApn"));

export { InterfaceMacvlanArgs, InterfaceMacvlanState } from "./interfaceMacvlan";
export type InterfaceMacvlan = import("./interfaceMacvlan").InterfaceMacvlan;
export const InterfaceMacvlan: typeof import("./interfaceMacvlan").InterfaceMacvlan = null as any;
utilities.lazyLoad(exports, ["InterfaceMacvlan"], () => require("./interfaceMacvlan"));

export { InterfaceOvpnClientArgs, InterfaceOvpnClientState } from "./interfaceOvpnClient";
export type InterfaceOvpnClient = import("./interfaceOvpnClient").InterfaceOvpnClient;
export const InterfaceOvpnClient: typeof import("./interfaceOvpnClient").InterfaceOvpnClient = null as any;
utilities.lazyLoad(exports, ["InterfaceOvpnClient"], () => require("./interfaceOvpnClient"));

export { InterfaceOvpnServerArgs, InterfaceOvpnServerState } from "./interfaceOvpnServer";
export type InterfaceOvpnServer = import("./interfaceOvpnServer").InterfaceOvpnServer;
export const InterfaceOvpnServer: typeof import("./interfaceOvpnServer").InterfaceOvpnServer = null as any;
utilities.lazyLoad(exports, ["InterfaceOvpnServer"], () => require("./interfaceOvpnServer"));

export { InterfacePppoeClientArgs, InterfacePppoeClientState } from "./interfacePppoeClient";
export type InterfacePppoeClient = import("./interfacePppoeClient").InterfacePppoeClient;
export const InterfacePppoeClient: typeof import("./interfacePppoeClient").InterfacePppoeClient = null as any;
utilities.lazyLoad(exports, ["InterfacePppoeClient"], () => require("./interfacePppoeClient"));

export { InterfaceVethArgs, InterfaceVethState } from "./interfaceVeth";
export type InterfaceVeth = import("./interfaceVeth").InterfaceVeth;
export const InterfaceVeth: typeof import("./interfaceVeth").InterfaceVeth = null as any;
utilities.lazyLoad(exports, ["InterfaceVeth"], () => require("./interfaceVeth"));

export { InterfaceVlanArgs, InterfaceVlanState } from "./interfaceVlan";
export type InterfaceVlan = import("./interfaceVlan").InterfaceVlan;
export const InterfaceVlan: typeof import("./interfaceVlan").InterfaceVlan = null as any;
utilities.lazyLoad(exports, ["InterfaceVlan"], () => require("./interfaceVlan"));

export { InterfaceVrrpArgs, InterfaceVrrpState } from "./interfaceVrrp";
export type InterfaceVrrp = import("./interfaceVrrp").InterfaceVrrp;
export const InterfaceVrrp: typeof import("./interfaceVrrp").InterfaceVrrp = null as any;
utilities.lazyLoad(exports, ["InterfaceVrrp"], () => require("./interfaceVrrp"));

export { InterfaceVxlanArgs, InterfaceVxlanState } from "./interfaceVxlan";
export type InterfaceVxlan = import("./interfaceVxlan").InterfaceVxlan;
export const InterfaceVxlan: typeof import("./interfaceVxlan").InterfaceVxlan = null as any;
utilities.lazyLoad(exports, ["InterfaceVxlan"], () => require("./interfaceVxlan"));

export { InterfaceVxlanVtepsArgs, InterfaceVxlanVtepsState } from "./interfaceVxlanVteps";
export type InterfaceVxlanVteps = import("./interfaceVxlanVteps").InterfaceVxlanVteps;
export const InterfaceVxlanVteps: typeof import("./interfaceVxlanVteps").InterfaceVxlanVteps = null as any;
utilities.lazyLoad(exports, ["InterfaceVxlanVteps"], () => require("./interfaceVxlanVteps"));

export { InterfaceWireguardArgs, InterfaceWireguardState } from "./interfaceWireguard";
export type InterfaceWireguard = import("./interfaceWireguard").InterfaceWireguard;
export const InterfaceWireguard: typeof import("./interfaceWireguard").InterfaceWireguard = null as any;
utilities.lazyLoad(exports, ["InterfaceWireguard"], () => require("./interfaceWireguard"));

export { InterfaceWireguardPeerArgs, InterfaceWireguardPeerState } from "./interfaceWireguardPeer";
export type InterfaceWireguardPeer = import("./interfaceWireguardPeer").InterfaceWireguardPeer;
export const InterfaceWireguardPeer: typeof import("./interfaceWireguardPeer").InterfaceWireguardPeer = null as any;
utilities.lazyLoad(exports, ["InterfaceWireguardPeer"], () => require("./interfaceWireguardPeer"));

export { InterfaceWirelessArgs, InterfaceWirelessState } from "./interfaceWireless";
export type InterfaceWireless = import("./interfaceWireless").InterfaceWireless;
export const InterfaceWireless: typeof import("./interfaceWireless").InterfaceWireless = null as any;
utilities.lazyLoad(exports, ["InterfaceWireless"], () => require("./interfaceWireless"));

export { InterfaceWirelessAccessListArgs, InterfaceWirelessAccessListState } from "./interfaceWirelessAccessList";
export type InterfaceWirelessAccessList = import("./interfaceWirelessAccessList").InterfaceWirelessAccessList;
export const InterfaceWirelessAccessList: typeof import("./interfaceWirelessAccessList").InterfaceWirelessAccessList = null as any;
utilities.lazyLoad(exports, ["InterfaceWirelessAccessList"], () => require("./interfaceWirelessAccessList"));

export { InterfaceWirelessCapArgs, InterfaceWirelessCapState } from "./interfaceWirelessCap";
export type InterfaceWirelessCap = import("./interfaceWirelessCap").InterfaceWirelessCap;
export const InterfaceWirelessCap: typeof import("./interfaceWirelessCap").InterfaceWirelessCap = null as any;
utilities.lazyLoad(exports, ["InterfaceWirelessCap"], () => require("./interfaceWirelessCap"));

export { InterfaceWirelessConnectListArgs, InterfaceWirelessConnectListState } from "./interfaceWirelessConnectList";
export type InterfaceWirelessConnectList = import("./interfaceWirelessConnectList").InterfaceWirelessConnectList;
export const InterfaceWirelessConnectList: typeof import("./interfaceWirelessConnectList").InterfaceWirelessConnectList = null as any;
utilities.lazyLoad(exports, ["InterfaceWirelessConnectList"], () => require("./interfaceWirelessConnectList"));

export { InterfaceWirelessSecurityProfilesArgs, InterfaceWirelessSecurityProfilesState } from "./interfaceWirelessSecurityProfiles";
export type InterfaceWirelessSecurityProfiles = import("./interfaceWirelessSecurityProfiles").InterfaceWirelessSecurityProfiles;
export const InterfaceWirelessSecurityProfiles: typeof import("./interfaceWirelessSecurityProfiles").InterfaceWirelessSecurityProfiles = null as any;
utilities.lazyLoad(exports, ["InterfaceWirelessSecurityProfiles"], () => require("./interfaceWirelessSecurityProfiles"));

export { IpAddressArgs, IpAddressState } from "./ipAddress";
export type IpAddress = import("./ipAddress").IpAddress;
export const IpAddress: typeof import("./ipAddress").IpAddress = null as any;
utilities.lazyLoad(exports, ["IpAddress"], () => require("./ipAddress"));

export { IpCloudArgs, IpCloudState } from "./ipCloud";
export type IpCloud = import("./ipCloud").IpCloud;
export const IpCloud: typeof import("./ipCloud").IpCloud = null as any;
utilities.lazyLoad(exports, ["IpCloud"], () => require("./ipCloud"));

export { IpCloudAdvancedArgs, IpCloudAdvancedState } from "./ipCloudAdvanced";
export type IpCloudAdvanced = import("./ipCloudAdvanced").IpCloudAdvanced;
export const IpCloudAdvanced: typeof import("./ipCloudAdvanced").IpCloudAdvanced = null as any;
utilities.lazyLoad(exports, ["IpCloudAdvanced"], () => require("./ipCloudAdvanced"));

export { IpDhcpClientArgs, IpDhcpClientState } from "./ipDhcpClient";
export type IpDhcpClient = import("./ipDhcpClient").IpDhcpClient;
export const IpDhcpClient: typeof import("./ipDhcpClient").IpDhcpClient = null as any;
utilities.lazyLoad(exports, ["IpDhcpClient"], () => require("./ipDhcpClient"));

export { IpDhcpClientOptionArgs, IpDhcpClientOptionState } from "./ipDhcpClientOption";
export type IpDhcpClientOption = import("./ipDhcpClientOption").IpDhcpClientOption;
export const IpDhcpClientOption: typeof import("./ipDhcpClientOption").IpDhcpClientOption = null as any;
utilities.lazyLoad(exports, ["IpDhcpClientOption"], () => require("./ipDhcpClientOption"));

export { IpDhcpRelayArgs, IpDhcpRelayState } from "./ipDhcpRelay";
export type IpDhcpRelay = import("./ipDhcpRelay").IpDhcpRelay;
export const IpDhcpRelay: typeof import("./ipDhcpRelay").IpDhcpRelay = null as any;
utilities.lazyLoad(exports, ["IpDhcpRelay"], () => require("./ipDhcpRelay"));

export { IpDhcpServerArgs, IpDhcpServerState } from "./ipDhcpServer";
export type IpDhcpServer = import("./ipDhcpServer").IpDhcpServer;
export const IpDhcpServer: typeof import("./ipDhcpServer").IpDhcpServer = null as any;
utilities.lazyLoad(exports, ["IpDhcpServer"], () => require("./ipDhcpServer"));

export { IpDhcpServerConfigArgs, IpDhcpServerConfigState } from "./ipDhcpServerConfig";
export type IpDhcpServerConfig = import("./ipDhcpServerConfig").IpDhcpServerConfig;
export const IpDhcpServerConfig: typeof import("./ipDhcpServerConfig").IpDhcpServerConfig = null as any;
utilities.lazyLoad(exports, ["IpDhcpServerConfig"], () => require("./ipDhcpServerConfig"));

export { IpDhcpServerLeaseArgs, IpDhcpServerLeaseState } from "./ipDhcpServerLease";
export type IpDhcpServerLease = import("./ipDhcpServerLease").IpDhcpServerLease;
export const IpDhcpServerLease: typeof import("./ipDhcpServerLease").IpDhcpServerLease = null as any;
utilities.lazyLoad(exports, ["IpDhcpServerLease"], () => require("./ipDhcpServerLease"));

export { IpDhcpServerNetworkArgs, IpDhcpServerNetworkState } from "./ipDhcpServerNetwork";
export type IpDhcpServerNetwork = import("./ipDhcpServerNetwork").IpDhcpServerNetwork;
export const IpDhcpServerNetwork: typeof import("./ipDhcpServerNetwork").IpDhcpServerNetwork = null as any;
utilities.lazyLoad(exports, ["IpDhcpServerNetwork"], () => require("./ipDhcpServerNetwork"));

export { IpDhcpServerOptionArgs, IpDhcpServerOptionState } from "./ipDhcpServerOption";
export type IpDhcpServerOption = import("./ipDhcpServerOption").IpDhcpServerOption;
export const IpDhcpServerOption: typeof import("./ipDhcpServerOption").IpDhcpServerOption = null as any;
utilities.lazyLoad(exports, ["IpDhcpServerOption"], () => require("./ipDhcpServerOption"));

export { IpDhcpServerOptionSetArgs, IpDhcpServerOptionSetState } from "./ipDhcpServerOptionSet";
export type IpDhcpServerOptionSet = import("./ipDhcpServerOptionSet").IpDhcpServerOptionSet;
export const IpDhcpServerOptionSet: typeof import("./ipDhcpServerOptionSet").IpDhcpServerOptionSet = null as any;
utilities.lazyLoad(exports, ["IpDhcpServerOptionSet"], () => require("./ipDhcpServerOptionSet"));

export { IpDnsArgs, IpDnsState } from "./ipDns";
export type IpDns = import("./ipDns").IpDns;
export const IpDns: typeof import("./ipDns").IpDns = null as any;
utilities.lazyLoad(exports, ["IpDns"], () => require("./ipDns"));

export { IpDnsAdlistArgs, IpDnsAdlistState } from "./ipDnsAdlist";
export type IpDnsAdlist = import("./ipDnsAdlist").IpDnsAdlist;
export const IpDnsAdlist: typeof import("./ipDnsAdlist").IpDnsAdlist = null as any;
utilities.lazyLoad(exports, ["IpDnsAdlist"], () => require("./ipDnsAdlist"));

export { IpDnsRecordArgs, IpDnsRecordState } from "./ipDnsRecord";
export type IpDnsRecord = import("./ipDnsRecord").IpDnsRecord;
export const IpDnsRecord: typeof import("./ipDnsRecord").IpDnsRecord = null as any;
utilities.lazyLoad(exports, ["IpDnsRecord"], () => require("./ipDnsRecord"));

export { IpFirewallAddrListArgs, IpFirewallAddrListState } from "./ipFirewallAddrList";
export type IpFirewallAddrList = import("./ipFirewallAddrList").IpFirewallAddrList;
export const IpFirewallAddrList: typeof import("./ipFirewallAddrList").IpFirewallAddrList = null as any;
utilities.lazyLoad(exports, ["IpFirewallAddrList"], () => require("./ipFirewallAddrList"));

export { IpFirewallConnectionTrackingArgs, IpFirewallConnectionTrackingState } from "./ipFirewallConnectionTracking";
export type IpFirewallConnectionTracking = import("./ipFirewallConnectionTracking").IpFirewallConnectionTracking;
export const IpFirewallConnectionTracking: typeof import("./ipFirewallConnectionTracking").IpFirewallConnectionTracking = null as any;
utilities.lazyLoad(exports, ["IpFirewallConnectionTracking"], () => require("./ipFirewallConnectionTracking"));

export { IpFirewallFilterArgs, IpFirewallFilterState } from "./ipFirewallFilter";
export type IpFirewallFilter = import("./ipFirewallFilter").IpFirewallFilter;
export const IpFirewallFilter: typeof import("./ipFirewallFilter").IpFirewallFilter = null as any;
utilities.lazyLoad(exports, ["IpFirewallFilter"], () => require("./ipFirewallFilter"));

export { IpFirewallMangleArgs, IpFirewallMangleState } from "./ipFirewallMangle";
export type IpFirewallMangle = import("./ipFirewallMangle").IpFirewallMangle;
export const IpFirewallMangle: typeof import("./ipFirewallMangle").IpFirewallMangle = null as any;
utilities.lazyLoad(exports, ["IpFirewallMangle"], () => require("./ipFirewallMangle"));

export { IpFirewallNatArgs, IpFirewallNatState } from "./ipFirewallNat";
export type IpFirewallNat = import("./ipFirewallNat").IpFirewallNat;
export const IpFirewallNat: typeof import("./ipFirewallNat").IpFirewallNat = null as any;
utilities.lazyLoad(exports, ["IpFirewallNat"], () => require("./ipFirewallNat"));

export { IpFirewallRawArgs, IpFirewallRawState } from "./ipFirewallRaw";
export type IpFirewallRaw = import("./ipFirewallRaw").IpFirewallRaw;
export const IpFirewallRaw: typeof import("./ipFirewallRaw").IpFirewallRaw = null as any;
utilities.lazyLoad(exports, ["IpFirewallRaw"], () => require("./ipFirewallRaw"));

export { IpHotspotArgs, IpHotspotState } from "./ipHotspot";
export type IpHotspot = import("./ipHotspot").IpHotspot;
export const IpHotspot: typeof import("./ipHotspot").IpHotspot = null as any;
utilities.lazyLoad(exports, ["IpHotspot"], () => require("./ipHotspot"));

export { IpHotspotIpBindingArgs, IpHotspotIpBindingState } from "./ipHotspotIpBinding";
export type IpHotspotIpBinding = import("./ipHotspotIpBinding").IpHotspotIpBinding;
export const IpHotspotIpBinding: typeof import("./ipHotspotIpBinding").IpHotspotIpBinding = null as any;
utilities.lazyLoad(exports, ["IpHotspotIpBinding"], () => require("./ipHotspotIpBinding"));

export { IpHotspotProfileArgs, IpHotspotProfileState } from "./ipHotspotProfile";
export type IpHotspotProfile = import("./ipHotspotProfile").IpHotspotProfile;
export const IpHotspotProfile: typeof import("./ipHotspotProfile").IpHotspotProfile = null as any;
utilities.lazyLoad(exports, ["IpHotspotProfile"], () => require("./ipHotspotProfile"));

export { IpHotspotServicePortArgs, IpHotspotServicePortState } from "./ipHotspotServicePort";
export type IpHotspotServicePort = import("./ipHotspotServicePort").IpHotspotServicePort;
export const IpHotspotServicePort: typeof import("./ipHotspotServicePort").IpHotspotServicePort = null as any;
utilities.lazyLoad(exports, ["IpHotspotServicePort"], () => require("./ipHotspotServicePort"));

export { IpHotspotUserArgs, IpHotspotUserState } from "./ipHotspotUser";
export type IpHotspotUser = import("./ipHotspotUser").IpHotspotUser;
export const IpHotspotUser: typeof import("./ipHotspotUser").IpHotspotUser = null as any;
utilities.lazyLoad(exports, ["IpHotspotUser"], () => require("./ipHotspotUser"));

export { IpHotspotUserProfileArgs, IpHotspotUserProfileState } from "./ipHotspotUserProfile";
export type IpHotspotUserProfile = import("./ipHotspotUserProfile").IpHotspotUserProfile;
export const IpHotspotUserProfile: typeof import("./ipHotspotUserProfile").IpHotspotUserProfile = null as any;
utilities.lazyLoad(exports, ["IpHotspotUserProfile"], () => require("./ipHotspotUserProfile"));

export { IpHotspotWalledGardenArgs, IpHotspotWalledGardenState } from "./ipHotspotWalledGarden";
export type IpHotspotWalledGarden = import("./ipHotspotWalledGarden").IpHotspotWalledGarden;
export const IpHotspotWalledGarden: typeof import("./ipHotspotWalledGarden").IpHotspotWalledGarden = null as any;
utilities.lazyLoad(exports, ["IpHotspotWalledGarden"], () => require("./ipHotspotWalledGarden"));

export { IpHotspotWalledGardenIpArgs, IpHotspotWalledGardenIpState } from "./ipHotspotWalledGardenIp";
export type IpHotspotWalledGardenIp = import("./ipHotspotWalledGardenIp").IpHotspotWalledGardenIp;
export const IpHotspotWalledGardenIp: typeof import("./ipHotspotWalledGardenIp").IpHotspotWalledGardenIp = null as any;
utilities.lazyLoad(exports, ["IpHotspotWalledGardenIp"], () => require("./ipHotspotWalledGardenIp"));

export { IpIpsecIdentityArgs, IpIpsecIdentityState } from "./ipIpsecIdentity";
export type IpIpsecIdentity = import("./ipIpsecIdentity").IpIpsecIdentity;
export const IpIpsecIdentity: typeof import("./ipIpsecIdentity").IpIpsecIdentity = null as any;
utilities.lazyLoad(exports, ["IpIpsecIdentity"], () => require("./ipIpsecIdentity"));

export { IpIpsecKeyArgs, IpIpsecKeyState } from "./ipIpsecKey";
export type IpIpsecKey = import("./ipIpsecKey").IpIpsecKey;
export const IpIpsecKey: typeof import("./ipIpsecKey").IpIpsecKey = null as any;
utilities.lazyLoad(exports, ["IpIpsecKey"], () => require("./ipIpsecKey"));

export { IpIpsecModeConfigArgs, IpIpsecModeConfigState } from "./ipIpsecModeConfig";
export type IpIpsecModeConfig = import("./ipIpsecModeConfig").IpIpsecModeConfig;
export const IpIpsecModeConfig: typeof import("./ipIpsecModeConfig").IpIpsecModeConfig = null as any;
utilities.lazyLoad(exports, ["IpIpsecModeConfig"], () => require("./ipIpsecModeConfig"));

export { IpIpsecPeerArgs, IpIpsecPeerState } from "./ipIpsecPeer";
export type IpIpsecPeer = import("./ipIpsecPeer").IpIpsecPeer;
export const IpIpsecPeer: typeof import("./ipIpsecPeer").IpIpsecPeer = null as any;
utilities.lazyLoad(exports, ["IpIpsecPeer"], () => require("./ipIpsecPeer"));

export { IpIpsecPolicyArgs, IpIpsecPolicyState } from "./ipIpsecPolicy";
export type IpIpsecPolicy = import("./ipIpsecPolicy").IpIpsecPolicy;
export const IpIpsecPolicy: typeof import("./ipIpsecPolicy").IpIpsecPolicy = null as any;
utilities.lazyLoad(exports, ["IpIpsecPolicy"], () => require("./ipIpsecPolicy"));

export { IpIpsecPolicyGroupArgs, IpIpsecPolicyGroupState } from "./ipIpsecPolicyGroup";
export type IpIpsecPolicyGroup = import("./ipIpsecPolicyGroup").IpIpsecPolicyGroup;
export const IpIpsecPolicyGroup: typeof import("./ipIpsecPolicyGroup").IpIpsecPolicyGroup = null as any;
utilities.lazyLoad(exports, ["IpIpsecPolicyGroup"], () => require("./ipIpsecPolicyGroup"));

export { IpIpsecProfileArgs, IpIpsecProfileState } from "./ipIpsecProfile";
export type IpIpsecProfile = import("./ipIpsecProfile").IpIpsecProfile;
export const IpIpsecProfile: typeof import("./ipIpsecProfile").IpIpsecProfile = null as any;
utilities.lazyLoad(exports, ["IpIpsecProfile"], () => require("./ipIpsecProfile"));

export { IpIpsecProposalArgs, IpIpsecProposalState } from "./ipIpsecProposal";
export type IpIpsecProposal = import("./ipIpsecProposal").IpIpsecProposal;
export const IpIpsecProposal: typeof import("./ipIpsecProposal").IpIpsecProposal = null as any;
utilities.lazyLoad(exports, ["IpIpsecProposal"], () => require("./ipIpsecProposal"));

export { IpIpsecSettingsArgs, IpIpsecSettingsState } from "./ipIpsecSettings";
export type IpIpsecSettings = import("./ipIpsecSettings").IpIpsecSettings;
export const IpIpsecSettings: typeof import("./ipIpsecSettings").IpIpsecSettings = null as any;
utilities.lazyLoad(exports, ["IpIpsecSettings"], () => require("./ipIpsecSettings"));

export { IpNeighborDiscoverySettingsArgs, IpNeighborDiscoverySettingsState } from "./ipNeighborDiscoverySettings";
export type IpNeighborDiscoverySettings = import("./ipNeighborDiscoverySettings").IpNeighborDiscoverySettings;
export const IpNeighborDiscoverySettings: typeof import("./ipNeighborDiscoverySettings").IpNeighborDiscoverySettings = null as any;
utilities.lazyLoad(exports, ["IpNeighborDiscoverySettings"], () => require("./ipNeighborDiscoverySettings"));

export { IpPoolArgs, IpPoolState } from "./ipPool";
export type IpPool = import("./ipPool").IpPool;
export const IpPool: typeof import("./ipPool").IpPool = null as any;
utilities.lazyLoad(exports, ["IpPool"], () => require("./ipPool"));

export { IpRouteArgs, IpRouteState } from "./ipRoute";
export type IpRoute = import("./ipRoute").IpRoute;
export const IpRoute: typeof import("./ipRoute").IpRoute = null as any;
utilities.lazyLoad(exports, ["IpRoute"], () => require("./ipRoute"));

export { IpServiceArgs, IpServiceState } from "./ipService";
export type IpService = import("./ipService").IpService;
export const IpService: typeof import("./ipService").IpService = null as any;
utilities.lazyLoad(exports, ["IpService"], () => require("./ipService"));

export { IpSshServerArgs, IpSshServerState } from "./ipSshServer";
export type IpSshServer = import("./ipSshServer").IpSshServer;
export const IpSshServer: typeof import("./ipSshServer").IpSshServer = null as any;
utilities.lazyLoad(exports, ["IpSshServer"], () => require("./ipSshServer"));

export { IpUpnpArgs, IpUpnpState } from "./ipUpnp";
export type IpUpnp = import("./ipUpnp").IpUpnp;
export const IpUpnp: typeof import("./ipUpnp").IpUpnp = null as any;
utilities.lazyLoad(exports, ["IpUpnp"], () => require("./ipUpnp"));

export { IpUpnpInterfacesArgs, IpUpnpInterfacesState } from "./ipUpnpInterfaces";
export type IpUpnpInterfaces = import("./ipUpnpInterfaces").IpUpnpInterfaces;
export const IpUpnpInterfaces: typeof import("./ipUpnpInterfaces").IpUpnpInterfaces = null as any;
utilities.lazyLoad(exports, ["IpUpnpInterfaces"], () => require("./ipUpnpInterfaces"));

export { IpVrfArgs, IpVrfState } from "./ipVrf";
export type IpVrf = import("./ipVrf").IpVrf;
export const IpVrf: typeof import("./ipVrf").IpVrf = null as any;
utilities.lazyLoad(exports, ["IpVrf"], () => require("./ipVrf"));

export { IpipArgs, IpipState } from "./ipip";
export type Ipip = import("./ipip").Ipip;
export const Ipip: typeof import("./ipip").Ipip = null as any;
utilities.lazyLoad(exports, ["Ipip"], () => require("./ipip"));

export { Ipv6AddressArgs, Ipv6AddressState } from "./ipv6Address";
export type Ipv6Address = import("./ipv6Address").Ipv6Address;
export const Ipv6Address: typeof import("./ipv6Address").Ipv6Address = null as any;
utilities.lazyLoad(exports, ["Ipv6Address"], () => require("./ipv6Address"));

export { Ipv6DhcpClientArgs, Ipv6DhcpClientState } from "./ipv6DhcpClient";
export type Ipv6DhcpClient = import("./ipv6DhcpClient").Ipv6DhcpClient;
export const Ipv6DhcpClient: typeof import("./ipv6DhcpClient").Ipv6DhcpClient = null as any;
utilities.lazyLoad(exports, ["Ipv6DhcpClient"], () => require("./ipv6DhcpClient"));

export { Ipv6DhcpClientOptionArgs, Ipv6DhcpClientOptionState } from "./ipv6DhcpClientOption";
export type Ipv6DhcpClientOption = import("./ipv6DhcpClientOption").Ipv6DhcpClientOption;
export const Ipv6DhcpClientOption: typeof import("./ipv6DhcpClientOption").Ipv6DhcpClientOption = null as any;
utilities.lazyLoad(exports, ["Ipv6DhcpClientOption"], () => require("./ipv6DhcpClientOption"));

export { Ipv6DhcpServerArgs, Ipv6DhcpServerState } from "./ipv6DhcpServer";
export type Ipv6DhcpServer = import("./ipv6DhcpServer").Ipv6DhcpServer;
export const Ipv6DhcpServer: typeof import("./ipv6DhcpServer").Ipv6DhcpServer = null as any;
utilities.lazyLoad(exports, ["Ipv6DhcpServer"], () => require("./ipv6DhcpServer"));

export { Ipv6DhcpServerOptionArgs, Ipv6DhcpServerOptionState } from "./ipv6DhcpServerOption";
export type Ipv6DhcpServerOption = import("./ipv6DhcpServerOption").Ipv6DhcpServerOption;
export const Ipv6DhcpServerOption: typeof import("./ipv6DhcpServerOption").Ipv6DhcpServerOption = null as any;
utilities.lazyLoad(exports, ["Ipv6DhcpServerOption"], () => require("./ipv6DhcpServerOption"));

export { Ipv6DhcpServerOptionSetsArgs, Ipv6DhcpServerOptionSetsState } from "./ipv6DhcpServerOptionSets";
export type Ipv6DhcpServerOptionSets = import("./ipv6DhcpServerOptionSets").Ipv6DhcpServerOptionSets;
export const Ipv6DhcpServerOptionSets: typeof import("./ipv6DhcpServerOptionSets").Ipv6DhcpServerOptionSets = null as any;
utilities.lazyLoad(exports, ["Ipv6DhcpServerOptionSets"], () => require("./ipv6DhcpServerOptionSets"));

export { Ipv6FirewallAddrListArgs, Ipv6FirewallAddrListState } from "./ipv6FirewallAddrList";
export type Ipv6FirewallAddrList = import("./ipv6FirewallAddrList").Ipv6FirewallAddrList;
export const Ipv6FirewallAddrList: typeof import("./ipv6FirewallAddrList").Ipv6FirewallAddrList = null as any;
utilities.lazyLoad(exports, ["Ipv6FirewallAddrList"], () => require("./ipv6FirewallAddrList"));

export { Ipv6FirewallFilterArgs, Ipv6FirewallFilterState } from "./ipv6FirewallFilter";
export type Ipv6FirewallFilter = import("./ipv6FirewallFilter").Ipv6FirewallFilter;
export const Ipv6FirewallFilter: typeof import("./ipv6FirewallFilter").Ipv6FirewallFilter = null as any;
utilities.lazyLoad(exports, ["Ipv6FirewallFilter"], () => require("./ipv6FirewallFilter"));

export { Ipv6NeighborDiscoveryArgs, Ipv6NeighborDiscoveryState } from "./ipv6NeighborDiscovery";
export type Ipv6NeighborDiscovery = import("./ipv6NeighborDiscovery").Ipv6NeighborDiscovery;
export const Ipv6NeighborDiscovery: typeof import("./ipv6NeighborDiscovery").Ipv6NeighborDiscovery = null as any;
utilities.lazyLoad(exports, ["Ipv6NeighborDiscovery"], () => require("./ipv6NeighborDiscovery"));

export { Ipv6PoolArgs, Ipv6PoolState } from "./ipv6Pool";
export type Ipv6Pool = import("./ipv6Pool").Ipv6Pool;
export const Ipv6Pool: typeof import("./ipv6Pool").Ipv6Pool = null as any;
utilities.lazyLoad(exports, ["Ipv6Pool"], () => require("./ipv6Pool"));

export { Ipv6RouteArgs, Ipv6RouteState } from "./ipv6Route";
export type Ipv6Route = import("./ipv6Route").Ipv6Route;
export const Ipv6Route: typeof import("./ipv6Route").Ipv6Route = null as any;
utilities.lazyLoad(exports, ["Ipv6Route"], () => require("./ipv6Route"));

export { Ipv6SettingsArgs, Ipv6SettingsState } from "./ipv6Settings";
export type Ipv6Settings = import("./ipv6Settings").Ipv6Settings;
export const Ipv6Settings: typeof import("./ipv6Settings").Ipv6Settings = null as any;
utilities.lazyLoad(exports, ["Ipv6Settings"], () => require("./ipv6Settings"));

export { MoveItemsArgs, MoveItemsState } from "./moveItems";
export type MoveItems = import("./moveItems").MoveItems;
export const MoveItems: typeof import("./moveItems").MoveItems = null as any;
utilities.lazyLoad(exports, ["MoveItems"], () => require("./moveItems"));

export { OvpnServerArgs, OvpnServerState } from "./ovpnServer";
export type OvpnServer = import("./ovpnServer").OvpnServer;
export const OvpnServer: typeof import("./ovpnServer").OvpnServer = null as any;
utilities.lazyLoad(exports, ["OvpnServer"], () => require("./ovpnServer"));

export { PppAaaArgs, PppAaaState } from "./pppAaa";
export type PppAaa = import("./pppAaa").PppAaa;
export const PppAaa: typeof import("./pppAaa").PppAaa = null as any;
utilities.lazyLoad(exports, ["PppAaa"], () => require("./pppAaa"));

export { PppProfileArgs, PppProfileState } from "./pppProfile";
export type PppProfile = import("./pppProfile").PppProfile;
export const PppProfile: typeof import("./pppProfile").PppProfile = null as any;
utilities.lazyLoad(exports, ["PppProfile"], () => require("./pppProfile"));

export { PppSecretArgs, PppSecretState } from "./pppSecret";
export type PppSecret = import("./pppSecret").PppSecret;
export const PppSecret: typeof import("./pppSecret").PppSecret = null as any;
utilities.lazyLoad(exports, ["PppSecret"], () => require("./pppSecret"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RadiusArgs, RadiusState } from "./radius";
export type Radius = import("./radius").Radius;
export const Radius: typeof import("./radius").Radius = null as any;
utilities.lazyLoad(exports, ["Radius"], () => require("./radius"));

export { RadiusIncomingArgs, RadiusIncomingState } from "./radiusIncoming";
export type RadiusIncoming = import("./radiusIncoming").RadiusIncoming;
export const RadiusIncoming: typeof import("./radiusIncoming").RadiusIncoming = null as any;
utilities.lazyLoad(exports, ["RadiusIncoming"], () => require("./radiusIncoming"));

export { RoutingBgpConnectionArgs, RoutingBgpConnectionState } from "./routingBgpConnection";
export type RoutingBgpConnection = import("./routingBgpConnection").RoutingBgpConnection;
export const RoutingBgpConnection: typeof import("./routingBgpConnection").RoutingBgpConnection = null as any;
utilities.lazyLoad(exports, ["RoutingBgpConnection"], () => require("./routingBgpConnection"));

export { RoutingBgpTemplateArgs, RoutingBgpTemplateState } from "./routingBgpTemplate";
export type RoutingBgpTemplate = import("./routingBgpTemplate").RoutingBgpTemplate;
export const RoutingBgpTemplate: typeof import("./routingBgpTemplate").RoutingBgpTemplate = null as any;
utilities.lazyLoad(exports, ["RoutingBgpTemplate"], () => require("./routingBgpTemplate"));

export { RoutingFilterRuleArgs, RoutingFilterRuleState } from "./routingFilterRule";
export type RoutingFilterRule = import("./routingFilterRule").RoutingFilterRule;
export const RoutingFilterRule: typeof import("./routingFilterRule").RoutingFilterRule = null as any;
utilities.lazyLoad(exports, ["RoutingFilterRule"], () => require("./routingFilterRule"));

export { RoutingOspfAreaArgs, RoutingOspfAreaState } from "./routingOspfArea";
export type RoutingOspfArea = import("./routingOspfArea").RoutingOspfArea;
export const RoutingOspfArea: typeof import("./routingOspfArea").RoutingOspfArea = null as any;
utilities.lazyLoad(exports, ["RoutingOspfArea"], () => require("./routingOspfArea"));

export { RoutingOspfInstanceArgs, RoutingOspfInstanceState } from "./routingOspfInstance";
export type RoutingOspfInstance = import("./routingOspfInstance").RoutingOspfInstance;
export const RoutingOspfInstance: typeof import("./routingOspfInstance").RoutingOspfInstance = null as any;
utilities.lazyLoad(exports, ["RoutingOspfInstance"], () => require("./routingOspfInstance"));

export { RoutingOspfInterfaceTemplateArgs, RoutingOspfInterfaceTemplateState } from "./routingOspfInterfaceTemplate";
export type RoutingOspfInterfaceTemplate = import("./routingOspfInterfaceTemplate").RoutingOspfInterfaceTemplate;
export const RoutingOspfInterfaceTemplate: typeof import("./routingOspfInterfaceTemplate").RoutingOspfInterfaceTemplate = null as any;
utilities.lazyLoad(exports, ["RoutingOspfInterfaceTemplate"], () => require("./routingOspfInterfaceTemplate"));

export { RoutingRuleArgs, RoutingRuleState } from "./routingRule";
export type RoutingRule = import("./routingRule").RoutingRule;
export const RoutingRule: typeof import("./routingRule").RoutingRule = null as any;
utilities.lazyLoad(exports, ["RoutingRule"], () => require("./routingRule"));

export { RoutingTableArgs, RoutingTableState } from "./routingTable";
export type RoutingTable = import("./routingTable").RoutingTable;
export const RoutingTable: typeof import("./routingTable").RoutingTable = null as any;
utilities.lazyLoad(exports, ["RoutingTable"], () => require("./routingTable"));

export { SchedulerArgs, SchedulerState } from "./scheduler";
export type Scheduler = import("./scheduler").Scheduler;
export const Scheduler: typeof import("./scheduler").Scheduler = null as any;
utilities.lazyLoad(exports, ["Scheduler"], () => require("./scheduler"));

export { SnmpArgs, SnmpState } from "./snmp";
export type Snmp = import("./snmp").Snmp;
export const Snmp: typeof import("./snmp").Snmp = null as any;
utilities.lazyLoad(exports, ["Snmp"], () => require("./snmp"));

export { SnmpCommunityArgs, SnmpCommunityState } from "./snmpCommunity";
export type SnmpCommunity = import("./snmpCommunity").SnmpCommunity;
export const SnmpCommunity: typeof import("./snmpCommunity").SnmpCommunity = null as any;
utilities.lazyLoad(exports, ["SnmpCommunity"], () => require("./snmpCommunity"));

export { SystemCertificateArgs, SystemCertificateState } from "./systemCertificate";
export type SystemCertificate = import("./systemCertificate").SystemCertificate;
export const SystemCertificate: typeof import("./systemCertificate").SystemCertificate = null as any;
utilities.lazyLoad(exports, ["SystemCertificate"], () => require("./systemCertificate"));

export { SystemCertificateScepServerArgs, SystemCertificateScepServerState } from "./systemCertificateScepServer";
export type SystemCertificateScepServer = import("./systemCertificateScepServer").SystemCertificateScepServer;
export const SystemCertificateScepServer: typeof import("./systemCertificateScepServer").SystemCertificateScepServer = null as any;
utilities.lazyLoad(exports, ["SystemCertificateScepServer"], () => require("./systemCertificateScepServer"));

export { SystemClockArgs, SystemClockState } from "./systemClock";
export type SystemClock = import("./systemClock").SystemClock;
export const SystemClock: typeof import("./systemClock").SystemClock = null as any;
utilities.lazyLoad(exports, ["SystemClock"], () => require("./systemClock"));

export { SystemIdentityArgs, SystemIdentityState } from "./systemIdentity";
export type SystemIdentity = import("./systemIdentity").SystemIdentity;
export const SystemIdentity: typeof import("./systemIdentity").SystemIdentity = null as any;
utilities.lazyLoad(exports, ["SystemIdentity"], () => require("./systemIdentity"));

export { SystemLedArgs, SystemLedState } from "./systemLed";
export type SystemLed = import("./systemLed").SystemLed;
export const SystemLed: typeof import("./systemLed").SystemLed = null as any;
utilities.lazyLoad(exports, ["SystemLed"], () => require("./systemLed"));

export { SystemLedSettingsArgs, SystemLedSettingsState } from "./systemLedSettings";
export type SystemLedSettings = import("./systemLedSettings").SystemLedSettings;
export const SystemLedSettings: typeof import("./systemLedSettings").SystemLedSettings = null as any;
utilities.lazyLoad(exports, ["SystemLedSettings"], () => require("./systemLedSettings"));

export { SystemLoggingArgs, SystemLoggingState } from "./systemLogging";
export type SystemLogging = import("./systemLogging").SystemLogging;
export const SystemLogging: typeof import("./systemLogging").SystemLogging = null as any;
utilities.lazyLoad(exports, ["SystemLogging"], () => require("./systemLogging"));

export { SystemLoggingActionArgs, SystemLoggingActionState } from "./systemLoggingAction";
export type SystemLoggingAction = import("./systemLoggingAction").SystemLoggingAction;
export const SystemLoggingAction: typeof import("./systemLoggingAction").SystemLoggingAction = null as any;
utilities.lazyLoad(exports, ["SystemLoggingAction"], () => require("./systemLoggingAction"));

export { SystemNtpClientArgs, SystemNtpClientState } from "./systemNtpClient";
export type SystemNtpClient = import("./systemNtpClient").SystemNtpClient;
export const SystemNtpClient: typeof import("./systemNtpClient").SystemNtpClient = null as any;
utilities.lazyLoad(exports, ["SystemNtpClient"], () => require("./systemNtpClient"));

export { SystemNtpServerArgs, SystemNtpServerState } from "./systemNtpServer";
export type SystemNtpServer = import("./systemNtpServer").SystemNtpServer;
export const SystemNtpServer: typeof import("./systemNtpServer").SystemNtpServer = null as any;
utilities.lazyLoad(exports, ["SystemNtpServer"], () => require("./systemNtpServer"));

export { SystemRouterboardButtonModeArgs, SystemRouterboardButtonModeState } from "./systemRouterboardButtonMode";
export type SystemRouterboardButtonMode = import("./systemRouterboardButtonMode").SystemRouterboardButtonMode;
export const SystemRouterboardButtonMode: typeof import("./systemRouterboardButtonMode").SystemRouterboardButtonMode = null as any;
utilities.lazyLoad(exports, ["SystemRouterboardButtonMode"], () => require("./systemRouterboardButtonMode"));

export { SystemRouterboardButtonResetArgs, SystemRouterboardButtonResetState } from "./systemRouterboardButtonReset";
export type SystemRouterboardButtonReset = import("./systemRouterboardButtonReset").SystemRouterboardButtonReset;
export const SystemRouterboardButtonReset: typeof import("./systemRouterboardButtonReset").SystemRouterboardButtonReset = null as any;
utilities.lazyLoad(exports, ["SystemRouterboardButtonReset"], () => require("./systemRouterboardButtonReset"));

export { SystemRouterboardButtonWpsArgs, SystemRouterboardButtonWpsState } from "./systemRouterboardButtonWps";
export type SystemRouterboardButtonWps = import("./systemRouterboardButtonWps").SystemRouterboardButtonWps;
export const SystemRouterboardButtonWps: typeof import("./systemRouterboardButtonWps").SystemRouterboardButtonWps = null as any;
utilities.lazyLoad(exports, ["SystemRouterboardButtonWps"], () => require("./systemRouterboardButtonWps"));

export { SystemRouterboardSettingsArgs, SystemRouterboardSettingsState } from "./systemRouterboardSettings";
export type SystemRouterboardSettings = import("./systemRouterboardSettings").SystemRouterboardSettings;
export const SystemRouterboardSettings: typeof import("./systemRouterboardSettings").SystemRouterboardSettings = null as any;
utilities.lazyLoad(exports, ["SystemRouterboardSettings"], () => require("./systemRouterboardSettings"));

export { SystemRouterboardUsbArgs, SystemRouterboardUsbState } from "./systemRouterboardUsb";
export type SystemRouterboardUsb = import("./systemRouterboardUsb").SystemRouterboardUsb;
export const SystemRouterboardUsb: typeof import("./systemRouterboardUsb").SystemRouterboardUsb = null as any;
utilities.lazyLoad(exports, ["SystemRouterboardUsb"], () => require("./systemRouterboardUsb"));

export { SystemSchedulerArgs, SystemSchedulerState } from "./systemScheduler";
export type SystemScheduler = import("./systemScheduler").SystemScheduler;
export const SystemScheduler: typeof import("./systemScheduler").SystemScheduler = null as any;
utilities.lazyLoad(exports, ["SystemScheduler"], () => require("./systemScheduler"));

export { SystemScriptArgs, SystemScriptState } from "./systemScript";
export type SystemScript = import("./systemScript").SystemScript;
export const SystemScript: typeof import("./systemScript").SystemScript = null as any;
utilities.lazyLoad(exports, ["SystemScript"], () => require("./systemScript"));

export { SystemUserArgs, SystemUserState } from "./systemUser";
export type SystemUser = import("./systemUser").SystemUser;
export const SystemUser: typeof import("./systemUser").SystemUser = null as any;
utilities.lazyLoad(exports, ["SystemUser"], () => require("./systemUser"));

export { SystemUserAaaArgs, SystemUserAaaState } from "./systemUserAaa";
export type SystemUserAaa = import("./systemUserAaa").SystemUserAaa;
export const SystemUserAaa: typeof import("./systemUserAaa").SystemUserAaa = null as any;
utilities.lazyLoad(exports, ["SystemUserAaa"], () => require("./systemUserAaa"));

export { SystemUserGroupArgs, SystemUserGroupState } from "./systemUserGroup";
export type SystemUserGroup = import("./systemUserGroup").SystemUserGroup;
export const SystemUserGroup: typeof import("./systemUserGroup").SystemUserGroup = null as any;
utilities.lazyLoad(exports, ["SystemUserGroup"], () => require("./systemUserGroup"));

export { SystemUserSettingsArgs, SystemUserSettingsState } from "./systemUserSettings";
export type SystemUserSettings = import("./systemUserSettings").SystemUserSettings;
export const SystemUserSettings: typeof import("./systemUserSettings").SystemUserSettings = null as any;
utilities.lazyLoad(exports, ["SystemUserSettings"], () => require("./systemUserSettings"));

export { ToolBandwidthServerArgs, ToolBandwidthServerState } from "./toolBandwidthServer";
export type ToolBandwidthServer = import("./toolBandwidthServer").ToolBandwidthServer;
export const ToolBandwidthServer: typeof import("./toolBandwidthServer").ToolBandwidthServer = null as any;
utilities.lazyLoad(exports, ["ToolBandwidthServer"], () => require("./toolBandwidthServer"));

export { ToolMacServerArgs, ToolMacServerState } from "./toolMacServer";
export type ToolMacServer = import("./toolMacServer").ToolMacServer;
export const ToolMacServer: typeof import("./toolMacServer").ToolMacServer = null as any;
utilities.lazyLoad(exports, ["ToolMacServer"], () => require("./toolMacServer"));

export { ToolMacServerWinboxArgs, ToolMacServerWinboxState } from "./toolMacServerWinbox";
export type ToolMacServerWinbox = import("./toolMacServerWinbox").ToolMacServerWinbox;
export const ToolMacServerWinbox: typeof import("./toolMacServerWinbox").ToolMacServerWinbox = null as any;
utilities.lazyLoad(exports, ["ToolMacServerWinbox"], () => require("./toolMacServerWinbox"));

export { ToolNetwatchArgs, ToolNetwatchState } from "./toolNetwatch";
export type ToolNetwatch = import("./toolNetwatch").ToolNetwatch;
export const ToolNetwatch: typeof import("./toolNetwatch").ToolNetwatch = null as any;
utilities.lazyLoad(exports, ["ToolNetwatch"], () => require("./toolNetwatch"));

export { ToolSnifferArgs, ToolSnifferState } from "./toolSniffer";
export type ToolSniffer = import("./toolSniffer").ToolSniffer;
export const ToolSniffer: typeof import("./toolSniffer").ToolSniffer = null as any;
utilities.lazyLoad(exports, ["ToolSniffer"], () => require("./toolSniffer"));

export { UserManagerAdvancedArgs, UserManagerAdvancedState } from "./userManagerAdvanced";
export type UserManagerAdvanced = import("./userManagerAdvanced").UserManagerAdvanced;
export const UserManagerAdvanced: typeof import("./userManagerAdvanced").UserManagerAdvanced = null as any;
utilities.lazyLoad(exports, ["UserManagerAdvanced"], () => require("./userManagerAdvanced"));

export { UserManagerAttributeArgs, UserManagerAttributeState } from "./userManagerAttribute";
export type UserManagerAttribute = import("./userManagerAttribute").UserManagerAttribute;
export const UserManagerAttribute: typeof import("./userManagerAttribute").UserManagerAttribute = null as any;
utilities.lazyLoad(exports, ["UserManagerAttribute"], () => require("./userManagerAttribute"));

export { UserManagerDatabaseArgs, UserManagerDatabaseState } from "./userManagerDatabase";
export type UserManagerDatabase = import("./userManagerDatabase").UserManagerDatabase;
export const UserManagerDatabase: typeof import("./userManagerDatabase").UserManagerDatabase = null as any;
utilities.lazyLoad(exports, ["UserManagerDatabase"], () => require("./userManagerDatabase"));

export { UserManagerLimitationArgs, UserManagerLimitationState } from "./userManagerLimitation";
export type UserManagerLimitation = import("./userManagerLimitation").UserManagerLimitation;
export const UserManagerLimitation: typeof import("./userManagerLimitation").UserManagerLimitation = null as any;
utilities.lazyLoad(exports, ["UserManagerLimitation"], () => require("./userManagerLimitation"));

export { UserManagerProfileArgs, UserManagerProfileState } from "./userManagerProfile";
export type UserManagerProfile = import("./userManagerProfile").UserManagerProfile;
export const UserManagerProfile: typeof import("./userManagerProfile").UserManagerProfile = null as any;
utilities.lazyLoad(exports, ["UserManagerProfile"], () => require("./userManagerProfile"));

export { UserManagerProfileLimitationArgs, UserManagerProfileLimitationState } from "./userManagerProfileLimitation";
export type UserManagerProfileLimitation = import("./userManagerProfileLimitation").UserManagerProfileLimitation;
export const UserManagerProfileLimitation: typeof import("./userManagerProfileLimitation").UserManagerProfileLimitation = null as any;
utilities.lazyLoad(exports, ["UserManagerProfileLimitation"], () => require("./userManagerProfileLimitation"));

export { UserManagerRouterArgs, UserManagerRouterState } from "./userManagerRouter";
export type UserManagerRouter = import("./userManagerRouter").UserManagerRouter;
export const UserManagerRouter: typeof import("./userManagerRouter").UserManagerRouter = null as any;
utilities.lazyLoad(exports, ["UserManagerRouter"], () => require("./userManagerRouter"));

export { UserManagerSettingsArgs, UserManagerSettingsState } from "./userManagerSettings";
export type UserManagerSettings = import("./userManagerSettings").UserManagerSettings;
export const UserManagerSettings: typeof import("./userManagerSettings").UserManagerSettings = null as any;
utilities.lazyLoad(exports, ["UserManagerSettings"], () => require("./userManagerSettings"));

export { UserManagerUserArgs, UserManagerUserState } from "./userManagerUser";
export type UserManagerUser = import("./userManagerUser").UserManagerUser;
export const UserManagerUser: typeof import("./userManagerUser").UserManagerUser = null as any;
utilities.lazyLoad(exports, ["UserManagerUser"], () => require("./userManagerUser"));

export { UserManagerUserGroupArgs, UserManagerUserGroupState } from "./userManagerUserGroup";
export type UserManagerUserGroup = import("./userManagerUserGroup").UserManagerUserGroup;
export const UserManagerUserGroup: typeof import("./userManagerUserGroup").UserManagerUserGroup = null as any;
utilities.lazyLoad(exports, ["UserManagerUserGroup"], () => require("./userManagerUserGroup"));

export { UserManagerUserProfileArgs, UserManagerUserProfileState } from "./userManagerUserProfile";
export type UserManagerUserProfile = import("./userManagerUserProfile").UserManagerUserProfile;
export const UserManagerUserProfile: typeof import("./userManagerUserProfile").UserManagerUserProfile = null as any;
utilities.lazyLoad(exports, ["UserManagerUserProfile"], () => require("./userManagerUserProfile"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));

export { VrrpArgs, VrrpState } from "./vrrp";
export type Vrrp = import("./vrrp").Vrrp;
export const Vrrp: typeof import("./vrrp").Vrrp = null as any;
utilities.lazyLoad(exports, ["Vrrp"], () => require("./vrrp"));

export { WifiArgs, WifiState } from "./wifi";
export type Wifi = import("./wifi").Wifi;
export const Wifi: typeof import("./wifi").Wifi = null as any;
utilities.lazyLoad(exports, ["Wifi"], () => require("./wifi"));

export { WifiAaaArgs, WifiAaaState } from "./wifiAaa";
export type WifiAaa = import("./wifiAaa").WifiAaa;
export const WifiAaa: typeof import("./wifiAaa").WifiAaa = null as any;
utilities.lazyLoad(exports, ["WifiAaa"], () => require("./wifiAaa"));

export { WifiAccessListArgs, WifiAccessListState } from "./wifiAccessList";
export type WifiAccessList = import("./wifiAccessList").WifiAccessList;
export const WifiAccessList: typeof import("./wifiAccessList").WifiAccessList = null as any;
utilities.lazyLoad(exports, ["WifiAccessList"], () => require("./wifiAccessList"));

export { WifiCapArgs, WifiCapState } from "./wifiCap";
export type WifiCap = import("./wifiCap").WifiCap;
export const WifiCap: typeof import("./wifiCap").WifiCap = null as any;
utilities.lazyLoad(exports, ["WifiCap"], () => require("./wifiCap"));

export { WifiCapsmanArgs, WifiCapsmanState } from "./wifiCapsman";
export type WifiCapsman = import("./wifiCapsman").WifiCapsman;
export const WifiCapsman: typeof import("./wifiCapsman").WifiCapsman = null as any;
utilities.lazyLoad(exports, ["WifiCapsman"], () => require("./wifiCapsman"));

export { WifiChannelArgs, WifiChannelState } from "./wifiChannel";
export type WifiChannel = import("./wifiChannel").WifiChannel;
export const WifiChannel: typeof import("./wifiChannel").WifiChannel = null as any;
utilities.lazyLoad(exports, ["WifiChannel"], () => require("./wifiChannel"));

export { WifiConfigurationArgs, WifiConfigurationState } from "./wifiConfiguration";
export type WifiConfiguration = import("./wifiConfiguration").WifiConfiguration;
export const WifiConfiguration: typeof import("./wifiConfiguration").WifiConfiguration = null as any;
utilities.lazyLoad(exports, ["WifiConfiguration"], () => require("./wifiConfiguration"));

export { WifiDatapathArgs, WifiDatapathState } from "./wifiDatapath";
export type WifiDatapath = import("./wifiDatapath").WifiDatapath;
export const WifiDatapath: typeof import("./wifiDatapath").WifiDatapath = null as any;
utilities.lazyLoad(exports, ["WifiDatapath"], () => require("./wifiDatapath"));

export { WifiInterworkingArgs, WifiInterworkingState } from "./wifiInterworking";
export type WifiInterworking = import("./wifiInterworking").WifiInterworking;
export const WifiInterworking: typeof import("./wifiInterworking").WifiInterworking = null as any;
utilities.lazyLoad(exports, ["WifiInterworking"], () => require("./wifiInterworking"));

export { WifiProvisioningArgs, WifiProvisioningState } from "./wifiProvisioning";
export type WifiProvisioning = import("./wifiProvisioning").WifiProvisioning;
export const WifiProvisioning: typeof import("./wifiProvisioning").WifiProvisioning = null as any;
utilities.lazyLoad(exports, ["WifiProvisioning"], () => require("./wifiProvisioning"));

export { WifiSecurityArgs, WifiSecurityState } from "./wifiSecurity";
export type WifiSecurity = import("./wifiSecurity").WifiSecurity;
export const WifiSecurity: typeof import("./wifiSecurity").WifiSecurity = null as any;
utilities.lazyLoad(exports, ["WifiSecurity"], () => require("./wifiSecurity"));

export { WifiSteeringArgs, WifiSteeringState } from "./wifiSteering";
export type WifiSteering = import("./wifiSteering").WifiSteering;
export const WifiSteering: typeof import("./wifiSteering").WifiSteering = null as any;
utilities.lazyLoad(exports, ["WifiSteering"], () => require("./wifiSteering"));

export { WireguardArgs, WireguardState } from "./wireguard";
export type Wireguard = import("./wireguard").Wireguard;
export const Wireguard: typeof import("./wireguard").Wireguard = null as any;
utilities.lazyLoad(exports, ["Wireguard"], () => require("./wireguard"));

export { WireguardKeysArgs, WireguardKeysState } from "./wireguardKeys";
export type WireguardKeys = import("./wireguardKeys").WireguardKeys;
export const WireguardKeys: typeof import("./wireguardKeys").WireguardKeys = null as any;
utilities.lazyLoad(exports, ["WireguardKeys"], () => require("./wireguardKeys"));

export { WireguardPeerArgs, WireguardPeerState } from "./wireguardPeer";
export type WireguardPeer = import("./wireguardPeer").WireguardPeer;
export const WireguardPeer: typeof import("./wireguardPeer").WireguardPeer = null as any;
utilities.lazyLoad(exports, ["WireguardPeer"], () => require("./wireguardPeer"));

export { ZerotierArgs, ZerotierState } from "./zerotier";
export type Zerotier = import("./zerotier").Zerotier;
export const Zerotier: typeof import("./zerotier").Zerotier = null as any;
utilities.lazyLoad(exports, ["Zerotier"], () => require("./zerotier"));

export { ZerotierControllerArgs, ZerotierControllerState } from "./zerotierController";
export type ZerotierController = import("./zerotierController").ZerotierController;
export const ZerotierController: typeof import("./zerotierController").ZerotierController = null as any;
utilities.lazyLoad(exports, ["ZerotierController"], () => require("./zerotierController"));

export { ZerotierInterfaceArgs, ZerotierInterfaceState } from "./zerotierInterface";
export type ZerotierInterface = import("./zerotierInterface").ZerotierInterface;
export const ZerotierInterface: typeof import("./zerotierInterface").ZerotierInterface = null as any;
utilities.lazyLoad(exports, ["ZerotierInterface"], () => require("./zerotierInterface"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "routeros:index/bridge:Bridge":
                return new Bridge(name, <any>undefined, { urn })
            case "routeros:index/bridgeMlag:BridgeMlag":
                return new BridgeMlag(name, <any>undefined, { urn })
            case "routeros:index/bridgePort:BridgePort":
                return new BridgePort(name, <any>undefined, { urn })
            case "routeros:index/bridgeVlan:BridgeVlan":
                return new BridgeVlan(name, <any>undefined, { urn })
            case "routeros:index/capsmanAaa:CapsmanAaa":
                return new CapsmanAaa(name, <any>undefined, { urn })
            case "routeros:index/capsmanAccessList:CapsmanAccessList":
                return new CapsmanAccessList(name, <any>undefined, { urn })
            case "routeros:index/capsmanChannel:CapsmanChannel":
                return new CapsmanChannel(name, <any>undefined, { urn })
            case "routeros:index/capsmanConfiguration:CapsmanConfiguration":
                return new CapsmanConfiguration(name, <any>undefined, { urn })
            case "routeros:index/capsmanDatapath:CapsmanDatapath":
                return new CapsmanDatapath(name, <any>undefined, { urn })
            case "routeros:index/capsmanInterface:CapsmanInterface":
                return new CapsmanInterface(name, <any>undefined, { urn })
            case "routeros:index/capsmanManager:CapsmanManager":
                return new CapsmanManager(name, <any>undefined, { urn })
            case "routeros:index/capsmanManagerInterface:CapsmanManagerInterface":
                return new CapsmanManagerInterface(name, <any>undefined, { urn })
            case "routeros:index/capsmanProvisioning:CapsmanProvisioning":
                return new CapsmanProvisioning(name, <any>undefined, { urn })
            case "routeros:index/capsmanRates:CapsmanRates":
                return new CapsmanRates(name, <any>undefined, { urn })
            case "routeros:index/capsmanSecurity:CapsmanSecurity":
                return new CapsmanSecurity(name, <any>undefined, { urn })
            case "routeros:index/certificateScepServer:CertificateScepServer":
                return new CertificateScepServer(name, <any>undefined, { urn })
            case "routeros:index/container:Container":
                return new Container(name, <any>undefined, { urn })
            case "routeros:index/containerConfig:ContainerConfig":
                return new ContainerConfig(name, <any>undefined, { urn })
            case "routeros:index/containerEnvs:ContainerEnvs":
                return new ContainerEnvs(name, <any>undefined, { urn })
            case "routeros:index/containerMounts:ContainerMounts":
                return new ContainerMounts(name, <any>undefined, { urn })
            case "routeros:index/dhcpClient:DhcpClient":
                return new DhcpClient(name, <any>undefined, { urn })
            case "routeros:index/dhcpClientOption:DhcpClientOption":
                return new DhcpClientOption(name, <any>undefined, { urn })
            case "routeros:index/dhcpServer:DhcpServer":
                return new DhcpServer(name, <any>undefined, { urn })
            case "routeros:index/dhcpServerLease:DhcpServerLease":
                return new DhcpServerLease(name, <any>undefined, { urn })
            case "routeros:index/dhcpServerNetwork:DhcpServerNetwork":
                return new DhcpServerNetwork(name, <any>undefined, { urn })
            case "routeros:index/dns:Dns":
                return new Dns(name, <any>undefined, { urn })
            case "routeros:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "routeros:index/file:File":
                return new File(name, <any>undefined, { urn })
            case "routeros:index/firewallAddrList:FirewallAddrList":
                return new FirewallAddrList(name, <any>undefined, { urn })
            case "routeros:index/firewallFilter:FirewallFilter":
                return new FirewallFilter(name, <any>undefined, { urn })
            case "routeros:index/firewallMangle:FirewallMangle":
                return new FirewallMangle(name, <any>undefined, { urn })
            case "routeros:index/firewallNat:FirewallNat":
                return new FirewallNat(name, <any>undefined, { urn })
            case "routeros:index/gre:Gre":
                return new Gre(name, <any>undefined, { urn })
            case "routeros:index/identity:Identity":
                return new Identity(name, <any>undefined, { urn })
            case "routeros:index/interface6to4:Interface6to4":
                return new Interface6to4(name, <any>undefined, { urn })
            case "routeros:index/interfaceBonding:InterfaceBonding":
                return new InterfaceBonding(name, <any>undefined, { urn })
            case "routeros:index/interfaceBridge:InterfaceBridge":
                return new InterfaceBridge(name, <any>undefined, { urn })
            case "routeros:index/interfaceBridgePort:InterfaceBridgePort":
                return new InterfaceBridgePort(name, <any>undefined, { urn })
            case "routeros:index/interfaceBridgeSettings:InterfaceBridgeSettings":
                return new InterfaceBridgeSettings(name, <any>undefined, { urn })
            case "routeros:index/interfaceBridgeVlan:InterfaceBridgeVlan":
                return new InterfaceBridgeVlan(name, <any>undefined, { urn })
            case "routeros:index/interfaceDot1xClient:InterfaceDot1xClient":
                return new InterfaceDot1xClient(name, <any>undefined, { urn })
            case "routeros:index/interfaceDot1xServer:InterfaceDot1xServer":
                return new InterfaceDot1xServer(name, <any>undefined, { urn })
            case "routeros:index/interfaceEoip:InterfaceEoip":
                return new InterfaceEoip(name, <any>undefined, { urn })
            case "routeros:index/interfaceEthernet:InterfaceEthernet":
                return new InterfaceEthernet(name, <any>undefined, { urn })
            case "routeros:index/interfaceEthernetSwitch:InterfaceEthernetSwitch":
                return new InterfaceEthernetSwitch(name, <any>undefined, { urn })
            case "routeros:index/interfaceEthernetSwitchHost:InterfaceEthernetSwitchHost":
                return new InterfaceEthernetSwitchHost(name, <any>undefined, { urn })
            case "routeros:index/interfaceEthernetSwitchPort:InterfaceEthernetSwitchPort":
                return new InterfaceEthernetSwitchPort(name, <any>undefined, { urn })
            case "routeros:index/interfaceEthernetSwitchPortIsolation:InterfaceEthernetSwitchPortIsolation":
                return new InterfaceEthernetSwitchPortIsolation(name, <any>undefined, { urn })
            case "routeros:index/interfaceEthernetSwitchRule:InterfaceEthernetSwitchRule":
                return new InterfaceEthernetSwitchRule(name, <any>undefined, { urn })
            case "routeros:index/interfaceEthernetSwitchVlan:InterfaceEthernetSwitchVlan":
                return new InterfaceEthernetSwitchVlan(name, <any>undefined, { urn })
            case "routeros:index/interfaceGre:InterfaceGre":
                return new InterfaceGre(name, <any>undefined, { urn })
            case "routeros:index/interfaceIpip:InterfaceIpip":
                return new InterfaceIpip(name, <any>undefined, { urn })
            case "routeros:index/interfaceList:InterfaceList":
                return new InterfaceList(name, <any>undefined, { urn })
            case "routeros:index/interfaceListMember:InterfaceListMember":
                return new InterfaceListMember(name, <any>undefined, { urn })
            case "routeros:index/interfaceLte:InterfaceLte":
                return new InterfaceLte(name, <any>undefined, { urn })
            case "routeros:index/interfaceLteApn:InterfaceLteApn":
                return new InterfaceLteApn(name, <any>undefined, { urn })
            case "routeros:index/interfaceMacvlan:InterfaceMacvlan":
                return new InterfaceMacvlan(name, <any>undefined, { urn })
            case "routeros:index/interfaceOvpnClient:InterfaceOvpnClient":
                return new InterfaceOvpnClient(name, <any>undefined, { urn })
            case "routeros:index/interfaceOvpnServer:InterfaceOvpnServer":
                return new InterfaceOvpnServer(name, <any>undefined, { urn })
            case "routeros:index/interfacePppoeClient:InterfacePppoeClient":
                return new InterfacePppoeClient(name, <any>undefined, { urn })
            case "routeros:index/interfaceVeth:InterfaceVeth":
                return new InterfaceVeth(name, <any>undefined, { urn })
            case "routeros:index/interfaceVlan:InterfaceVlan":
                return new InterfaceVlan(name, <any>undefined, { urn })
            case "routeros:index/interfaceVrrp:InterfaceVrrp":
                return new InterfaceVrrp(name, <any>undefined, { urn })
            case "routeros:index/interfaceVxlan:InterfaceVxlan":
                return new InterfaceVxlan(name, <any>undefined, { urn })
            case "routeros:index/interfaceVxlanVteps:InterfaceVxlanVteps":
                return new InterfaceVxlanVteps(name, <any>undefined, { urn })
            case "routeros:index/interfaceWireguard:InterfaceWireguard":
                return new InterfaceWireguard(name, <any>undefined, { urn })
            case "routeros:index/interfaceWireguardPeer:InterfaceWireguardPeer":
                return new InterfaceWireguardPeer(name, <any>undefined, { urn })
            case "routeros:index/interfaceWireless:InterfaceWireless":
                return new InterfaceWireless(name, <any>undefined, { urn })
            case "routeros:index/interfaceWirelessAccessList:InterfaceWirelessAccessList":
                return new InterfaceWirelessAccessList(name, <any>undefined, { urn })
            case "routeros:index/interfaceWirelessCap:InterfaceWirelessCap":
                return new InterfaceWirelessCap(name, <any>undefined, { urn })
            case "routeros:index/interfaceWirelessConnectList:InterfaceWirelessConnectList":
                return new InterfaceWirelessConnectList(name, <any>undefined, { urn })
            case "routeros:index/interfaceWirelessSecurityProfiles:InterfaceWirelessSecurityProfiles":
                return new InterfaceWirelessSecurityProfiles(name, <any>undefined, { urn })
            case "routeros:index/ipAddress:IpAddress":
                return new IpAddress(name, <any>undefined, { urn })
            case "routeros:index/ipCloud:IpCloud":
                return new IpCloud(name, <any>undefined, { urn })
            case "routeros:index/ipCloudAdvanced:IpCloudAdvanced":
                return new IpCloudAdvanced(name, <any>undefined, { urn })
            case "routeros:index/ipDhcpClient:IpDhcpClient":
                return new IpDhcpClient(name, <any>undefined, { urn })
            case "routeros:index/ipDhcpClientOption:IpDhcpClientOption":
                return new IpDhcpClientOption(name, <any>undefined, { urn })
            case "routeros:index/ipDhcpRelay:IpDhcpRelay":
                return new IpDhcpRelay(name, <any>undefined, { urn })
            case "routeros:index/ipDhcpServer:IpDhcpServer":
                return new IpDhcpServer(name, <any>undefined, { urn })
            case "routeros:index/ipDhcpServerConfig:IpDhcpServerConfig":
                return new IpDhcpServerConfig(name, <any>undefined, { urn })
            case "routeros:index/ipDhcpServerLease:IpDhcpServerLease":
                return new IpDhcpServerLease(name, <any>undefined, { urn })
            case "routeros:index/ipDhcpServerNetwork:IpDhcpServerNetwork":
                return new IpDhcpServerNetwork(name, <any>undefined, { urn })
            case "routeros:index/ipDhcpServerOption:IpDhcpServerOption":
                return new IpDhcpServerOption(name, <any>undefined, { urn })
            case "routeros:index/ipDhcpServerOptionSet:IpDhcpServerOptionSet":
                return new IpDhcpServerOptionSet(name, <any>undefined, { urn })
            case "routeros:index/ipDns:IpDns":
                return new IpDns(name, <any>undefined, { urn })
            case "routeros:index/ipDnsAdlist:IpDnsAdlist":
                return new IpDnsAdlist(name, <any>undefined, { urn })
            case "routeros:index/ipDnsRecord:IpDnsRecord":
                return new IpDnsRecord(name, <any>undefined, { urn })
            case "routeros:index/ipFirewallAddrList:IpFirewallAddrList":
                return new IpFirewallAddrList(name, <any>undefined, { urn })
            case "routeros:index/ipFirewallConnectionTracking:IpFirewallConnectionTracking":
                return new IpFirewallConnectionTracking(name, <any>undefined, { urn })
            case "routeros:index/ipFirewallFilter:IpFirewallFilter":
                return new IpFirewallFilter(name, <any>undefined, { urn })
            case "routeros:index/ipFirewallMangle:IpFirewallMangle":
                return new IpFirewallMangle(name, <any>undefined, { urn })
            case "routeros:index/ipFirewallNat:IpFirewallNat":
                return new IpFirewallNat(name, <any>undefined, { urn })
            case "routeros:index/ipFirewallRaw:IpFirewallRaw":
                return new IpFirewallRaw(name, <any>undefined, { urn })
            case "routeros:index/ipHotspot:IpHotspot":
                return new IpHotspot(name, <any>undefined, { urn })
            case "routeros:index/ipHotspotIpBinding:IpHotspotIpBinding":
                return new IpHotspotIpBinding(name, <any>undefined, { urn })
            case "routeros:index/ipHotspotProfile:IpHotspotProfile":
                return new IpHotspotProfile(name, <any>undefined, { urn })
            case "routeros:index/ipHotspotServicePort:IpHotspotServicePort":
                return new IpHotspotServicePort(name, <any>undefined, { urn })
            case "routeros:index/ipHotspotUser:IpHotspotUser":
                return new IpHotspotUser(name, <any>undefined, { urn })
            case "routeros:index/ipHotspotUserProfile:IpHotspotUserProfile":
                return new IpHotspotUserProfile(name, <any>undefined, { urn })
            case "routeros:index/ipHotspotWalledGarden:IpHotspotWalledGarden":
                return new IpHotspotWalledGarden(name, <any>undefined, { urn })
            case "routeros:index/ipHotspotWalledGardenIp:IpHotspotWalledGardenIp":
                return new IpHotspotWalledGardenIp(name, <any>undefined, { urn })
            case "routeros:index/ipIpsecIdentity:IpIpsecIdentity":
                return new IpIpsecIdentity(name, <any>undefined, { urn })
            case "routeros:index/ipIpsecKey:IpIpsecKey":
                return new IpIpsecKey(name, <any>undefined, { urn })
            case "routeros:index/ipIpsecModeConfig:IpIpsecModeConfig":
                return new IpIpsecModeConfig(name, <any>undefined, { urn })
            case "routeros:index/ipIpsecPeer:IpIpsecPeer":
                return new IpIpsecPeer(name, <any>undefined, { urn })
            case "routeros:index/ipIpsecPolicy:IpIpsecPolicy":
                return new IpIpsecPolicy(name, <any>undefined, { urn })
            case "routeros:index/ipIpsecPolicyGroup:IpIpsecPolicyGroup":
                return new IpIpsecPolicyGroup(name, <any>undefined, { urn })
            case "routeros:index/ipIpsecProfile:IpIpsecProfile":
                return new IpIpsecProfile(name, <any>undefined, { urn })
            case "routeros:index/ipIpsecProposal:IpIpsecProposal":
                return new IpIpsecProposal(name, <any>undefined, { urn })
            case "routeros:index/ipIpsecSettings:IpIpsecSettings":
                return new IpIpsecSettings(name, <any>undefined, { urn })
            case "routeros:index/ipNeighborDiscoverySettings:IpNeighborDiscoverySettings":
                return new IpNeighborDiscoverySettings(name, <any>undefined, { urn })
            case "routeros:index/ipPool:IpPool":
                return new IpPool(name, <any>undefined, { urn })
            case "routeros:index/ipRoute:IpRoute":
                return new IpRoute(name, <any>undefined, { urn })
            case "routeros:index/ipService:IpService":
                return new IpService(name, <any>undefined, { urn })
            case "routeros:index/ipSshServer:IpSshServer":
                return new IpSshServer(name, <any>undefined, { urn })
            case "routeros:index/ipUpnp:IpUpnp":
                return new IpUpnp(name, <any>undefined, { urn })
            case "routeros:index/ipUpnpInterfaces:IpUpnpInterfaces":
                return new IpUpnpInterfaces(name, <any>undefined, { urn })
            case "routeros:index/ipVrf:IpVrf":
                return new IpVrf(name, <any>undefined, { urn })
            case "routeros:index/ipip:Ipip":
                return new Ipip(name, <any>undefined, { urn })
            case "routeros:index/ipv6Address:Ipv6Address":
                return new Ipv6Address(name, <any>undefined, { urn })
            case "routeros:index/ipv6DhcpClient:Ipv6DhcpClient":
                return new Ipv6DhcpClient(name, <any>undefined, { urn })
            case "routeros:index/ipv6DhcpClientOption:Ipv6DhcpClientOption":
                return new Ipv6DhcpClientOption(name, <any>undefined, { urn })
            case "routeros:index/ipv6DhcpServer:Ipv6DhcpServer":
                return new Ipv6DhcpServer(name, <any>undefined, { urn })
            case "routeros:index/ipv6DhcpServerOption:Ipv6DhcpServerOption":
                return new Ipv6DhcpServerOption(name, <any>undefined, { urn })
            case "routeros:index/ipv6DhcpServerOptionSets:Ipv6DhcpServerOptionSets":
                return new Ipv6DhcpServerOptionSets(name, <any>undefined, { urn })
            case "routeros:index/ipv6FirewallAddrList:Ipv6FirewallAddrList":
                return new Ipv6FirewallAddrList(name, <any>undefined, { urn })
            case "routeros:index/ipv6FirewallFilter:Ipv6FirewallFilter":
                return new Ipv6FirewallFilter(name, <any>undefined, { urn })
            case "routeros:index/ipv6NeighborDiscovery:Ipv6NeighborDiscovery":
                return new Ipv6NeighborDiscovery(name, <any>undefined, { urn })
            case "routeros:index/ipv6Pool:Ipv6Pool":
                return new Ipv6Pool(name, <any>undefined, { urn })
            case "routeros:index/ipv6Route:Ipv6Route":
                return new Ipv6Route(name, <any>undefined, { urn })
            case "routeros:index/ipv6Settings:Ipv6Settings":
                return new Ipv6Settings(name, <any>undefined, { urn })
            case "routeros:index/moveItems:MoveItems":
                return new MoveItems(name, <any>undefined, { urn })
            case "routeros:index/ovpnServer:OvpnServer":
                return new OvpnServer(name, <any>undefined, { urn })
            case "routeros:index/pppAaa:PppAaa":
                return new PppAaa(name, <any>undefined, { urn })
            case "routeros:index/pppProfile:PppProfile":
                return new PppProfile(name, <any>undefined, { urn })
            case "routeros:index/pppSecret:PppSecret":
                return new PppSecret(name, <any>undefined, { urn })
            case "routeros:index/radius:Radius":
                return new Radius(name, <any>undefined, { urn })
            case "routeros:index/radiusIncoming:RadiusIncoming":
                return new RadiusIncoming(name, <any>undefined, { urn })
            case "routeros:index/routingBgpConnection:RoutingBgpConnection":
                return new RoutingBgpConnection(name, <any>undefined, { urn })
            case "routeros:index/routingBgpTemplate:RoutingBgpTemplate":
                return new RoutingBgpTemplate(name, <any>undefined, { urn })
            case "routeros:index/routingFilterRule:RoutingFilterRule":
                return new RoutingFilterRule(name, <any>undefined, { urn })
            case "routeros:index/routingOspfArea:RoutingOspfArea":
                return new RoutingOspfArea(name, <any>undefined, { urn })
            case "routeros:index/routingOspfInstance:RoutingOspfInstance":
                return new RoutingOspfInstance(name, <any>undefined, { urn })
            case "routeros:index/routingOspfInterfaceTemplate:RoutingOspfInterfaceTemplate":
                return new RoutingOspfInterfaceTemplate(name, <any>undefined, { urn })
            case "routeros:index/routingRule:RoutingRule":
                return new RoutingRule(name, <any>undefined, { urn })
            case "routeros:index/routingTable:RoutingTable":
                return new RoutingTable(name, <any>undefined, { urn })
            case "routeros:index/scheduler:Scheduler":
                return new Scheduler(name, <any>undefined, { urn })
            case "routeros:index/snmp:Snmp":
                return new Snmp(name, <any>undefined, { urn })
            case "routeros:index/snmpCommunity:SnmpCommunity":
                return new SnmpCommunity(name, <any>undefined, { urn })
            case "routeros:index/systemCertificate:SystemCertificate":
                return new SystemCertificate(name, <any>undefined, { urn })
            case "routeros:index/systemCertificateScepServer:SystemCertificateScepServer":
                return new SystemCertificateScepServer(name, <any>undefined, { urn })
            case "routeros:index/systemClock:SystemClock":
                return new SystemClock(name, <any>undefined, { urn })
            case "routeros:index/systemIdentity:SystemIdentity":
                return new SystemIdentity(name, <any>undefined, { urn })
            case "routeros:index/systemLed:SystemLed":
                return new SystemLed(name, <any>undefined, { urn })
            case "routeros:index/systemLedSettings:SystemLedSettings":
                return new SystemLedSettings(name, <any>undefined, { urn })
            case "routeros:index/systemLogging:SystemLogging":
                return new SystemLogging(name, <any>undefined, { urn })
            case "routeros:index/systemLoggingAction:SystemLoggingAction":
                return new SystemLoggingAction(name, <any>undefined, { urn })
            case "routeros:index/systemNtpClient:SystemNtpClient":
                return new SystemNtpClient(name, <any>undefined, { urn })
            case "routeros:index/systemNtpServer:SystemNtpServer":
                return new SystemNtpServer(name, <any>undefined, { urn })
            case "routeros:index/systemRouterboardButtonMode:SystemRouterboardButtonMode":
                return new SystemRouterboardButtonMode(name, <any>undefined, { urn })
            case "routeros:index/systemRouterboardButtonReset:SystemRouterboardButtonReset":
                return new SystemRouterboardButtonReset(name, <any>undefined, { urn })
            case "routeros:index/systemRouterboardButtonWps:SystemRouterboardButtonWps":
                return new SystemRouterboardButtonWps(name, <any>undefined, { urn })
            case "routeros:index/systemRouterboardSettings:SystemRouterboardSettings":
                return new SystemRouterboardSettings(name, <any>undefined, { urn })
            case "routeros:index/systemRouterboardUsb:SystemRouterboardUsb":
                return new SystemRouterboardUsb(name, <any>undefined, { urn })
            case "routeros:index/systemScheduler:SystemScheduler":
                return new SystemScheduler(name, <any>undefined, { urn })
            case "routeros:index/systemScript:SystemScript":
                return new SystemScript(name, <any>undefined, { urn })
            case "routeros:index/systemUser:SystemUser":
                return new SystemUser(name, <any>undefined, { urn })
            case "routeros:index/systemUserAaa:SystemUserAaa":
                return new SystemUserAaa(name, <any>undefined, { urn })
            case "routeros:index/systemUserGroup:SystemUserGroup":
                return new SystemUserGroup(name, <any>undefined, { urn })
            case "routeros:index/systemUserSettings:SystemUserSettings":
                return new SystemUserSettings(name, <any>undefined, { urn })
            case "routeros:index/toolBandwidthServer:ToolBandwidthServer":
                return new ToolBandwidthServer(name, <any>undefined, { urn })
            case "routeros:index/toolMacServer:ToolMacServer":
                return new ToolMacServer(name, <any>undefined, { urn })
            case "routeros:index/toolMacServerWinbox:ToolMacServerWinbox":
                return new ToolMacServerWinbox(name, <any>undefined, { urn })
            case "routeros:index/toolNetwatch:ToolNetwatch":
                return new ToolNetwatch(name, <any>undefined, { urn })
            case "routeros:index/toolSniffer:ToolSniffer":
                return new ToolSniffer(name, <any>undefined, { urn })
            case "routeros:index/userManagerAdvanced:UserManagerAdvanced":
                return new UserManagerAdvanced(name, <any>undefined, { urn })
            case "routeros:index/userManagerAttribute:UserManagerAttribute":
                return new UserManagerAttribute(name, <any>undefined, { urn })
            case "routeros:index/userManagerDatabase:UserManagerDatabase":
                return new UserManagerDatabase(name, <any>undefined, { urn })
            case "routeros:index/userManagerLimitation:UserManagerLimitation":
                return new UserManagerLimitation(name, <any>undefined, { urn })
            case "routeros:index/userManagerProfile:UserManagerProfile":
                return new UserManagerProfile(name, <any>undefined, { urn })
            case "routeros:index/userManagerProfileLimitation:UserManagerProfileLimitation":
                return new UserManagerProfileLimitation(name, <any>undefined, { urn })
            case "routeros:index/userManagerRouter:UserManagerRouter":
                return new UserManagerRouter(name, <any>undefined, { urn })
            case "routeros:index/userManagerSettings:UserManagerSettings":
                return new UserManagerSettings(name, <any>undefined, { urn })
            case "routeros:index/userManagerUser:UserManagerUser":
                return new UserManagerUser(name, <any>undefined, { urn })
            case "routeros:index/userManagerUserGroup:UserManagerUserGroup":
                return new UserManagerUserGroup(name, <any>undefined, { urn })
            case "routeros:index/userManagerUserProfile:UserManagerUserProfile":
                return new UserManagerUserProfile(name, <any>undefined, { urn })
            case "routeros:index/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            case "routeros:index/vrrp:Vrrp":
                return new Vrrp(name, <any>undefined, { urn })
            case "routeros:index/wifi:Wifi":
                return new Wifi(name, <any>undefined, { urn })
            case "routeros:index/wifiAaa:WifiAaa":
                return new WifiAaa(name, <any>undefined, { urn })
            case "routeros:index/wifiAccessList:WifiAccessList":
                return new WifiAccessList(name, <any>undefined, { urn })
            case "routeros:index/wifiCap:WifiCap":
                return new WifiCap(name, <any>undefined, { urn })
            case "routeros:index/wifiCapsman:WifiCapsman":
                return new WifiCapsman(name, <any>undefined, { urn })
            case "routeros:index/wifiChannel:WifiChannel":
                return new WifiChannel(name, <any>undefined, { urn })
            case "routeros:index/wifiConfiguration:WifiConfiguration":
                return new WifiConfiguration(name, <any>undefined, { urn })
            case "routeros:index/wifiDatapath:WifiDatapath":
                return new WifiDatapath(name, <any>undefined, { urn })
            case "routeros:index/wifiInterworking:WifiInterworking":
                return new WifiInterworking(name, <any>undefined, { urn })
            case "routeros:index/wifiProvisioning:WifiProvisioning":
                return new WifiProvisioning(name, <any>undefined, { urn })
            case "routeros:index/wifiSecurity:WifiSecurity":
                return new WifiSecurity(name, <any>undefined, { urn })
            case "routeros:index/wifiSteering:WifiSteering":
                return new WifiSteering(name, <any>undefined, { urn })
            case "routeros:index/wireguard:Wireguard":
                return new Wireguard(name, <any>undefined, { urn })
            case "routeros:index/wireguardKeys:WireguardKeys":
                return new WireguardKeys(name, <any>undefined, { urn })
            case "routeros:index/wireguardPeer:WireguardPeer":
                return new WireguardPeer(name, <any>undefined, { urn })
            case "routeros:index/zerotier:Zerotier":
                return new Zerotier(name, <any>undefined, { urn })
            case "routeros:index/zerotierController:ZerotierController":
                return new ZerotierController(name, <any>undefined, { urn })
            case "routeros:index/zerotierInterface:ZerotierInterface":
                return new ZerotierInterface(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("routeros", "index/bridge", _module)
pulumi.runtime.registerResourceModule("routeros", "index/bridgeMlag", _module)
pulumi.runtime.registerResourceModule("routeros", "index/bridgePort", _module)
pulumi.runtime.registerResourceModule("routeros", "index/bridgeVlan", _module)
pulumi.runtime.registerResourceModule("routeros", "index/capsmanAaa", _module)
pulumi.runtime.registerResourceModule("routeros", "index/capsmanAccessList", _module)
pulumi.runtime.registerResourceModule("routeros", "index/capsmanChannel", _module)
pulumi.runtime.registerResourceModule("routeros", "index/capsmanConfiguration", _module)
pulumi.runtime.registerResourceModule("routeros", "index/capsmanDatapath", _module)
pulumi.runtime.registerResourceModule("routeros", "index/capsmanInterface", _module)
pulumi.runtime.registerResourceModule("routeros", "index/capsmanManager", _module)
pulumi.runtime.registerResourceModule("routeros", "index/capsmanManagerInterface", _module)
pulumi.runtime.registerResourceModule("routeros", "index/capsmanProvisioning", _module)
pulumi.runtime.registerResourceModule("routeros", "index/capsmanRates", _module)
pulumi.runtime.registerResourceModule("routeros", "index/capsmanSecurity", _module)
pulumi.runtime.registerResourceModule("routeros", "index/certificateScepServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/container", _module)
pulumi.runtime.registerResourceModule("routeros", "index/containerConfig", _module)
pulumi.runtime.registerResourceModule("routeros", "index/containerEnvs", _module)
pulumi.runtime.registerResourceModule("routeros", "index/containerMounts", _module)
pulumi.runtime.registerResourceModule("routeros", "index/dhcpClient", _module)
pulumi.runtime.registerResourceModule("routeros", "index/dhcpClientOption", _module)
pulumi.runtime.registerResourceModule("routeros", "index/dhcpServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/dhcpServerLease", _module)
pulumi.runtime.registerResourceModule("routeros", "index/dhcpServerNetwork", _module)
pulumi.runtime.registerResourceModule("routeros", "index/dns", _module)
pulumi.runtime.registerResourceModule("routeros", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("routeros", "index/file", _module)
pulumi.runtime.registerResourceModule("routeros", "index/firewallAddrList", _module)
pulumi.runtime.registerResourceModule("routeros", "index/firewallFilter", _module)
pulumi.runtime.registerResourceModule("routeros", "index/firewallMangle", _module)
pulumi.runtime.registerResourceModule("routeros", "index/firewallNat", _module)
pulumi.runtime.registerResourceModule("routeros", "index/gre", _module)
pulumi.runtime.registerResourceModule("routeros", "index/identity", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interface6to4", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceBonding", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceBridge", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceBridgePort", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceBridgeSettings", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceBridgeVlan", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceDot1xClient", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceDot1xServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEoip", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernet", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitch", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitchHost", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitchPort", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitchPortIsolation", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitchRule", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceEthernetSwitchVlan", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceGre", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceIpip", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceList", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceListMember", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceLte", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceLteApn", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceMacvlan", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceOvpnClient", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceOvpnServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfacePppoeClient", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceVeth", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceVlan", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceVrrp", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceVxlan", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceVxlanVteps", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWireguard", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWireguardPeer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWireless", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWirelessAccessList", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWirelessCap", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWirelessConnectList", _module)
pulumi.runtime.registerResourceModule("routeros", "index/interfaceWirelessSecurityProfiles", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipAddress", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipCloud", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipCloudAdvanced", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpClient", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpClientOption", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpRelay", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServerConfig", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServerLease", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServerNetwork", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServerOption", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDhcpServerOptionSet", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDns", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDnsAdlist", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipDnsRecord", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallAddrList", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallConnectionTracking", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallFilter", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallMangle", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallNat", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipFirewallRaw", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspot", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotIpBinding", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotProfile", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotServicePort", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotUser", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotUserProfile", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotWalledGarden", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipHotspotWalledGardenIp", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecIdentity", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecKey", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecModeConfig", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecPeer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecPolicy", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecPolicyGroup", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecProfile", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecProposal", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipIpsecSettings", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipNeighborDiscoverySettings", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipPool", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipRoute", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipService", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipSshServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipUpnp", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipUpnpInterfaces", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipVrf", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipip", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6Address", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6DhcpClient", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6DhcpClientOption", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6DhcpServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6DhcpServerOption", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6DhcpServerOptionSets", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6FirewallAddrList", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6FirewallFilter", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6NeighborDiscovery", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6Pool", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6Route", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ipv6Settings", _module)
pulumi.runtime.registerResourceModule("routeros", "index/moveItems", _module)
pulumi.runtime.registerResourceModule("routeros", "index/ovpnServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/pppAaa", _module)
pulumi.runtime.registerResourceModule("routeros", "index/pppProfile", _module)
pulumi.runtime.registerResourceModule("routeros", "index/pppSecret", _module)
pulumi.runtime.registerResourceModule("routeros", "index/radius", _module)
pulumi.runtime.registerResourceModule("routeros", "index/radiusIncoming", _module)
pulumi.runtime.registerResourceModule("routeros", "index/routingBgpConnection", _module)
pulumi.runtime.registerResourceModule("routeros", "index/routingBgpTemplate", _module)
pulumi.runtime.registerResourceModule("routeros", "index/routingFilterRule", _module)
pulumi.runtime.registerResourceModule("routeros", "index/routingOspfArea", _module)
pulumi.runtime.registerResourceModule("routeros", "index/routingOspfInstance", _module)
pulumi.runtime.registerResourceModule("routeros", "index/routingOspfInterfaceTemplate", _module)
pulumi.runtime.registerResourceModule("routeros", "index/routingRule", _module)
pulumi.runtime.registerResourceModule("routeros", "index/routingTable", _module)
pulumi.runtime.registerResourceModule("routeros", "index/scheduler", _module)
pulumi.runtime.registerResourceModule("routeros", "index/snmp", _module)
pulumi.runtime.registerResourceModule("routeros", "index/snmpCommunity", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemCertificate", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemCertificateScepServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemClock", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemIdentity", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemLed", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemLedSettings", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemLogging", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemLoggingAction", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemNtpClient", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemNtpServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemRouterboardButtonMode", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemRouterboardButtonReset", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemRouterboardButtonWps", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemRouterboardSettings", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemRouterboardUsb", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemScheduler", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemScript", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemUser", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemUserAaa", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemUserGroup", _module)
pulumi.runtime.registerResourceModule("routeros", "index/systemUserSettings", _module)
pulumi.runtime.registerResourceModule("routeros", "index/toolBandwidthServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/toolMacServer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/toolMacServerWinbox", _module)
pulumi.runtime.registerResourceModule("routeros", "index/toolNetwatch", _module)
pulumi.runtime.registerResourceModule("routeros", "index/toolSniffer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/userManagerAdvanced", _module)
pulumi.runtime.registerResourceModule("routeros", "index/userManagerAttribute", _module)
pulumi.runtime.registerResourceModule("routeros", "index/userManagerDatabase", _module)
pulumi.runtime.registerResourceModule("routeros", "index/userManagerLimitation", _module)
pulumi.runtime.registerResourceModule("routeros", "index/userManagerProfile", _module)
pulumi.runtime.registerResourceModule("routeros", "index/userManagerProfileLimitation", _module)
pulumi.runtime.registerResourceModule("routeros", "index/userManagerRouter", _module)
pulumi.runtime.registerResourceModule("routeros", "index/userManagerSettings", _module)
pulumi.runtime.registerResourceModule("routeros", "index/userManagerUser", _module)
pulumi.runtime.registerResourceModule("routeros", "index/userManagerUserGroup", _module)
pulumi.runtime.registerResourceModule("routeros", "index/userManagerUserProfile", _module)
pulumi.runtime.registerResourceModule("routeros", "index/vlan", _module)
pulumi.runtime.registerResourceModule("routeros", "index/vrrp", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifi", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifiAaa", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifiAccessList", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifiCap", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifiCapsman", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifiChannel", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifiConfiguration", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifiDatapath", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifiInterworking", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifiProvisioning", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifiSecurity", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wifiSteering", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wireguard", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wireguardKeys", _module)
pulumi.runtime.registerResourceModule("routeros", "index/wireguardPeer", _module)
pulumi.runtime.registerResourceModule("routeros", "index/zerotier", _module)
pulumi.runtime.registerResourceModule("routeros", "index/zerotierController", _module)
pulumi.runtime.registerResourceModule("routeros", "index/zerotierInterface", _module)
pulumi.runtime.registerResourcePackage("routeros", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:routeros") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
