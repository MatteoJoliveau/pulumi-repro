// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class InterfaceEthernetSwitch extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceEthernetSwitch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceEthernetSwitchState, opts?: pulumi.CustomResourceOptions): InterfaceEthernetSwitch {
        return new InterfaceEthernetSwitch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/interfaceEthernetSwitch:InterfaceEthernetSwitch';

    /**
     * Returns true if the given object is an instance of InterfaceEthernetSwitch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceEthernetSwitch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceEthernetSwitch.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___skip_!: pulumi.Output<string | undefined>;
    /**
     * All switch chips have a special port that is called switchX-cpu, this is the CPU port for a switch chip, it is meant to
     * forward traffic from a switch chip to the CPU, such a port is required for management traffic and for routing features.
     * By default the switch chip ensures that this special CPU port is not congested and sends out Pause Frames when link
     * capacity is exceeded to make sure the port is not oversaturated, this feature is called CPU Flow Control. Without this
     * feature packets that might be crucial for routing or management purposes might get dropped.
     */
    public readonly cpuFlowControl!: pulumi.Output<boolean | undefined>;
    public readonly interfaceEthernetSwitchId!: pulumi.Output<string>;
    public /*out*/ readonly invalid!: pulumi.Output<boolean>;
    /**
     * Layer 3 Hardware Offloading (L3HW, otherwise known as IP switching or HW routing) allows to offload some router features
     * onto the switch chip. This allows reaching wire speeds when routing packets, which simply would not be possible with the
     * CPU.
     */
    public readonly l3HwOffloading!: pulumi.Output<boolean | undefined>;
    /**
     * Selects a single mirroring egress target port, only available on 88E6393X, 88E6191X and 88E6190 switch chips. Mirrored
     * packets from `mirror-egress` (see the property in port menu) will be sent to the selected port.
     */
    public readonly mirrorEgressTarget!: pulumi.Output<string | undefined>;
    /**
     * Selects a single mirroring source port. Ingress and egress traffic will be sent to the mirror-target port. Note that
     * mirror-target port has to belong to the same switch (see which port belongs to which switch in /interface ethernet
     * menu).
     */
    public readonly mirrorSource!: pulumi.Output<string | undefined>;
    /**
     * Selects a single mirroring target port. Mirrored packets from mirror-source and mirror (see the property in rule and
     * host table) will be sent to the selected port.
     */
    public readonly mirrorTarget!: pulumi.Output<string | undefined>;
    /**
     * Name of the switch.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Switch-chip id. Default .id = *0
     */
    public readonly switchId!: pulumi.Output<string | undefined>;
    /**
     * Switch-chip type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a InterfaceEthernetSwitch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: InterfaceEthernetSwitchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceEthernetSwitchArgs | InterfaceEthernetSwitchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceEthernetSwitchState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["___skip_"] = state ? state.___skip_ : undefined;
            resourceInputs["cpuFlowControl"] = state ? state.cpuFlowControl : undefined;
            resourceInputs["interfaceEthernetSwitchId"] = state ? state.interfaceEthernetSwitchId : undefined;
            resourceInputs["invalid"] = state ? state.invalid : undefined;
            resourceInputs["l3HwOffloading"] = state ? state.l3HwOffloading : undefined;
            resourceInputs["mirrorEgressTarget"] = state ? state.mirrorEgressTarget : undefined;
            resourceInputs["mirrorSource"] = state ? state.mirrorSource : undefined;
            resourceInputs["mirrorTarget"] = state ? state.mirrorTarget : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["switchId"] = state ? state.switchId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as InterfaceEthernetSwitchArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["___skip_"] = args ? args.___skip_ : undefined;
            resourceInputs["cpuFlowControl"] = args ? args.cpuFlowControl : undefined;
            resourceInputs["interfaceEthernetSwitchId"] = args ? args.interfaceEthernetSwitchId : undefined;
            resourceInputs["l3HwOffloading"] = args ? args.l3HwOffloading : undefined;
            resourceInputs["mirrorEgressTarget"] = args ? args.mirrorEgressTarget : undefined;
            resourceInputs["mirrorSource"] = args ? args.mirrorSource : undefined;
            resourceInputs["mirrorTarget"] = args ? args.mirrorTarget : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["switchId"] = args ? args.switchId : undefined;
            resourceInputs["invalid"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceEthernetSwitch.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceEthernetSwitch resources.
 */
export interface InterfaceEthernetSwitchState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * All switch chips have a special port that is called switchX-cpu, this is the CPU port for a switch chip, it is meant to
     * forward traffic from a switch chip to the CPU, such a port is required for management traffic and for routing features.
     * By default the switch chip ensures that this special CPU port is not congested and sends out Pause Frames when link
     * capacity is exceeded to make sure the port is not oversaturated, this feature is called CPU Flow Control. Without this
     * feature packets that might be crucial for routing or management purposes might get dropped.
     */
    cpuFlowControl?: pulumi.Input<boolean>;
    interfaceEthernetSwitchId?: pulumi.Input<string>;
    invalid?: pulumi.Input<boolean>;
    /**
     * Layer 3 Hardware Offloading (L3HW, otherwise known as IP switching or HW routing) allows to offload some router features
     * onto the switch chip. This allows reaching wire speeds when routing packets, which simply would not be possible with the
     * CPU.
     */
    l3HwOffloading?: pulumi.Input<boolean>;
    /**
     * Selects a single mirroring egress target port, only available on 88E6393X, 88E6191X and 88E6190 switch chips. Mirrored
     * packets from `mirror-egress` (see the property in port menu) will be sent to the selected port.
     */
    mirrorEgressTarget?: pulumi.Input<string>;
    /**
     * Selects a single mirroring source port. Ingress and egress traffic will be sent to the mirror-target port. Note that
     * mirror-target port has to belong to the same switch (see which port belongs to which switch in /interface ethernet
     * menu).
     */
    mirrorSource?: pulumi.Input<string>;
    /**
     * Selects a single mirroring target port. Mirrored packets from mirror-source and mirror (see the property in rule and
     * host table) will be sent to the selected port.
     */
    mirrorTarget?: pulumi.Input<string>;
    /**
     * Name of the switch.
     */
    name?: pulumi.Input<string>;
    /**
     * Switch-chip id. Default .id = *0
     */
    switchId?: pulumi.Input<string>;
    /**
     * Switch-chip type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceEthernetSwitch resource.
 */
export interface InterfaceEthernetSwitchArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * All switch chips have a special port that is called switchX-cpu, this is the CPU port for a switch chip, it is meant to
     * forward traffic from a switch chip to the CPU, such a port is required for management traffic and for routing features.
     * By default the switch chip ensures that this special CPU port is not congested and sends out Pause Frames when link
     * capacity is exceeded to make sure the port is not oversaturated, this feature is called CPU Flow Control. Without this
     * feature packets that might be crucial for routing or management purposes might get dropped.
     */
    cpuFlowControl?: pulumi.Input<boolean>;
    interfaceEthernetSwitchId?: pulumi.Input<string>;
    /**
     * Layer 3 Hardware Offloading (L3HW, otherwise known as IP switching or HW routing) allows to offload some router features
     * onto the switch chip. This allows reaching wire speeds when routing packets, which simply would not be possible with the
     * CPU.
     */
    l3HwOffloading?: pulumi.Input<boolean>;
    /**
     * Selects a single mirroring egress target port, only available on 88E6393X, 88E6191X and 88E6190 switch chips. Mirrored
     * packets from `mirror-egress` (see the property in port menu) will be sent to the selected port.
     */
    mirrorEgressTarget?: pulumi.Input<string>;
    /**
     * Selects a single mirroring source port. Ingress and egress traffic will be sent to the mirror-target port. Note that
     * mirror-target port has to belong to the same switch (see which port belongs to which switch in /interface ethernet
     * menu).
     */
    mirrorSource?: pulumi.Input<string>;
    /**
     * Selects a single mirroring target port. Mirrored packets from mirror-source and mirror (see the property in rule and
     * host table) will be sent to the selected port.
     */
    mirrorTarget?: pulumi.Input<string>;
    /**
     * Name of the switch.
     */
    name?: pulumi.Input<string>;
    /**
     * Switch-chip id. Default .id = *0
     */
    switchId?: pulumi.Input<string>;
}
