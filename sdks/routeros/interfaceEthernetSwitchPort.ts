// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class InterfaceEthernetSwitchPort extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceEthernetSwitchPort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceEthernetSwitchPortState, opts?: pulumi.CustomResourceOptions): InterfaceEthernetSwitchPort {
        return new InterfaceEthernetSwitchPort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/interfaceEthernetSwitchPort:InterfaceEthernetSwitchPort';

    /**
     * Returns true if the given object is an instance of InterfaceEthernetSwitchPort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceEthernetSwitchPort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceEthernetSwitchPort.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___skip_!: pulumi.Output<string | undefined>;
    /**
     * Adds a VLAN tag with the specified VLAN ID on all untagged ingress traffic on a port, should be used with
     * ```vlan-header``` set to ```always-strip``` on a port to configure the port to be the access port. For hybrid ports
     * ```default-vlan-id``` is used to tag untagged traffic. If two ports have the same ```default-vlan-id```, then VLAN tag
     * is not added since the switch chip assumes that traffic is being forwarded between access ports.
     */
    public readonly defaultVlanId!: pulumi.Output<string | undefined>;
    public readonly interfaceEthernetSwitchPortId!: pulumi.Output<string>;
    public /*out*/ readonly invalid!: pulumi.Output<boolean>;
    /**
     * Whether to send egress packet copy to the `mirror-egress-target` port, only available on 88E6393X, 88E6191X and 88E6190
     * switch chips.
     */
    public readonly mirrorEgress!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to send ingress packet copy to the `mirror-ingress-target` port, only available on 88E6393X, 88E6191X and
     * 88E6190 switch chips.
     */
    public readonly mirrorIngress!: pulumi.Output<boolean | undefined>;
    /**
     * Selects a single mirroring ingress target port, only available on 88E6393X, 88E6191X and 88E6190 switch chips. Mirrored
     * packets from `mirror-ingress` will be sent to the selected port.
     */
    public readonly mirrorIngressTarget!: pulumi.Output<string | undefined>;
    /**
     * Port name.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly running!: pulumi.Output<boolean>;
    /**
     * Name of the switch.
     */
    public /*out*/ readonly switch!: pulumi.Output<string>;
    /**
     * Sets action which is performed on the port for egress traffic.
     */
    public readonly vlanHeader!: pulumi.Output<string | undefined>;
    /**
     * Changes the VLAN lookup mechanism against the VLAN Table for ingress traffic.
     */
    public readonly vlanMode!: pulumi.Output<string | undefined>;

    /**
     * Create a InterfaceEthernetSwitchPort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: InterfaceEthernetSwitchPortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceEthernetSwitchPortArgs | InterfaceEthernetSwitchPortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceEthernetSwitchPortState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["___skip_"] = state ? state.___skip_ : undefined;
            resourceInputs["defaultVlanId"] = state ? state.defaultVlanId : undefined;
            resourceInputs["interfaceEthernetSwitchPortId"] = state ? state.interfaceEthernetSwitchPortId : undefined;
            resourceInputs["invalid"] = state ? state.invalid : undefined;
            resourceInputs["mirrorEgress"] = state ? state.mirrorEgress : undefined;
            resourceInputs["mirrorIngress"] = state ? state.mirrorIngress : undefined;
            resourceInputs["mirrorIngressTarget"] = state ? state.mirrorIngressTarget : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["running"] = state ? state.running : undefined;
            resourceInputs["switch"] = state ? state.switch : undefined;
            resourceInputs["vlanHeader"] = state ? state.vlanHeader : undefined;
            resourceInputs["vlanMode"] = state ? state.vlanMode : undefined;
        } else {
            const args = argsOrState as InterfaceEthernetSwitchPortArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["___skip_"] = args ? args.___skip_ : undefined;
            resourceInputs["defaultVlanId"] = args ? args.defaultVlanId : undefined;
            resourceInputs["interfaceEthernetSwitchPortId"] = args ? args.interfaceEthernetSwitchPortId : undefined;
            resourceInputs["mirrorEgress"] = args ? args.mirrorEgress : undefined;
            resourceInputs["mirrorIngress"] = args ? args.mirrorIngress : undefined;
            resourceInputs["mirrorIngressTarget"] = args ? args.mirrorIngressTarget : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["vlanHeader"] = args ? args.vlanHeader : undefined;
            resourceInputs["vlanMode"] = args ? args.vlanMode : undefined;
            resourceInputs["invalid"] = undefined /*out*/;
            resourceInputs["running"] = undefined /*out*/;
            resourceInputs["switch"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceEthernetSwitchPort.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceEthernetSwitchPort resources.
 */
export interface InterfaceEthernetSwitchPortState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * Adds a VLAN tag with the specified VLAN ID on all untagged ingress traffic on a port, should be used with
     * ```vlan-header``` set to ```always-strip``` on a port to configure the port to be the access port. For hybrid ports
     * ```default-vlan-id``` is used to tag untagged traffic. If two ports have the same ```default-vlan-id```, then VLAN tag
     * is not added since the switch chip assumes that traffic is being forwarded between access ports.
     */
    defaultVlanId?: pulumi.Input<string>;
    interfaceEthernetSwitchPortId?: pulumi.Input<string>;
    invalid?: pulumi.Input<boolean>;
    /**
     * Whether to send egress packet copy to the `mirror-egress-target` port, only available on 88E6393X, 88E6191X and 88E6190
     * switch chips.
     */
    mirrorEgress?: pulumi.Input<boolean>;
    /**
     * Whether to send ingress packet copy to the `mirror-ingress-target` port, only available on 88E6393X, 88E6191X and
     * 88E6190 switch chips.
     */
    mirrorIngress?: pulumi.Input<boolean>;
    /**
     * Selects a single mirroring ingress target port, only available on 88E6393X, 88E6191X and 88E6190 switch chips. Mirrored
     * packets from `mirror-ingress` will be sent to the selected port.
     */
    mirrorIngressTarget?: pulumi.Input<string>;
    /**
     * Port name.
     */
    name?: pulumi.Input<string>;
    running?: pulumi.Input<boolean>;
    /**
     * Name of the switch.
     */
    switch?: pulumi.Input<string>;
    /**
     * Sets action which is performed on the port for egress traffic.
     */
    vlanHeader?: pulumi.Input<string>;
    /**
     * Changes the VLAN lookup mechanism against the VLAN Table for ingress traffic.
     */
    vlanMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceEthernetSwitchPort resource.
 */
export interface InterfaceEthernetSwitchPortArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * Adds a VLAN tag with the specified VLAN ID on all untagged ingress traffic on a port, should be used with
     * ```vlan-header``` set to ```always-strip``` on a port to configure the port to be the access port. For hybrid ports
     * ```default-vlan-id``` is used to tag untagged traffic. If two ports have the same ```default-vlan-id```, then VLAN tag
     * is not added since the switch chip assumes that traffic is being forwarded between access ports.
     */
    defaultVlanId?: pulumi.Input<string>;
    interfaceEthernetSwitchPortId?: pulumi.Input<string>;
    /**
     * Whether to send egress packet copy to the `mirror-egress-target` port, only available on 88E6393X, 88E6191X and 88E6190
     * switch chips.
     */
    mirrorEgress?: pulumi.Input<boolean>;
    /**
     * Whether to send ingress packet copy to the `mirror-ingress-target` port, only available on 88E6393X, 88E6191X and
     * 88E6190 switch chips.
     */
    mirrorIngress?: pulumi.Input<boolean>;
    /**
     * Selects a single mirroring ingress target port, only available on 88E6393X, 88E6191X and 88E6190 switch chips. Mirrored
     * packets from `mirror-ingress` will be sent to the selected port.
     */
    mirrorIngressTarget?: pulumi.Input<string>;
    /**
     * Port name.
     */
    name?: pulumi.Input<string>;
    /**
     * Sets action which is performed on the port for egress traffic.
     */
    vlanHeader?: pulumi.Input<string>;
    /**
     * Changes the VLAN lookup mechanism against the VLAN Table for ingress traffic.
     */
    vlanMode?: pulumi.Input<string>;
}
