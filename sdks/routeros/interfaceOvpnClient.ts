// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class InterfaceOvpnClient extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceOvpnClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceOvpnClientState, opts?: pulumi.CustomResourceOptions): InterfaceOvpnClient {
        return new InterfaceOvpnClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/interfaceOvpnClient:InterfaceOvpnClient';

    /**
     * Returns true if the given object is an instance of InterfaceOvpnClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceOvpnClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceOvpnClient.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Whether to add OVPN remote address as a default route.
     */
    public readonly addDefaultRoute!: pulumi.Output<boolean | undefined>;
    /**
     * Authentication methods that the server will accept.
     */
    public readonly auth!: pulumi.Output<string | undefined>;
    /**
     * Name of the client certificate.
     */
    public readonly certificate!: pulumi.Output<string | undefined>;
    /**
     * Allowed ciphers.
     */
    public readonly cipher!: pulumi.Output<string | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Remote address of the OVPN server.
     */
    public readonly connectTo!: pulumi.Output<string>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly hwCrypto!: pulumi.Output<boolean>;
    public readonly interfaceOvpnClientId!: pulumi.Output<string>;
    /**
     * Mac address of OVPN interface. Will be automatically generated if not specified.
     */
    public readonly macAddress!: pulumi.Output<string | undefined>;
    /**
     * Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
     */
    public readonly maxMtu!: pulumi.Output<number | undefined>;
    /**
     * Layer3 or layer2 tunnel mode (alternatively tun, tap)
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * Descriptive name of the interface.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password used for authentication.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Port to connect to.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Specifies which PPP profile configuration will be used when establishing the tunnel.
     */
    public readonly profile!: pulumi.Output<string | undefined>;
    /**
     * Indicates the protocol to use when connecting with the remote endpoint.
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to allow the OVPN server to add routes to the OVPN client instance routing table.
     */
    public readonly routeNopull!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly running!: pulumi.Output<boolean>;
    /**
     * Specifies which TLS versions to allow.
     */
    public readonly tlsVersion!: pulumi.Output<string | undefined>;
    /**
     * Whether to add DNS servers provided by the OVPN server to IP/DNS configuration.
     */
    public readonly usePeerDns!: pulumi.Output<boolean | undefined>;
    /**
     * User name used for authentication.
     */
    public readonly user!: pulumi.Output<string>;
    /**
     * Checks the certificates CN or SAN against the "connect-to" parameter. The IP or hostname must be present in the server's
     * certificate.
     */
    public readonly verifyServerCertificate!: pulumi.Output<boolean | undefined>;

    /**
     * Create a InterfaceOvpnClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceOvpnClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceOvpnClientArgs | InterfaceOvpnClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceOvpnClientState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["addDefaultRoute"] = state ? state.addDefaultRoute : undefined;
            resourceInputs["auth"] = state ? state.auth : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["cipher"] = state ? state.cipher : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["connectTo"] = state ? state.connectTo : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["hwCrypto"] = state ? state.hwCrypto : undefined;
            resourceInputs["interfaceOvpnClientId"] = state ? state.interfaceOvpnClientId : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["maxMtu"] = state ? state.maxMtu : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["profile"] = state ? state.profile : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["routeNopull"] = state ? state.routeNopull : undefined;
            resourceInputs["running"] = state ? state.running : undefined;
            resourceInputs["tlsVersion"] = state ? state.tlsVersion : undefined;
            resourceInputs["usePeerDns"] = state ? state.usePeerDns : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["verifyServerCertificate"] = state ? state.verifyServerCertificate : undefined;
        } else {
            const args = argsOrState as InterfaceOvpnClientArgs | undefined;
            if ((!args || args.connectTo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectTo'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["addDefaultRoute"] = args ? args.addDefaultRoute : undefined;
            resourceInputs["auth"] = args ? args.auth : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["cipher"] = args ? args.cipher : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["connectTo"] = args ? args.connectTo : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["interfaceOvpnClientId"] = args ? args.interfaceOvpnClientId : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["maxMtu"] = args ? args.maxMtu : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["profile"] = args ? args.profile : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["routeNopull"] = args ? args.routeNopull : undefined;
            resourceInputs["tlsVersion"] = args ? args.tlsVersion : undefined;
            resourceInputs["usePeerDns"] = args ? args.usePeerDns : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["verifyServerCertificate"] = args ? args.verifyServerCertificate : undefined;
            resourceInputs["hwCrypto"] = undefined /*out*/;
            resourceInputs["running"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(InterfaceOvpnClient.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceOvpnClient resources.
 */
export interface InterfaceOvpnClientState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Whether to add OVPN remote address as a default route.
     */
    addDefaultRoute?: pulumi.Input<boolean>;
    /**
     * Authentication methods that the server will accept.
     */
    auth?: pulumi.Input<string>;
    /**
     * Name of the client certificate.
     */
    certificate?: pulumi.Input<string>;
    /**
     * Allowed ciphers.
     */
    cipher?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * Remote address of the OVPN server.
     */
    connectTo?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    hwCrypto?: pulumi.Input<boolean>;
    interfaceOvpnClientId?: pulumi.Input<string>;
    /**
     * Mac address of OVPN interface. Will be automatically generated if not specified.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
     */
    maxMtu?: pulumi.Input<number>;
    /**
     * Layer3 or layer2 tunnel mode (alternatively tun, tap)
     */
    mode?: pulumi.Input<string>;
    /**
     * Descriptive name of the interface.
     */
    name?: pulumi.Input<string>;
    /**
     * Password used for authentication.
     */
    password?: pulumi.Input<string>;
    /**
     * Port to connect to.
     */
    port?: pulumi.Input<number>;
    /**
     * Specifies which PPP profile configuration will be used when establishing the tunnel.
     */
    profile?: pulumi.Input<string>;
    /**
     * Indicates the protocol to use when connecting with the remote endpoint.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Specifies whether to allow the OVPN server to add routes to the OVPN client instance routing table.
     */
    routeNopull?: pulumi.Input<boolean>;
    running?: pulumi.Input<boolean>;
    /**
     * Specifies which TLS versions to allow.
     */
    tlsVersion?: pulumi.Input<string>;
    /**
     * Whether to add DNS servers provided by the OVPN server to IP/DNS configuration.
     */
    usePeerDns?: pulumi.Input<boolean>;
    /**
     * User name used for authentication.
     */
    user?: pulumi.Input<string>;
    /**
     * Checks the certificates CN or SAN against the "connect-to" parameter. The IP or hostname must be present in the server's
     * certificate.
     */
    verifyServerCertificate?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a InterfaceOvpnClient resource.
 */
export interface InterfaceOvpnClientArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Whether to add OVPN remote address as a default route.
     */
    addDefaultRoute?: pulumi.Input<boolean>;
    /**
     * Authentication methods that the server will accept.
     */
    auth?: pulumi.Input<string>;
    /**
     * Name of the client certificate.
     */
    certificate?: pulumi.Input<string>;
    /**
     * Allowed ciphers.
     */
    cipher?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * Remote address of the OVPN server.
     */
    connectTo: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    interfaceOvpnClientId?: pulumi.Input<string>;
    /**
     * Mac address of OVPN interface. Will be automatically generated if not specified.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * Maximum Transmission Unit. Max packet size that the OVPN interface will be able to send without packet fragmentation.
     */
    maxMtu?: pulumi.Input<number>;
    /**
     * Layer3 or layer2 tunnel mode (alternatively tun, tap)
     */
    mode?: pulumi.Input<string>;
    /**
     * Descriptive name of the interface.
     */
    name?: pulumi.Input<string>;
    /**
     * Password used for authentication.
     */
    password?: pulumi.Input<string>;
    /**
     * Port to connect to.
     */
    port?: pulumi.Input<number>;
    /**
     * Specifies which PPP profile configuration will be used when establishing the tunnel.
     */
    profile?: pulumi.Input<string>;
    /**
     * Indicates the protocol to use when connecting with the remote endpoint.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Specifies whether to allow the OVPN server to add routes to the OVPN client instance routing table.
     */
    routeNopull?: pulumi.Input<boolean>;
    /**
     * Specifies which TLS versions to allow.
     */
    tlsVersion?: pulumi.Input<string>;
    /**
     * Whether to add DNS servers provided by the OVPN server to IP/DNS configuration.
     */
    usePeerDns?: pulumi.Input<boolean>;
    /**
     * User name used for authentication.
     */
    user: pulumi.Input<string>;
    /**
     * Checks the certificates CN or SAN against the "connect-to" parameter. The IP or hostname must be present in the server's
     * certificate.
     */
    verifyServerCertificate?: pulumi.Input<boolean>;
}
