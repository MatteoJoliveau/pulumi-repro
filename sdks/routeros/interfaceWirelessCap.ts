// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class InterfaceWirelessCap extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceWirelessCap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceWirelessCapState, opts?: pulumi.CustomResourceOptions): InterfaceWirelessCap {
        return new InterfaceWirelessCap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/interfaceWirelessCap:InterfaceWirelessCap';

    /**
     * Returns true if the given object is an instance of InterfaceWirelessCap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceWirelessCap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceWirelessCap.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___skip_!: pulumi.Output<string | undefined>;
    /**
     * Bridge interface to add the interface as a bridge port.
     */
    public readonly bridge!: pulumi.Output<string | undefined>;
    /**
     * List of Manager IP addresses that CAP will attempt to contact during discovery.
     */
    public readonly capsManAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * List of manager certificate common names that CAP will connect to.
     */
    public readonly capsManCertificateCommonNames!: pulumi.Output<string[] | undefined>;
    /**
     * An ordered list of CAPs Manager names that the CAP will connect to.
     */
    public readonly capsManNames!: pulumi.Output<string[] | undefined>;
    /**
     * Certificate to use for authentication.
     */
    public readonly certificate!: pulumi.Output<string | undefined>;
    /**
     * List of interfaces over which CAP should attempt to discover CAPs Manager.
     */
    public readonly discoveryInterfaces!: pulumi.Output<string[] | undefined>;
    /**
     * Disable or enable the CAP functionality.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly interfaceWirelessCapId!: pulumi.Output<string>;
    /**
     * List of interfaces managed by CAPs Manager.
     */
    public readonly interfaces!: pulumi.Output<string[] | undefined>;
    /**
     * Lock CAP to the first CAPsMAN it connects to.
     */
    public readonly lockToCapsMan!: pulumi.Output<boolean | undefined>;
    /**
     * Common name of the CAPsMAN that the CAP is locked to.
     */
    public /*out*/ readonly lockedCapsManCommonName!: pulumi.Output<string>;
    /**
     * Requested certificate.
     */
    public /*out*/ readonly requestedCertificate!: pulumi.Output<string>;
    /**
     * An option that creates static virtual interfaces.
     */
    public readonly staticVirtual!: pulumi.Output<boolean | undefined>;

    /**
     * Create a InterfaceWirelessCap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: InterfaceWirelessCapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceWirelessCapArgs | InterfaceWirelessCapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceWirelessCapState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["___skip_"] = state ? state.___skip_ : undefined;
            resourceInputs["bridge"] = state ? state.bridge : undefined;
            resourceInputs["capsManAddresses"] = state ? state.capsManAddresses : undefined;
            resourceInputs["capsManCertificateCommonNames"] = state ? state.capsManCertificateCommonNames : undefined;
            resourceInputs["capsManNames"] = state ? state.capsManNames : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["discoveryInterfaces"] = state ? state.discoveryInterfaces : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["interfaceWirelessCapId"] = state ? state.interfaceWirelessCapId : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["lockToCapsMan"] = state ? state.lockToCapsMan : undefined;
            resourceInputs["lockedCapsManCommonName"] = state ? state.lockedCapsManCommonName : undefined;
            resourceInputs["requestedCertificate"] = state ? state.requestedCertificate : undefined;
            resourceInputs["staticVirtual"] = state ? state.staticVirtual : undefined;
        } else {
            const args = argsOrState as InterfaceWirelessCapArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["___skip_"] = args ? args.___skip_ : undefined;
            resourceInputs["bridge"] = args ? args.bridge : undefined;
            resourceInputs["capsManAddresses"] = args ? args.capsManAddresses : undefined;
            resourceInputs["capsManCertificateCommonNames"] = args ? args.capsManCertificateCommonNames : undefined;
            resourceInputs["capsManNames"] = args ? args.capsManNames : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["discoveryInterfaces"] = args ? args.discoveryInterfaces : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["interfaceWirelessCapId"] = args ? args.interfaceWirelessCapId : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["lockToCapsMan"] = args ? args.lockToCapsMan : undefined;
            resourceInputs["staticVirtual"] = args ? args.staticVirtual : undefined;
            resourceInputs["lockedCapsManCommonName"] = undefined /*out*/;
            resourceInputs["requestedCertificate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceWirelessCap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceWirelessCap resources.
 */
export interface InterfaceWirelessCapState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * Bridge interface to add the interface as a bridge port.
     */
    bridge?: pulumi.Input<string>;
    /**
     * List of Manager IP addresses that CAP will attempt to contact during discovery.
     */
    capsManAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of manager certificate common names that CAP will connect to.
     */
    capsManCertificateCommonNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An ordered list of CAPs Manager names that the CAP will connect to.
     */
    capsManNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate to use for authentication.
     */
    certificate?: pulumi.Input<string>;
    /**
     * List of interfaces over which CAP should attempt to discover CAPs Manager.
     */
    discoveryInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable or enable the CAP functionality.
     */
    enabled?: pulumi.Input<boolean>;
    interfaceWirelessCapId?: pulumi.Input<string>;
    /**
     * List of interfaces managed by CAPs Manager.
     */
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Lock CAP to the first CAPsMAN it connects to.
     */
    lockToCapsMan?: pulumi.Input<boolean>;
    /**
     * Common name of the CAPsMAN that the CAP is locked to.
     */
    lockedCapsManCommonName?: pulumi.Input<string>;
    /**
     * Requested certificate.
     */
    requestedCertificate?: pulumi.Input<string>;
    /**
     * An option that creates static virtual interfaces.
     */
    staticVirtual?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a InterfaceWirelessCap resource.
 */
export interface InterfaceWirelessCapArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * Bridge interface to add the interface as a bridge port.
     */
    bridge?: pulumi.Input<string>;
    /**
     * List of Manager IP addresses that CAP will attempt to contact during discovery.
     */
    capsManAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of manager certificate common names that CAP will connect to.
     */
    capsManCertificateCommonNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An ordered list of CAPs Manager names that the CAP will connect to.
     */
    capsManNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate to use for authentication.
     */
    certificate?: pulumi.Input<string>;
    /**
     * List of interfaces over which CAP should attempt to discover CAPs Manager.
     */
    discoveryInterfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable or enable the CAP functionality.
     */
    enabled?: pulumi.Input<boolean>;
    interfaceWirelessCapId?: pulumi.Input<string>;
    /**
     * List of interfaces managed by CAPs Manager.
     */
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Lock CAP to the first CAPsMAN it connects to.
     */
    lockToCapsMan?: pulumi.Input<boolean>;
    /**
     * An option that creates static virtual interfaces.
     */
    staticVirtual?: pulumi.Input<boolean>;
}
