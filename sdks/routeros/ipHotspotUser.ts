// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpHotspotUser extends pulumi.CustomResource {
    /**
     * Get an existing IpHotspotUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpHotspotUserState, opts?: pulumi.CustomResourceOptions): IpHotspotUser {
        return new IpHotspotUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/ipHotspotUser:IpHotspotUser';

    /**
     * Returns true if the given object is an instance of IpHotspotUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpHotspotUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpHotspotUser.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___skip_!: pulumi.Output<string | undefined>;
    /**
     * IP address, when specified client will get the address from the HotSpot one-to-one NAT translations. Address does not
     * restrict HotSpot login only from this address.
     */
    public readonly address!: pulumi.Output<number | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * It's the default item.
     */
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration item created by software, not by management interface. It is not exported, and cannot be directly
     * modified.
     */
    public /*out*/ readonly dynamic!: pulumi.Output<boolean>;
    /**
     * HotSpot client's e-mail, informational value for the HotSpot user.
     */
    public readonly email!: pulumi.Output<string | undefined>;
    public readonly ipHotspotUserId!: pulumi.Output<string>;
    /**
     * Maximal amount of bytes that can be received from the user. User is disconnected from HotSpot after the limit is
     * reached.
     */
    public readonly limitBytesIn!: pulumi.Output<number | undefined>;
    /**
     * Maximal amount of bytes that can be transmitted from the user. User is disconnected from HotSpot after the limit is
     * reached.
     */
    public readonly limitBytesOut!: pulumi.Output<number | undefined>;
    /**
     * (limit-bytes-in+limit-bytes-out). User is disconnected from HotSpot after the limit is reached.
     */
    public readonly limitBytesTotal!: pulumi.Output<number | undefined>;
    /**
     * Uptime limit for the HotSpot client, user is disconnected from HotSpot as soon as uptime is reached.
     */
    public readonly limitUptime!: pulumi.Output<number | undefined>;
    /**
     * Client is allowed to login only from the specified MAC-address. If value is 00:00:00:00:00:00, any mac address is
     * allowed.
     */
    public readonly macAddress!: pulumi.Output<number | undefined>;
    /**
     * HotSpot login page username, when MAC-address authentication is used name is configured as client's MAC-address.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * User password.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * User profile configured in `/ip hotspot user profile`.
     */
    public readonly profile!: pulumi.Output<string | undefined>;
    /**
     * Routes added to HotSpot gateway when client is connected. The route format dst-address gateway metric (for example,
     * `192.168.1.0/24 192.168.0.1 1`).
     */
    public readonly routes!: pulumi.Output<string | undefined>;
    /**
     * HotSpot server's name to which user is allowed login.
     */
    public readonly server!: pulumi.Output<string | undefined>;

    /**
     * Create a IpHotspotUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IpHotspotUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpHotspotUserArgs | IpHotspotUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpHotspotUserState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["___skip_"] = state ? state.___skip_ : undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dynamic"] = state ? state.dynamic : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["ipHotspotUserId"] = state ? state.ipHotspotUserId : undefined;
            resourceInputs["limitBytesIn"] = state ? state.limitBytesIn : undefined;
            resourceInputs["limitBytesOut"] = state ? state.limitBytesOut : undefined;
            resourceInputs["limitBytesTotal"] = state ? state.limitBytesTotal : undefined;
            resourceInputs["limitUptime"] = state ? state.limitUptime : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["profile"] = state ? state.profile : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
        } else {
            const args = argsOrState as IpHotspotUserArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["___skip_"] = args ? args.___skip_ : undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["ipHotspotUserId"] = args ? args.ipHotspotUserId : undefined;
            resourceInputs["limitBytesIn"] = args ? args.limitBytesIn : undefined;
            resourceInputs["limitBytesOut"] = args ? args.limitBytesOut : undefined;
            resourceInputs["limitBytesTotal"] = args ? args.limitBytesTotal : undefined;
            resourceInputs["limitUptime"] = args ? args.limitUptime : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["profile"] = args ? args.profile : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["default"] = undefined /*out*/;
            resourceInputs["dynamic"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IpHotspotUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpHotspotUser resources.
 */
export interface IpHotspotUserState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * IP address, when specified client will get the address from the HotSpot one-to-one NAT translations. Address does not
     * restrict HotSpot login only from this address.
     */
    address?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    /**
     * It's the default item.
     */
    default?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Configuration item created by software, not by management interface. It is not exported, and cannot be directly
     * modified.
     */
    dynamic?: pulumi.Input<boolean>;
    /**
     * HotSpot client's e-mail, informational value for the HotSpot user.
     */
    email?: pulumi.Input<string>;
    ipHotspotUserId?: pulumi.Input<string>;
    /**
     * Maximal amount of bytes that can be received from the user. User is disconnected from HotSpot after the limit is
     * reached.
     */
    limitBytesIn?: pulumi.Input<number>;
    /**
     * Maximal amount of bytes that can be transmitted from the user. User is disconnected from HotSpot after the limit is
     * reached.
     */
    limitBytesOut?: pulumi.Input<number>;
    /**
     * (limit-bytes-in+limit-bytes-out). User is disconnected from HotSpot after the limit is reached.
     */
    limitBytesTotal?: pulumi.Input<number>;
    /**
     * Uptime limit for the HotSpot client, user is disconnected from HotSpot as soon as uptime is reached.
     */
    limitUptime?: pulumi.Input<number>;
    /**
     * Client is allowed to login only from the specified MAC-address. If value is 00:00:00:00:00:00, any mac address is
     * allowed.
     */
    macAddress?: pulumi.Input<number>;
    /**
     * HotSpot login page username, when MAC-address authentication is used name is configured as client's MAC-address.
     */
    name?: pulumi.Input<string>;
    /**
     * User password.
     */
    password?: pulumi.Input<string>;
    /**
     * User profile configured in `/ip hotspot user profile`.
     */
    profile?: pulumi.Input<string>;
    /**
     * Routes added to HotSpot gateway when client is connected. The route format dst-address gateway metric (for example,
     * `192.168.1.0/24 192.168.0.1 1`).
     */
    routes?: pulumi.Input<string>;
    /**
     * HotSpot server's name to which user is allowed login.
     */
    server?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpHotspotUser resource.
 */
export interface IpHotspotUserArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * IP address, when specified client will get the address from the HotSpot one-to-one NAT translations. Address does not
     * restrict HotSpot login only from this address.
     */
    address?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * HotSpot client's e-mail, informational value for the HotSpot user.
     */
    email?: pulumi.Input<string>;
    ipHotspotUserId?: pulumi.Input<string>;
    /**
     * Maximal amount of bytes that can be received from the user. User is disconnected from HotSpot after the limit is
     * reached.
     */
    limitBytesIn?: pulumi.Input<number>;
    /**
     * Maximal amount of bytes that can be transmitted from the user. User is disconnected from HotSpot after the limit is
     * reached.
     */
    limitBytesOut?: pulumi.Input<number>;
    /**
     * (limit-bytes-in+limit-bytes-out). User is disconnected from HotSpot after the limit is reached.
     */
    limitBytesTotal?: pulumi.Input<number>;
    /**
     * Uptime limit for the HotSpot client, user is disconnected from HotSpot as soon as uptime is reached.
     */
    limitUptime?: pulumi.Input<number>;
    /**
     * Client is allowed to login only from the specified MAC-address. If value is 00:00:00:00:00:00, any mac address is
     * allowed.
     */
    macAddress?: pulumi.Input<number>;
    /**
     * HotSpot login page username, when MAC-address authentication is used name is configured as client's MAC-address.
     */
    name?: pulumi.Input<string>;
    /**
     * User password.
     */
    password?: pulumi.Input<string>;
    /**
     * User profile configured in `/ip hotspot user profile`.
     */
    profile?: pulumi.Input<string>;
    /**
     * Routes added to HotSpot gateway when client is connected. The route format dst-address gateway metric (for example,
     * `192.168.1.0/24 192.168.0.1 1`).
     */
    routes?: pulumi.Input<string>;
    /**
     * HotSpot server's name to which user is allowed login.
     */
    server?: pulumi.Input<string>;
}
