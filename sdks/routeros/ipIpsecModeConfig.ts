// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpIpsecModeConfig extends pulumi.CustomResource {
    /**
     * Get an existing IpIpsecModeConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpIpsecModeConfigState, opts?: pulumi.CustomResourceOptions): IpIpsecModeConfig {
        return new IpIpsecModeConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/ipIpsecModeConfig:IpIpsecModeConfig';

    /**
     * Returns true if the given object is an instance of IpIpsecModeConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpIpsecModeConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpIpsecModeConfig.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Single IP address for the initiator instead of specifying a whole address pool.
     */
    public readonly address!: pulumi.Output<string | undefined>;
    /**
     * Name of the address pool from which the responder will try to assign address if mode-config is enabled.
     */
    public readonly addressPool!: pulumi.Output<string | undefined>;
    /**
     * Prefix length (netmask) of the assigned address from the pool.
     */
    public readonly addressPrefixLength!: pulumi.Output<number | undefined>;
    /**
     * Firewall connection mark.
     */
    public readonly connectionMark!: pulumi.Output<string | undefined>;
    public readonly ipIpsecModeConfigId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies whether the configuration will work as an initiator (client) or responder (server). The initiator will request
     * for mode-config parameters from the responder.
     */
    public readonly responder!: pulumi.Output<boolean | undefined>;
    /**
     * List of DNS names that will be resolved using a system-dns=yes or static-dns= setting.
     */
    public readonly splitDns!: pulumi.Output<string[] | undefined>;
    /**
     * List of subnets in CIDR format, which to tunnel. Subnets will be sent to the peer using the CISCO UNITY extension, a
     * remote peer will create specific dynamic policies.
     */
    public readonly splitIncludes!: pulumi.Output<string[] | undefined>;
    /**
     * Specifying an address list will generate dynamic source NAT rules. This parameter is only available with responder=no. A
     * roadWarrior client with NAT.
     */
    public readonly srcAddressList!: pulumi.Output<string | undefined>;
    /**
     * Manually specified DNS server's IP address to be sent to the client.
     */
    public readonly staticDns!: pulumi.Output<string | undefined>;
    /**
     * When this option is enabled DNS addresses will be taken from `/ip dns`.
     */
    public readonly systemDns!: pulumi.Output<boolean | undefined>;
    public readonly useResponderDns!: pulumi.Output<string | undefined>;

    /**
     * Create a IpIpsecModeConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IpIpsecModeConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpIpsecModeConfigArgs | IpIpsecModeConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpIpsecModeConfigState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["addressPool"] = state ? state.addressPool : undefined;
            resourceInputs["addressPrefixLength"] = state ? state.addressPrefixLength : undefined;
            resourceInputs["connectionMark"] = state ? state.connectionMark : undefined;
            resourceInputs["ipIpsecModeConfigId"] = state ? state.ipIpsecModeConfigId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["responder"] = state ? state.responder : undefined;
            resourceInputs["splitDns"] = state ? state.splitDns : undefined;
            resourceInputs["splitIncludes"] = state ? state.splitIncludes : undefined;
            resourceInputs["srcAddressList"] = state ? state.srcAddressList : undefined;
            resourceInputs["staticDns"] = state ? state.staticDns : undefined;
            resourceInputs["systemDns"] = state ? state.systemDns : undefined;
            resourceInputs["useResponderDns"] = state ? state.useResponderDns : undefined;
        } else {
            const args = argsOrState as IpIpsecModeConfigArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["addressPool"] = args ? args.addressPool : undefined;
            resourceInputs["addressPrefixLength"] = args ? args.addressPrefixLength : undefined;
            resourceInputs["connectionMark"] = args ? args.connectionMark : undefined;
            resourceInputs["ipIpsecModeConfigId"] = args ? args.ipIpsecModeConfigId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["responder"] = args ? args.responder : undefined;
            resourceInputs["splitDns"] = args ? args.splitDns : undefined;
            resourceInputs["splitIncludes"] = args ? args.splitIncludes : undefined;
            resourceInputs["srcAddressList"] = args ? args.srcAddressList : undefined;
            resourceInputs["staticDns"] = args ? args.staticDns : undefined;
            resourceInputs["systemDns"] = args ? args.systemDns : undefined;
            resourceInputs["useResponderDns"] = args ? args.useResponderDns : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpIpsecModeConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpIpsecModeConfig resources.
 */
export interface IpIpsecModeConfigState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Single IP address for the initiator instead of specifying a whole address pool.
     */
    address?: pulumi.Input<string>;
    /**
     * Name of the address pool from which the responder will try to assign address if mode-config is enabled.
     */
    addressPool?: pulumi.Input<string>;
    /**
     * Prefix length (netmask) of the assigned address from the pool.
     */
    addressPrefixLength?: pulumi.Input<number>;
    /**
     * Firewall connection mark.
     */
    connectionMark?: pulumi.Input<string>;
    ipIpsecModeConfigId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Specifies whether the configuration will work as an initiator (client) or responder (server). The initiator will request
     * for mode-config parameters from the responder.
     */
    responder?: pulumi.Input<boolean>;
    /**
     * List of DNS names that will be resolved using a system-dns=yes or static-dns= setting.
     */
    splitDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of subnets in CIDR format, which to tunnel. Subnets will be sent to the peer using the CISCO UNITY extension, a
     * remote peer will create specific dynamic policies.
     */
    splitIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifying an address list will generate dynamic source NAT rules. This parameter is only available with responder=no. A
     * roadWarrior client with NAT.
     */
    srcAddressList?: pulumi.Input<string>;
    /**
     * Manually specified DNS server's IP address to be sent to the client.
     */
    staticDns?: pulumi.Input<string>;
    /**
     * When this option is enabled DNS addresses will be taken from `/ip dns`.
     */
    systemDns?: pulumi.Input<boolean>;
    useResponderDns?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpIpsecModeConfig resource.
 */
export interface IpIpsecModeConfigArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Single IP address for the initiator instead of specifying a whole address pool.
     */
    address?: pulumi.Input<string>;
    /**
     * Name of the address pool from which the responder will try to assign address if mode-config is enabled.
     */
    addressPool?: pulumi.Input<string>;
    /**
     * Prefix length (netmask) of the assigned address from the pool.
     */
    addressPrefixLength?: pulumi.Input<number>;
    /**
     * Firewall connection mark.
     */
    connectionMark?: pulumi.Input<string>;
    ipIpsecModeConfigId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Specifies whether the configuration will work as an initiator (client) or responder (server). The initiator will request
     * for mode-config parameters from the responder.
     */
    responder?: pulumi.Input<boolean>;
    /**
     * List of DNS names that will be resolved using a system-dns=yes or static-dns= setting.
     */
    splitDns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of subnets in CIDR format, which to tunnel. Subnets will be sent to the peer using the CISCO UNITY extension, a
     * remote peer will create specific dynamic policies.
     */
    splitIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifying an address list will generate dynamic source NAT rules. This parameter is only available with responder=no. A
     * roadWarrior client with NAT.
     */
    srcAddressList?: pulumi.Input<string>;
    /**
     * Manually specified DNS server's IP address to be sent to the client.
     */
    staticDns?: pulumi.Input<string>;
    /**
     * When this option is enabled DNS addresses will be taken from `/ip dns`.
     */
    systemDns?: pulumi.Input<boolean>;
    useResponderDns?: pulumi.Input<string>;
}
