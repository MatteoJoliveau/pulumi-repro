// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpService extends pulumi.CustomResource {
    /**
     * Get an existing IpService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpServiceState, opts?: pulumi.CustomResourceOptions): IpService {
        return new IpService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/ipService:IpService';

    /**
     * Returns true if the given object is an instance of IpService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpService.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * List of IP/IPv6 prefixes from which the service is accessible.
     */
    public readonly address!: pulumi.Output<string | undefined>;
    /**
     * The name of the certificate used by a particular service. Applicable only for services that depend on certificates (
     * www-ssl, api-ssl ).
     */
    public readonly certificate!: pulumi.Output<string | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly invalid!: pulumi.Output<boolean>;
    public readonly ipServiceId!: pulumi.Output<string>;
    /**
     * Maximum number of concurrent connections to a particular service. This option is available in RouterOS starting from
     * version 7.16.
     */
    public readonly maxSessions!: pulumi.Output<number | undefined>;
    /**
     * Service name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
     */
    public readonly numbers!: pulumi.Output<string>;
    /**
     * The port particular service listens on.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Specifies which TLS versions to allow by a particular service.
     */
    public readonly tlsVersion!: pulumi.Output<string | undefined>;
    /**
     * The VRF table this resource operates on.
     */
    public readonly vrf!: pulumi.Output<string | undefined>;

    /**
     * Create a IpService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpServiceArgs | IpServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpServiceState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["invalid"] = state ? state.invalid : undefined;
            resourceInputs["ipServiceId"] = state ? state.ipServiceId : undefined;
            resourceInputs["maxSessions"] = state ? state.maxSessions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numbers"] = state ? state.numbers : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["tlsVersion"] = state ? state.tlsVersion : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
        } else {
            const args = argsOrState as IpServiceArgs | undefined;
            if ((!args || args.numbers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numbers'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["ipServiceId"] = args ? args.ipServiceId : undefined;
            resourceInputs["maxSessions"] = args ? args.maxSessions : undefined;
            resourceInputs["numbers"] = args ? args.numbers : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["tlsVersion"] = args ? args.tlsVersion : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["invalid"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpService resources.
 */
export interface IpServiceState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * List of IP/IPv6 prefixes from which the service is accessible.
     */
    address?: pulumi.Input<string>;
    /**
     * The name of the certificate used by a particular service. Applicable only for services that depend on certificates (
     * www-ssl, api-ssl ).
     */
    certificate?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    invalid?: pulumi.Input<boolean>;
    ipServiceId?: pulumi.Input<string>;
    /**
     * Maximum number of concurrent connections to a particular service. This option is available in RouterOS starting from
     * version 7.16.
     */
    maxSessions?: pulumi.Input<number>;
    /**
     * Service name.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
     */
    numbers?: pulumi.Input<string>;
    /**
     * The port particular service listens on.
     */
    port?: pulumi.Input<number>;
    /**
     * Specifies which TLS versions to allow by a particular service.
     */
    tlsVersion?: pulumi.Input<string>;
    /**
     * The VRF table this resource operates on.
     */
    vrf?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpService resource.
 */
export interface IpServiceArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * List of IP/IPv6 prefixes from which the service is accessible.
     */
    address?: pulumi.Input<string>;
    /**
     * The name of the certificate used by a particular service. Applicable only for services that depend on certificates (
     * www-ssl, api-ssl ).
     */
    certificate?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    ipServiceId?: pulumi.Input<string>;
    /**
     * Maximum number of concurrent connections to a particular service. This option is available in RouterOS starting from
     * version 7.16.
     */
    maxSessions?: pulumi.Input<number>;
    /**
     * The name of the service whose settings will be changed ( api, api-ssl, ftp, ssh, telnet, winbox, www, www-ssl ).
     */
    numbers: pulumi.Input<string>;
    /**
     * The port particular service listens on.
     */
    port: pulumi.Input<number>;
    /**
     * Specifies which TLS versions to allow by a particular service.
     */
    tlsVersion?: pulumi.Input<string>;
    /**
     * The VRF table this resource operates on.
     */
    vrf?: pulumi.Input<string>;
}
