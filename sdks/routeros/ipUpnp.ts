// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpUpnp extends pulumi.CustomResource {
    /**
     * Get an existing IpUpnp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpUpnpState, opts?: pulumi.CustomResourceOptions): IpUpnp {
        return new IpUpnp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/ipUpnp:IpUpnp';

    /**
     * Returns true if the given object is an instance of IpUpnp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpUpnp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpUpnp.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Whether or not should the users are allowed to disable the router's external interface. This functionality (for users to
     * be able to turn the router's external interface off without any authentication procedure) is required by the standard,
     * but as it is sometimes not expected or unwanted in UPnP deployments which the standard was not designed for (it was
     * designed mostly for home users to establish their own local networks), you can disable this behavior
     */
    public readonly allowDisableExternalInterface!: pulumi.Output<boolean | undefined>;
    /**
     * Enable UPnP service.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly ipUpnpId!: pulumi.Output<string>;
    /**
     * nable a workaround for some broken implementations, which are handling the absence of UPnP rules incorrectly (for
     * example, popping up error messages). This option will instruct the server to install a dummy (meaningless) UPnP rule
     * that can be observed by the clients, which refuse to work correctly otherwise
     */
    public readonly showDummyRule!: pulumi.Output<boolean | undefined>;

    /**
     * Create a IpUpnp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IpUpnpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpUpnpArgs | IpUpnpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpUpnpState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["allowDisableExternalInterface"] = state ? state.allowDisableExternalInterface : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["ipUpnpId"] = state ? state.ipUpnpId : undefined;
            resourceInputs["showDummyRule"] = state ? state.showDummyRule : undefined;
        } else {
            const args = argsOrState as IpUpnpArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["allowDisableExternalInterface"] = args ? args.allowDisableExternalInterface : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["ipUpnpId"] = args ? args.ipUpnpId : undefined;
            resourceInputs["showDummyRule"] = args ? args.showDummyRule : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpUpnp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpUpnp resources.
 */
export interface IpUpnpState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Whether or not should the users are allowed to disable the router's external interface. This functionality (for users to
     * be able to turn the router's external interface off without any authentication procedure) is required by the standard,
     * but as it is sometimes not expected or unwanted in UPnP deployments which the standard was not designed for (it was
     * designed mostly for home users to establish their own local networks), you can disable this behavior
     */
    allowDisableExternalInterface?: pulumi.Input<boolean>;
    /**
     * Enable UPnP service.
     */
    enabled?: pulumi.Input<boolean>;
    ipUpnpId?: pulumi.Input<string>;
    /**
     * nable a workaround for some broken implementations, which are handling the absence of UPnP rules incorrectly (for
     * example, popping up error messages). This option will instruct the server to install a dummy (meaningless) UPnP rule
     * that can be observed by the clients, which refuse to work correctly otherwise
     */
    showDummyRule?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IpUpnp resource.
 */
export interface IpUpnpArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Whether or not should the users are allowed to disable the router's external interface. This functionality (for users to
     * be able to turn the router's external interface off without any authentication procedure) is required by the standard,
     * but as it is sometimes not expected or unwanted in UPnP deployments which the standard was not designed for (it was
     * designed mostly for home users to establish their own local networks), you can disable this behavior
     */
    allowDisableExternalInterface?: pulumi.Input<boolean>;
    /**
     * Enable UPnP service.
     */
    enabled?: pulumi.Input<boolean>;
    ipUpnpId?: pulumi.Input<string>;
    /**
     * nable a workaround for some broken implementations, which are handling the absence of UPnP rules incorrectly (for
     * example, popping up error messages). This option will instruct the server to install a dummy (meaningless) UPnP rule
     * that can be observed by the clients, which refuse to work correctly otherwise
     */
    showDummyRule?: pulumi.Input<boolean>;
}
