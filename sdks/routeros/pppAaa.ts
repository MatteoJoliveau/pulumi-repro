// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class PppAaa extends pulumi.CustomResource {
    /**
     * Get an existing PppAaa resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PppAaaState, opts?: pulumi.CustomResourceOptions): PppAaa {
        return new PppAaa(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/pppAaa:PppAaa';

    /**
     * Returns true if the given object is an instance of PppAaa.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PppAaa {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PppAaa.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * An option that enables accounting for users.
     */
    public readonly accounting!: pulumi.Output<boolean | undefined>;
    /**
     * An option that enables IPv6 separate accounting.
     */
    public readonly enableIpv6Accounting!: pulumi.Output<boolean | undefined>;
    /**
     * Interval between scheduled RADIUS Interim-Update messages.
     */
    public readonly interimUpdate!: pulumi.Output<string | undefined>;
    public readonly pppAaaId!: pulumi.Output<string>;
    public readonly useCircuitIdInNasPortId!: pulumi.Output<boolean | undefined>;
    /**
     * An option whether to use RADIUS server.
     */
    public readonly useRadius!: pulumi.Output<boolean | undefined>;

    /**
     * Create a PppAaa resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PppAaaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PppAaaArgs | PppAaaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PppAaaState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["accounting"] = state ? state.accounting : undefined;
            resourceInputs["enableIpv6Accounting"] = state ? state.enableIpv6Accounting : undefined;
            resourceInputs["interimUpdate"] = state ? state.interimUpdate : undefined;
            resourceInputs["pppAaaId"] = state ? state.pppAaaId : undefined;
            resourceInputs["useCircuitIdInNasPortId"] = state ? state.useCircuitIdInNasPortId : undefined;
            resourceInputs["useRadius"] = state ? state.useRadius : undefined;
        } else {
            const args = argsOrState as PppAaaArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["accounting"] = args ? args.accounting : undefined;
            resourceInputs["enableIpv6Accounting"] = args ? args.enableIpv6Accounting : undefined;
            resourceInputs["interimUpdate"] = args ? args.interimUpdate : undefined;
            resourceInputs["pppAaaId"] = args ? args.pppAaaId : undefined;
            resourceInputs["useCircuitIdInNasPortId"] = args ? args.useCircuitIdInNasPortId : undefined;
            resourceInputs["useRadius"] = args ? args.useRadius : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PppAaa.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PppAaa resources.
 */
export interface PppAaaState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * An option that enables accounting for users.
     */
    accounting?: pulumi.Input<boolean>;
    /**
     * An option that enables IPv6 separate accounting.
     */
    enableIpv6Accounting?: pulumi.Input<boolean>;
    /**
     * Interval between scheduled RADIUS Interim-Update messages.
     */
    interimUpdate?: pulumi.Input<string>;
    pppAaaId?: pulumi.Input<string>;
    useCircuitIdInNasPortId?: pulumi.Input<boolean>;
    /**
     * An option whether to use RADIUS server.
     */
    useRadius?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PppAaa resource.
 */
export interface PppAaaArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * An option that enables accounting for users.
     */
    accounting?: pulumi.Input<boolean>;
    /**
     * An option that enables IPv6 separate accounting.
     */
    enableIpv6Accounting?: pulumi.Input<boolean>;
    /**
     * Interval between scheduled RADIUS Interim-Update messages.
     */
    interimUpdate?: pulumi.Input<string>;
    pppAaaId?: pulumi.Input<string>;
    useCircuitIdInNasPortId?: pulumi.Input<boolean>;
    /**
     * An option whether to use RADIUS server.
     */
    useRadius?: pulumi.Input<boolean>;
}
