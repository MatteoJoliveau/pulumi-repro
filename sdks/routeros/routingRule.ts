// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RoutingRule extends pulumi.CustomResource {
    /**
     * Get an existing RoutingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoutingRuleState, opts?: pulumi.CustomResourceOptions): RoutingRule {
        return new RoutingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/routingRule:RoutingRule';

    /**
     * Returns true if the given object is an instance of RoutingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoutingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoutingRule.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * An action to take on the matching packet:drop - silently drop the packet.lookup - perform a lookup in routing
     * tables.lookup-only-in-table - perform lookup only in the specified routing table (see table parameter).unreachable -
     * generate ICMP unreachable message and send it back to the source.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * The destination address of the packet to match.
     */
    public readonly dstAddress!: pulumi.Output<string | undefined>;
    public /*out*/ readonly inactive!: pulumi.Output<boolean>;
    /**
     * Incoming interface to match.
     */
    public readonly interface!: pulumi.Output<string | undefined>;
    /**
     * Equivalent to Linux IP rule `suppress_prefixlength`. For example to suppress the default route in the routing decision
     * set the value to 0.
     */
    public readonly minPrefix!: pulumi.Output<number | undefined>;
    /**
     * Match specific routing mark.
     */
    public readonly routingMark!: pulumi.Output<string | undefined>;
    public readonly routingRuleId!: pulumi.Output<string>;
    /**
     * The source address of the packet to match.
     */
    public readonly srcAddress!: pulumi.Output<string | undefined>;
    /**
     * Name of the routing table to use for lookup.
     */
    public readonly table!: pulumi.Output<string | undefined>;

    /**
     * Create a RoutingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RoutingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoutingRuleArgs | RoutingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoutingRuleState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dstAddress"] = state ? state.dstAddress : undefined;
            resourceInputs["inactive"] = state ? state.inactive : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["minPrefix"] = state ? state.minPrefix : undefined;
            resourceInputs["routingMark"] = state ? state.routingMark : undefined;
            resourceInputs["routingRuleId"] = state ? state.routingRuleId : undefined;
            resourceInputs["srcAddress"] = state ? state.srcAddress : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
        } else {
            const args = argsOrState as RoutingRuleArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["dstAddress"] = args ? args.dstAddress : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["minPrefix"] = args ? args.minPrefix : undefined;
            resourceInputs["routingMark"] = args ? args.routingMark : undefined;
            resourceInputs["routingRuleId"] = args ? args.routingRuleId : undefined;
            resourceInputs["srcAddress"] = args ? args.srcAddress : undefined;
            resourceInputs["table"] = args ? args.table : undefined;
            resourceInputs["inactive"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoutingRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RoutingRule resources.
 */
export interface RoutingRuleState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * An action to take on the matching packet:drop - silently drop the packet.lookup - perform a lookup in routing
     * tables.lookup-only-in-table - perform lookup only in the specified routing table (see table parameter).unreachable -
     * generate ICMP unreachable message and send it back to the source.
     */
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * The destination address of the packet to match.
     */
    dstAddress?: pulumi.Input<string>;
    inactive?: pulumi.Input<boolean>;
    /**
     * Incoming interface to match.
     */
    interface?: pulumi.Input<string>;
    /**
     * Equivalent to Linux IP rule `suppress_prefixlength`. For example to suppress the default route in the routing decision
     * set the value to 0.
     */
    minPrefix?: pulumi.Input<number>;
    /**
     * Match specific routing mark.
     */
    routingMark?: pulumi.Input<string>;
    routingRuleId?: pulumi.Input<string>;
    /**
     * The source address of the packet to match.
     */
    srcAddress?: pulumi.Input<string>;
    /**
     * Name of the routing table to use for lookup.
     */
    table?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoutingRule resource.
 */
export interface RoutingRuleArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * An action to take on the matching packet:drop - silently drop the packet.lookup - perform a lookup in routing
     * tables.lookup-only-in-table - perform lookup only in the specified routing table (see table parameter).unreachable -
     * generate ICMP unreachable message and send it back to the source.
     */
    action?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * The destination address of the packet to match.
     */
    dstAddress?: pulumi.Input<string>;
    /**
     * Incoming interface to match.
     */
    interface?: pulumi.Input<string>;
    /**
     * Equivalent to Linux IP rule `suppress_prefixlength`. For example to suppress the default route in the routing decision
     * set the value to 0.
     */
    minPrefix?: pulumi.Input<number>;
    /**
     * Match specific routing mark.
     */
    routingMark?: pulumi.Input<string>;
    routingRuleId?: pulumi.Input<string>;
    /**
     * The source address of the packet to match.
     */
    srcAddress?: pulumi.Input<string>;
    /**
     * Name of the routing table to use for lookup.
     */
    table?: pulumi.Input<string>;
}
