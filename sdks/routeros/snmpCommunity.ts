// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SnmpCommunity extends pulumi.CustomResource {
    /**
     * Get an existing SnmpCommunity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpCommunityState, opts?: pulumi.CustomResourceOptions): SnmpCommunity {
        return new SnmpCommunity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/snmpCommunity:SnmpCommunity';

    /**
     * Returns true if the given object is an instance of SnmpCommunity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpCommunity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpCommunity.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Set of IP (v4 or v6) addresses or CIDR networks from which connections to SNMP server are allowed.
     */
    public readonly addresses!: pulumi.Output<string[] | undefined>;
    /**
     * Password used to authenticate the connection to the server (SNMPv3).
     */
    public readonly authenticationPassword!: pulumi.Output<string | undefined>;
    /**
     * The protocol used for authentication (SNMPv3).
     */
    public readonly authenticationProtocol!: pulumi.Output<string | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * It's the default item.
     */
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * The password used for encryption (SNMPv3).
     */
    public readonly encryptionPassword!: pulumi.Output<string | undefined>;
    /**
     * encryption protocol to be used to encrypt the communication (SNMPv3). AES (see rfc3826) available since v6.16.
     */
    public readonly encryptionProtocol!: pulumi.Output<string | undefined>;
    /**
     * Community Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether read access is enabled for this community.
     */
    public readonly readAccess!: pulumi.Output<boolean | undefined>;
    /**
     * Security features.
     */
    public readonly security!: pulumi.Output<string | undefined>;
    public readonly snmpCommunityId!: pulumi.Output<string>;
    /**
     * Whether write access is enabled for this community.
     */
    public readonly writeAccess!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SnmpCommunity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnmpCommunityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpCommunityArgs | SnmpCommunityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpCommunityState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["addresses"] = state ? state.addresses : undefined;
            resourceInputs["authenticationPassword"] = state ? state.authenticationPassword : undefined;
            resourceInputs["authenticationProtocol"] = state ? state.authenticationProtocol : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["encryptionPassword"] = state ? state.encryptionPassword : undefined;
            resourceInputs["encryptionProtocol"] = state ? state.encryptionProtocol : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["readAccess"] = state ? state.readAccess : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["snmpCommunityId"] = state ? state.snmpCommunityId : undefined;
            resourceInputs["writeAccess"] = state ? state.writeAccess : undefined;
        } else {
            const args = argsOrState as SnmpCommunityArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["addresses"] = args ? args.addresses : undefined;
            resourceInputs["authenticationPassword"] = args?.authenticationPassword ? pulumi.secret(args.authenticationPassword) : undefined;
            resourceInputs["authenticationProtocol"] = args ? args.authenticationProtocol : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["encryptionPassword"] = args?.encryptionPassword ? pulumi.secret(args.encryptionPassword) : undefined;
            resourceInputs["encryptionProtocol"] = args ? args.encryptionProtocol : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["readAccess"] = args ? args.readAccess : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["snmpCommunityId"] = args ? args.snmpCommunityId : undefined;
            resourceInputs["writeAccess"] = args ? args.writeAccess : undefined;
            resourceInputs["default"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authenticationPassword", "encryptionPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SnmpCommunity.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpCommunity resources.
 */
export interface SnmpCommunityState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Set of IP (v4 or v6) addresses or CIDR networks from which connections to SNMP server are allowed.
     */
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Password used to authenticate the connection to the server (SNMPv3).
     */
    authenticationPassword?: pulumi.Input<string>;
    /**
     * The protocol used for authentication (SNMPv3).
     */
    authenticationProtocol?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * It's the default item.
     */
    default?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    /**
     * The password used for encryption (SNMPv3).
     */
    encryptionPassword?: pulumi.Input<string>;
    /**
     * encryption protocol to be used to encrypt the communication (SNMPv3). AES (see rfc3826) available since v6.16.
     */
    encryptionProtocol?: pulumi.Input<string>;
    /**
     * Community Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether read access is enabled for this community.
     */
    readAccess?: pulumi.Input<boolean>;
    /**
     * Security features.
     */
    security?: pulumi.Input<string>;
    snmpCommunityId?: pulumi.Input<string>;
    /**
     * Whether write access is enabled for this community.
     */
    writeAccess?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SnmpCommunity resource.
 */
export interface SnmpCommunityArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Set of IP (v4 or v6) addresses or CIDR networks from which connections to SNMP server are allowed.
     */
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Password used to authenticate the connection to the server (SNMPv3).
     */
    authenticationPassword?: pulumi.Input<string>;
    /**
     * The protocol used for authentication (SNMPv3).
     */
    authenticationProtocol?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * The password used for encryption (SNMPv3).
     */
    encryptionPassword?: pulumi.Input<string>;
    /**
     * encryption protocol to be used to encrypt the communication (SNMPv3). AES (see rfc3826) available since v6.16.
     */
    encryptionProtocol?: pulumi.Input<string>;
    /**
     * Community Name.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether read access is enabled for this community.
     */
    readAccess?: pulumi.Input<boolean>;
    /**
     * Security features.
     */
    security?: pulumi.Input<string>;
    snmpCommunityId?: pulumi.Input<string>;
    /**
     * Whether write access is enabled for this community.
     */
    writeAccess?: pulumi.Input<boolean>;
}
