// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemNtpClient extends pulumi.CustomResource {
    /**
     * Get an existing SystemNtpClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemNtpClientState, opts?: pulumi.CustomResourceOptions): SystemNtpClient {
        return new SystemNtpClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/systemNtpClient:SystemNtpClient';

    /**
     * Returns true if the given object is an instance of SystemNtpClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemNtpClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemNtpClient.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Enable NTP client.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The fractional frequency drift per unit time.
     */
    public /*out*/ readonly freqDrift!: pulumi.Output<string>;
    /**
     * Mode that the NTP client will operate in
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The list of NTP servers. It is possible to add static entries. The following formats are accepted: - FQDN ("Resolved
     * Address" will appear in the "Servers"- window in an appropriate column if the address is resolved) or IP address can be
     * used. If DHCP-Client property `use-peer-ntp=yes` - the dynamic entries advertised by DHCP - ipv4 - ipv4@vrf - ipv6 -
     * ipv6@vrf - ipv6-linklocal%interface
     */
    public readonly servers!: pulumi.Output<string[] | undefined>;
    /**
     * Current status of the NTP client.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The IP address of the NTP Server.
     */
    public /*out*/ readonly syncedServer!: pulumi.Output<string>;
    /**
     * The accuracy of each server is defined by a number called the stratum, with the topmost level (primary servers) assigned
     * as one and each level downwards (secondary servers) in the hierarchy assigned as one greater than the preceding level.
     */
    public /*out*/ readonly syncedStratum!: pulumi.Output<string>;
    public readonly systemNtpClientId!: pulumi.Output<string>;
    /**
     * This is a signed, fixed-point number indicating the offset of the NTP server's clock relative to the local clock, in
     * seconds.
     */
    public /*out*/ readonly systemOffset!: pulumi.Output<string>;
    /**
     * The VRF table this resource operates on.
     */
    public readonly vrf!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemNtpClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemNtpClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemNtpClientArgs | SystemNtpClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemNtpClientState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["freqDrift"] = state ? state.freqDrift : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["syncedServer"] = state ? state.syncedServer : undefined;
            resourceInputs["syncedStratum"] = state ? state.syncedStratum : undefined;
            resourceInputs["systemNtpClientId"] = state ? state.systemNtpClientId : undefined;
            resourceInputs["systemOffset"] = state ? state.systemOffset : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
        } else {
            const args = argsOrState as SystemNtpClientArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
            resourceInputs["systemNtpClientId"] = args ? args.systemNtpClientId : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["freqDrift"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["syncedServer"] = undefined /*out*/;
            resourceInputs["syncedStratum"] = undefined /*out*/;
            resourceInputs["systemOffset"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemNtpClient.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemNtpClient resources.
 */
export interface SystemNtpClientState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Enable NTP client.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The fractional frequency drift per unit time.
     */
    freqDrift?: pulumi.Input<string>;
    /**
     * Mode that the NTP client will operate in
     */
    mode?: pulumi.Input<string>;
    /**
     * The list of NTP servers. It is possible to add static entries. The following formats are accepted: - FQDN ("Resolved
     * Address" will appear in the "Servers"- window in an appropriate column if the address is resolved) or IP address can be
     * used. If DHCP-Client property `use-peer-ntp=yes` - the dynamic entries advertised by DHCP - ipv4 - ipv4@vrf - ipv6 -
     * ipv6@vrf - ipv6-linklocal%interface
     */
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Current status of the NTP client.
     */
    status?: pulumi.Input<string>;
    /**
     * The IP address of the NTP Server.
     */
    syncedServer?: pulumi.Input<string>;
    /**
     * The accuracy of each server is defined by a number called the stratum, with the topmost level (primary servers) assigned
     * as one and each level downwards (secondary servers) in the hierarchy assigned as one greater than the preceding level.
     */
    syncedStratum?: pulumi.Input<string>;
    systemNtpClientId?: pulumi.Input<string>;
    /**
     * This is a signed, fixed-point number indicating the offset of the NTP server's clock relative to the local clock, in
     * seconds.
     */
    systemOffset?: pulumi.Input<string>;
    /**
     * The VRF table this resource operates on.
     */
    vrf?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemNtpClient resource.
 */
export interface SystemNtpClientArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Enable NTP client.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Mode that the NTP client will operate in
     */
    mode?: pulumi.Input<string>;
    /**
     * The list of NTP servers. It is possible to add static entries. The following formats are accepted: - FQDN ("Resolved
     * Address" will appear in the "Servers"- window in an appropriate column if the address is resolved) or IP address can be
     * used. If DHCP-Client property `use-peer-ntp=yes` - the dynamic entries advertised by DHCP - ipv4 - ipv4@vrf - ipv6 -
     * ipv6@vrf - ipv6-linklocal%interface
     */
    servers?: pulumi.Input<pulumi.Input<string>[]>;
    systemNtpClientId?: pulumi.Input<string>;
    /**
     * The VRF table this resource operates on.
     */
    vrf?: pulumi.Input<string>;
}
