// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemNtpServer extends pulumi.CustomResource {
    /**
     * Get an existing SystemNtpServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemNtpServerState, opts?: pulumi.CustomResourceOptions): SystemNtpServer {
        return new SystemNtpServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/systemNtpServer:SystemNtpServer';

    /**
     * Returns true if the given object is an instance of SystemNtpServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemNtpServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemNtpServer.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * NTP symmetric key, used for authentication between the NTP client and server. Key Identifier (Key ID) - an integer
     * identifying the cryptographic key used to generate the message-authentication code.
     */
    public readonly authKey!: pulumi.Output<string | undefined>;
    /**
     * Enable certain NTP server mode, for this mode to work you have to set up broadcast-addresses field.
     */
    public readonly broadcast!: pulumi.Output<boolean | undefined>;
    /**
     * Set broadcast address to use for NTP server broadcast mode.
     */
    public readonly broadcastAddresses!: pulumi.Output<string | undefined>;
    /**
     * Enable NTP server.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Manually set stratum if ```use_local_clock = true```.
     */
    public readonly localClockStratum!: pulumi.Output<number | undefined>;
    /**
     * Enable certain NTP server mode.
     */
    public readonly manycast!: pulumi.Output<boolean | undefined>;
    /**
     * Enable certain NTP server mode.
     */
    public readonly multicast!: pulumi.Output<boolean | undefined>;
    public readonly systemNtpServerId!: pulumi.Output<string>;
    /**
     * The server will supply its local system time as valid if others are not available.
     */
    public readonly useLocalClock!: pulumi.Output<boolean | undefined>;
    /**
     * The VRF table this resource operates on.
     */
    public readonly vrf!: pulumi.Output<string | undefined>;

    /**
     * Create a SystemNtpServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemNtpServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemNtpServerArgs | SystemNtpServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemNtpServerState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["authKey"] = state ? state.authKey : undefined;
            resourceInputs["broadcast"] = state ? state.broadcast : undefined;
            resourceInputs["broadcastAddresses"] = state ? state.broadcastAddresses : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["localClockStratum"] = state ? state.localClockStratum : undefined;
            resourceInputs["manycast"] = state ? state.manycast : undefined;
            resourceInputs["multicast"] = state ? state.multicast : undefined;
            resourceInputs["systemNtpServerId"] = state ? state.systemNtpServerId : undefined;
            resourceInputs["useLocalClock"] = state ? state.useLocalClock : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
        } else {
            const args = argsOrState as SystemNtpServerArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["authKey"] = args ? args.authKey : undefined;
            resourceInputs["broadcast"] = args ? args.broadcast : undefined;
            resourceInputs["broadcastAddresses"] = args ? args.broadcastAddresses : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["localClockStratum"] = args ? args.localClockStratum : undefined;
            resourceInputs["manycast"] = args ? args.manycast : undefined;
            resourceInputs["multicast"] = args ? args.multicast : undefined;
            resourceInputs["systemNtpServerId"] = args ? args.systemNtpServerId : undefined;
            resourceInputs["useLocalClock"] = args ? args.useLocalClock : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemNtpServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemNtpServer resources.
 */
export interface SystemNtpServerState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * NTP symmetric key, used for authentication between the NTP client and server. Key Identifier (Key ID) - an integer
     * identifying the cryptographic key used to generate the message-authentication code.
     */
    authKey?: pulumi.Input<string>;
    /**
     * Enable certain NTP server mode, for this mode to work you have to set up broadcast-addresses field.
     */
    broadcast?: pulumi.Input<boolean>;
    /**
     * Set broadcast address to use for NTP server broadcast mode.
     */
    broadcastAddresses?: pulumi.Input<string>;
    /**
     * Enable NTP server.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Manually set stratum if ```use_local_clock = true```.
     */
    localClockStratum?: pulumi.Input<number>;
    /**
     * Enable certain NTP server mode.
     */
    manycast?: pulumi.Input<boolean>;
    /**
     * Enable certain NTP server mode.
     */
    multicast?: pulumi.Input<boolean>;
    systemNtpServerId?: pulumi.Input<string>;
    /**
     * The server will supply its local system time as valid if others are not available.
     */
    useLocalClock?: pulumi.Input<boolean>;
    /**
     * The VRF table this resource operates on.
     */
    vrf?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemNtpServer resource.
 */
export interface SystemNtpServerArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * NTP symmetric key, used for authentication between the NTP client and server. Key Identifier (Key ID) - an integer
     * identifying the cryptographic key used to generate the message-authentication code.
     */
    authKey?: pulumi.Input<string>;
    /**
     * Enable certain NTP server mode, for this mode to work you have to set up broadcast-addresses field.
     */
    broadcast?: pulumi.Input<boolean>;
    /**
     * Set broadcast address to use for NTP server broadcast mode.
     */
    broadcastAddresses?: pulumi.Input<string>;
    /**
     * Enable NTP server.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Manually set stratum if ```use_local_clock = true```.
     */
    localClockStratum?: pulumi.Input<number>;
    /**
     * Enable certain NTP server mode.
     */
    manycast?: pulumi.Input<boolean>;
    /**
     * Enable certain NTP server mode.
     */
    multicast?: pulumi.Input<boolean>;
    systemNtpServerId?: pulumi.Input<string>;
    /**
     * The server will supply its local system time as valid if others are not available.
     */
    useLocalClock?: pulumi.Input<boolean>;
    /**
     * The VRF table this resource operates on.
     */
    vrf?: pulumi.Input<string>;
}
