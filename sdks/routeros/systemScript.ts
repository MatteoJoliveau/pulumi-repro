// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemScript extends pulumi.CustomResource {
    /**
     * Get an existing SystemScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemScriptState, opts?: pulumi.CustomResourceOptions): SystemScript {
        return new SystemScript(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/systemScript:SystemScript';

    /**
     * Returns true if the given object is an instance of SystemScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemScript {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemScript.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Bypass permissions check when the script is being executed, useful when scripts are being executed from services that
     * have limited permissions, such as Netwatch.
     */
    public readonly dontRequirePermissions!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly invalid!: pulumi.Output<boolean>;
    /**
     * Date and time when the script was last invoked.
     */
    public /*out*/ readonly lastStarted!: pulumi.Output<string>;
    /**
     * Name of the script.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * List of applicable policies: * ftp - Policy that grants full rights to log in remotely via FTP, to read/write/erase
     * files and to transfer files from/to the router. Should be used together with read/write policies. * password - Policy
     * that grants rights to change the password. * policy - Policy that grants user management rights. Should be used together
     * with the write policy. Allows also to see global variables created by other users (requires also 'test' policy). * read
     * - Policy that grants read access to the router's configuration. All console commands that do not alter router's
     * configuration are allowed. Doesn't affect FTP. * reboot - Policy that allows rebooting the router. * sensitive - Policy
     * that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not displayed.
     * * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run ping,
     * traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write access
     * to the router's configuration, except for user management. This policy does not allow to read the configuration, so make
     * sure to enable read policy as well. policy = ["ftp", "read", "write"]
     */
    public readonly policies!: pulumi.Output<string[]>;
    /**
     * This counter is incremented each time the script is executed.
     */
    public /*out*/ readonly runCount!: pulumi.Output<string>;
    /**
     * Script source code.
     */
    public readonly source!: pulumi.Output<string>;
    public readonly systemScriptId!: pulumi.Output<string>;

    /**
     * Create a SystemScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemScriptArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemScriptArgs | SystemScriptState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemScriptState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["dontRequirePermissions"] = state ? state.dontRequirePermissions : undefined;
            resourceInputs["invalid"] = state ? state.invalid : undefined;
            resourceInputs["lastStarted"] = state ? state.lastStarted : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["runCount"] = state ? state.runCount : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["systemScriptId"] = state ? state.systemScriptId : undefined;
        } else {
            const args = argsOrState as SystemScriptArgs | undefined;
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["dontRequirePermissions"] = args ? args.dontRequirePermissions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["systemScriptId"] = args ? args.systemScriptId : undefined;
            resourceInputs["invalid"] = undefined /*out*/;
            resourceInputs["lastStarted"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["runCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemScript.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemScript resources.
 */
export interface SystemScriptState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * Bypass permissions check when the script is being executed, useful when scripts are being executed from services that
     * have limited permissions, such as Netwatch.
     */
    dontRequirePermissions?: pulumi.Input<boolean>;
    invalid?: pulumi.Input<boolean>;
    /**
     * Date and time when the script was last invoked.
     */
    lastStarted?: pulumi.Input<string>;
    /**
     * Name of the script.
     */
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    /**
     * List of applicable policies: * ftp - Policy that grants full rights to log in remotely via FTP, to read/write/erase
     * files and to transfer files from/to the router. Should be used together with read/write policies. * password - Policy
     * that grants rights to change the password. * policy - Policy that grants user management rights. Should be used together
     * with the write policy. Allows also to see global variables created by other users (requires also 'test' policy). * read
     * - Policy that grants read access to the router's configuration. All console commands that do not alter router's
     * configuration are allowed. Doesn't affect FTP. * reboot - Policy that allows rebooting the router. * sensitive - Policy
     * that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not displayed.
     * * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run ping,
     * traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write access
     * to the router's configuration, except for user management. This policy does not allow to read the configuration, so make
     * sure to enable read policy as well. policy = ["ftp", "read", "write"]
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * This counter is incremented each time the script is executed.
     */
    runCount?: pulumi.Input<string>;
    /**
     * Script source code.
     */
    source?: pulumi.Input<string>;
    systemScriptId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemScript resource.
 */
export interface SystemScriptArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    /**
     * Bypass permissions check when the script is being executed, useful when scripts are being executed from services that
     * have limited permissions, such as Netwatch.
     */
    dontRequirePermissions?: pulumi.Input<boolean>;
    /**
     * Name of the script.
     */
    name?: pulumi.Input<string>;
    /**
     * List of applicable policies: * ftp - Policy that grants full rights to log in remotely via FTP, to read/write/erase
     * files and to transfer files from/to the router. Should be used together with read/write policies. * password - Policy
     * that grants rights to change the password. * policy - Policy that grants user management rights. Should be used together
     * with the write policy. Allows also to see global variables created by other users (requires also 'test' policy). * read
     * - Policy that grants read access to the router's configuration. All console commands that do not alter router's
     * configuration are allowed. Doesn't affect FTP. * reboot - Policy that allows rebooting the router. * sensitive - Policy
     * that grants rights to change "hide sensitive" option, if this policy is disabled sensitive information is not displayed.
     * * sniff - Policy that grants rights to use packet sniffer tool. * test - Policy that grants rights to run ping,
     * traceroute, bandwidth-test, wireless scan, snooper, and other test commands. * write - Policy that grants write access
     * to the router's configuration, except for user management. This policy does not allow to read the configuration, so make
     * sure to enable read policy as well. policy = ["ftp", "read", "write"]
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Script source code.
     */
    source: pulumi.Input<string>;
    systemScriptId?: pulumi.Input<string>;
}
