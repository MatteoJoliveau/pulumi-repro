// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ToolNetwatch extends pulumi.CustomResource {
    /**
     * Get an existing ToolNetwatch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ToolNetwatchState, opts?: pulumi.CustomResourceOptions): ToolNetwatch {
        return new ToolNetwatch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/toolNetwatch:ToolNetwatch';

    /**
     * Returns true if the given object is an instance of ToolNetwatch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ToolNetwatch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ToolNetwatch.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___skip_!: pulumi.Output<string | undefined>;
    /**
     * If the ICMP `time exceeded` message should be considered a valid response.
     */
    public readonly acceptIcmpTimeExceeded!: pulumi.Output<boolean | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * The DNS server that the probe should send its requests to, if not specified it will use the value from `/ip dns`.
     */
    public readonly dnsServer!: pulumi.Output<string | undefined>;
    /**
     * Script to execute on the event of probe state change `OK` -> `fail`.
     */
    public readonly downScript!: pulumi.Output<string | undefined>;
    /**
     * The IP address of the server to be probed. Formats: - ipv4 - ipv4@vrf - ipv6 - ipv6@vrf - ipv6-linklocal%interface
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Response in the range [http-code-min , http-code-max] is a probe pass/OK; outside - a probe fail. See
     * [mozilla-http-status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) or
     * [rfc7231](https://datatracker.ietf.org/doc/html/rfc7231#section-6).
     */
    public readonly httpCodeMax!: pulumi.Output<number | undefined>;
    /**
     * OK/fail criteria for HTTP response code.
     */
    public readonly httpCodeMin!: pulumi.Output<number | undefined>;
    /**
     * The time interval between probe tests.
     */
    public readonly interval!: pulumi.Output<string | undefined>;
    /**
     * Task name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Total count of ICMP packets to send out within a single test.
     */
    public readonly packetCount!: pulumi.Output<number | undefined>;
    /**
     * The time between ICMP-request packet send.
     */
    public readonly packetInterval!: pulumi.Output<string | undefined>;
    /**
     * The total size of the IP ICMP packet.
     */
    public readonly packetSize!: pulumi.Output<number | undefined>;
    /**
     * TCP port (for both tcp-conn and http-get probes)
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Record type that will be used for DNS probe.
     */
    public readonly recordType!: pulumi.Output<string | undefined>;
    /**
     * Source IP address which the Netwatch will try to use in order to reach the host. If address is not present, then the
     * host will be considered as `down`.
     */
    public readonly srcAddress!: pulumi.Output<string | undefined>;
    /**
     * Time to wait before starting probe (on add, enable, or system start).
     */
    public readonly startDelay!: pulumi.Output<string | undefined>;
    /**
     * Time to wait until starting Netwatch probe after system startup.
     */
    public readonly startupDelay!: pulumi.Output<string | undefined>;
    /**
     * Script to execute at the end of every probe test.
     */
    public readonly testScript!: pulumi.Output<string | undefined>;
    /**
     * Fail threshold for rtt-avg.
     */
    public readonly thrAvg!: pulumi.Output<string | undefined>;
    /**
     * Fail threshold for http-resp-time.
     */
    public readonly thrHttpTime!: pulumi.Output<string | undefined>;
    /**
     * Fail threshold for rtt-jitter.
     */
    public readonly thrJitter!: pulumi.Output<string | undefined>;
    /**
     * Fail threshold for loss-count.
     */
    public readonly thrLossCount!: pulumi.Output<number | undefined>;
    /**
     * Fail threshold for loss-percent.
     */
    public readonly thrLossPercent!: pulumi.Output<number | undefined>;
    /**
     * Fail threshold for rtt-max (a value above thr-max is a probe fail).
     */
    public readonly thrMax!: pulumi.Output<string | undefined>;
    /**
     * Fail threshold for rtt-stdev.
     */
    public readonly thrStdev!: pulumi.Output<string | undefined>;
    /**
     * Fail threshold for tcp-connect-time, the configuration uses microseconds, if the time unit is not specified (s/m/h), log
     * and status pages display the same value in milliseconds.
     */
    public readonly thrTcpConnTime!: pulumi.Output<string | undefined>;
    /**
     * Max time limit to wait for a response.
     */
    public readonly timeout!: pulumi.Output<string | undefined>;
    public readonly toolNetwatchId!: pulumi.Output<string>;
    /**
     * Manually set time to live value for ICMP packet.
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * Type of the probe: - icmp - (ping-style) series of ICMP request-response with statistics - tcp-conn - test TCP
     * connection (3-way handshake) to a server specified by IP and port - http-get - do an HTTP Get request and test for a
     * range of correct replies - simple - simplified ICMP probe, with fewer options than **ICMP** type, used for backward
     * compatibility with the older Netwatch version
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Script to execute on the event of probe state change `fail` -> `OK`.
     */
    public readonly upScript!: pulumi.Output<string | undefined>;

    /**
     * Create a ToolNetwatch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ToolNetwatchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ToolNetwatchArgs | ToolNetwatchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ToolNetwatchState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["___skip_"] = state ? state.___skip_ : undefined;
            resourceInputs["acceptIcmpTimeExceeded"] = state ? state.acceptIcmpTimeExceeded : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dnsServer"] = state ? state.dnsServer : undefined;
            resourceInputs["downScript"] = state ? state.downScript : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["httpCodeMax"] = state ? state.httpCodeMax : undefined;
            resourceInputs["httpCodeMin"] = state ? state.httpCodeMin : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetCount"] = state ? state.packetCount : undefined;
            resourceInputs["packetInterval"] = state ? state.packetInterval : undefined;
            resourceInputs["packetSize"] = state ? state.packetSize : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["recordType"] = state ? state.recordType : undefined;
            resourceInputs["srcAddress"] = state ? state.srcAddress : undefined;
            resourceInputs["startDelay"] = state ? state.startDelay : undefined;
            resourceInputs["startupDelay"] = state ? state.startupDelay : undefined;
            resourceInputs["testScript"] = state ? state.testScript : undefined;
            resourceInputs["thrAvg"] = state ? state.thrAvg : undefined;
            resourceInputs["thrHttpTime"] = state ? state.thrHttpTime : undefined;
            resourceInputs["thrJitter"] = state ? state.thrJitter : undefined;
            resourceInputs["thrLossCount"] = state ? state.thrLossCount : undefined;
            resourceInputs["thrLossPercent"] = state ? state.thrLossPercent : undefined;
            resourceInputs["thrMax"] = state ? state.thrMax : undefined;
            resourceInputs["thrStdev"] = state ? state.thrStdev : undefined;
            resourceInputs["thrTcpConnTime"] = state ? state.thrTcpConnTime : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["toolNetwatchId"] = state ? state.toolNetwatchId : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["upScript"] = state ? state.upScript : undefined;
        } else {
            const args = argsOrState as ToolNetwatchArgs | undefined;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["___skip_"] = args ? args.___skip_ : undefined;
            resourceInputs["acceptIcmpTimeExceeded"] = args ? args.acceptIcmpTimeExceeded : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["dnsServer"] = args ? args.dnsServer : undefined;
            resourceInputs["downScript"] = args ? args.downScript : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["httpCodeMax"] = args ? args.httpCodeMax : undefined;
            resourceInputs["httpCodeMin"] = args ? args.httpCodeMin : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetCount"] = args ? args.packetCount : undefined;
            resourceInputs["packetInterval"] = args ? args.packetInterval : undefined;
            resourceInputs["packetSize"] = args ? args.packetSize : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["srcAddress"] = args ? args.srcAddress : undefined;
            resourceInputs["startDelay"] = args ? args.startDelay : undefined;
            resourceInputs["startupDelay"] = args ? args.startupDelay : undefined;
            resourceInputs["testScript"] = args ? args.testScript : undefined;
            resourceInputs["thrAvg"] = args ? args.thrAvg : undefined;
            resourceInputs["thrHttpTime"] = args ? args.thrHttpTime : undefined;
            resourceInputs["thrJitter"] = args ? args.thrJitter : undefined;
            resourceInputs["thrLossCount"] = args ? args.thrLossCount : undefined;
            resourceInputs["thrLossPercent"] = args ? args.thrLossPercent : undefined;
            resourceInputs["thrMax"] = args ? args.thrMax : undefined;
            resourceInputs["thrStdev"] = args ? args.thrStdev : undefined;
            resourceInputs["thrTcpConnTime"] = args ? args.thrTcpConnTime : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["toolNetwatchId"] = args ? args.toolNetwatchId : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["upScript"] = args ? args.upScript : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ToolNetwatch.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ToolNetwatch resources.
 */
export interface ToolNetwatchState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * If the ICMP `time exceeded` message should be considered a valid response.
     */
    acceptIcmpTimeExceeded?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * The DNS server that the probe should send its requests to, if not specified it will use the value from `/ip dns`.
     */
    dnsServer?: pulumi.Input<string>;
    /**
     * Script to execute on the event of probe state change `OK` -> `fail`.
     */
    downScript?: pulumi.Input<string>;
    /**
     * The IP address of the server to be probed. Formats: - ipv4 - ipv4@vrf - ipv6 - ipv6@vrf - ipv6-linklocal%interface
     */
    host?: pulumi.Input<string>;
    /**
     * Response in the range [http-code-min , http-code-max] is a probe pass/OK; outside - a probe fail. See
     * [mozilla-http-status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) or
     * [rfc7231](https://datatracker.ietf.org/doc/html/rfc7231#section-6).
     */
    httpCodeMax?: pulumi.Input<number>;
    /**
     * OK/fail criteria for HTTP response code.
     */
    httpCodeMin?: pulumi.Input<number>;
    /**
     * The time interval between probe tests.
     */
    interval?: pulumi.Input<string>;
    /**
     * Task name.
     */
    name?: pulumi.Input<string>;
    /**
     * Total count of ICMP packets to send out within a single test.
     */
    packetCount?: pulumi.Input<number>;
    /**
     * The time between ICMP-request packet send.
     */
    packetInterval?: pulumi.Input<string>;
    /**
     * The total size of the IP ICMP packet.
     */
    packetSize?: pulumi.Input<number>;
    /**
     * TCP port (for both tcp-conn and http-get probes)
     */
    port?: pulumi.Input<number>;
    /**
     * Record type that will be used for DNS probe.
     */
    recordType?: pulumi.Input<string>;
    /**
     * Source IP address which the Netwatch will try to use in order to reach the host. If address is not present, then the
     * host will be considered as `down`.
     */
    srcAddress?: pulumi.Input<string>;
    /**
     * Time to wait before starting probe (on add, enable, or system start).
     */
    startDelay?: pulumi.Input<string>;
    /**
     * Time to wait until starting Netwatch probe after system startup.
     */
    startupDelay?: pulumi.Input<string>;
    /**
     * Script to execute at the end of every probe test.
     */
    testScript?: pulumi.Input<string>;
    /**
     * Fail threshold for rtt-avg.
     */
    thrAvg?: pulumi.Input<string>;
    /**
     * Fail threshold for http-resp-time.
     */
    thrHttpTime?: pulumi.Input<string>;
    /**
     * Fail threshold for rtt-jitter.
     */
    thrJitter?: pulumi.Input<string>;
    /**
     * Fail threshold for loss-count.
     */
    thrLossCount?: pulumi.Input<number>;
    /**
     * Fail threshold for loss-percent.
     */
    thrLossPercent?: pulumi.Input<number>;
    /**
     * Fail threshold for rtt-max (a value above thr-max is a probe fail).
     */
    thrMax?: pulumi.Input<string>;
    /**
     * Fail threshold for rtt-stdev.
     */
    thrStdev?: pulumi.Input<string>;
    /**
     * Fail threshold for tcp-connect-time, the configuration uses microseconds, if the time unit is not specified (s/m/h), log
     * and status pages display the same value in milliseconds.
     */
    thrTcpConnTime?: pulumi.Input<string>;
    /**
     * Max time limit to wait for a response.
     */
    timeout?: pulumi.Input<string>;
    toolNetwatchId?: pulumi.Input<string>;
    /**
     * Manually set time to live value for ICMP packet.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Type of the probe: - icmp - (ping-style) series of ICMP request-response with statistics - tcp-conn - test TCP
     * connection (3-way handshake) to a server specified by IP and port - http-get - do an HTTP Get request and test for a
     * range of correct replies - simple - simplified ICMP probe, with fewer options than **ICMP** type, used for backward
     * compatibility with the older Netwatch version
     */
    type?: pulumi.Input<string>;
    /**
     * Script to execute on the event of probe state change `fail` -> `OK`.
     */
    upScript?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ToolNetwatch resource.
 */
export interface ToolNetwatchArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___skip_?: pulumi.Input<string>;
    /**
     * If the ICMP `time exceeded` message should be considered a valid response.
     */
    acceptIcmpTimeExceeded?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * The DNS server that the probe should send its requests to, if not specified it will use the value from `/ip dns`.
     */
    dnsServer?: pulumi.Input<string>;
    /**
     * Script to execute on the event of probe state change `OK` -> `fail`.
     */
    downScript?: pulumi.Input<string>;
    /**
     * The IP address of the server to be probed. Formats: - ipv4 - ipv4@vrf - ipv6 - ipv6@vrf - ipv6-linklocal%interface
     */
    host: pulumi.Input<string>;
    /**
     * Response in the range [http-code-min , http-code-max] is a probe pass/OK; outside - a probe fail. See
     * [mozilla-http-status](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status) or
     * [rfc7231](https://datatracker.ietf.org/doc/html/rfc7231#section-6).
     */
    httpCodeMax?: pulumi.Input<number>;
    /**
     * OK/fail criteria for HTTP response code.
     */
    httpCodeMin?: pulumi.Input<number>;
    /**
     * The time interval between probe tests.
     */
    interval?: pulumi.Input<string>;
    /**
     * Task name.
     */
    name?: pulumi.Input<string>;
    /**
     * Total count of ICMP packets to send out within a single test.
     */
    packetCount?: pulumi.Input<number>;
    /**
     * The time between ICMP-request packet send.
     */
    packetInterval?: pulumi.Input<string>;
    /**
     * The total size of the IP ICMP packet.
     */
    packetSize?: pulumi.Input<number>;
    /**
     * TCP port (for both tcp-conn and http-get probes)
     */
    port?: pulumi.Input<number>;
    /**
     * Record type that will be used for DNS probe.
     */
    recordType?: pulumi.Input<string>;
    /**
     * Source IP address which the Netwatch will try to use in order to reach the host. If address is not present, then the
     * host will be considered as `down`.
     */
    srcAddress?: pulumi.Input<string>;
    /**
     * Time to wait before starting probe (on add, enable, or system start).
     */
    startDelay?: pulumi.Input<string>;
    /**
     * Time to wait until starting Netwatch probe after system startup.
     */
    startupDelay?: pulumi.Input<string>;
    /**
     * Script to execute at the end of every probe test.
     */
    testScript?: pulumi.Input<string>;
    /**
     * Fail threshold for rtt-avg.
     */
    thrAvg?: pulumi.Input<string>;
    /**
     * Fail threshold for http-resp-time.
     */
    thrHttpTime?: pulumi.Input<string>;
    /**
     * Fail threshold for rtt-jitter.
     */
    thrJitter?: pulumi.Input<string>;
    /**
     * Fail threshold for loss-count.
     */
    thrLossCount?: pulumi.Input<number>;
    /**
     * Fail threshold for loss-percent.
     */
    thrLossPercent?: pulumi.Input<number>;
    /**
     * Fail threshold for rtt-max (a value above thr-max is a probe fail).
     */
    thrMax?: pulumi.Input<string>;
    /**
     * Fail threshold for rtt-stdev.
     */
    thrStdev?: pulumi.Input<string>;
    /**
     * Fail threshold for tcp-connect-time, the configuration uses microseconds, if the time unit is not specified (s/m/h), log
     * and status pages display the same value in milliseconds.
     */
    thrTcpConnTime?: pulumi.Input<string>;
    /**
     * Max time limit to wait for a response.
     */
    timeout?: pulumi.Input<string>;
    toolNetwatchId?: pulumi.Input<string>;
    /**
     * Manually set time to live value for ICMP packet.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Type of the probe: - icmp - (ping-style) series of ICMP request-response with statistics - tcp-conn - test TCP
     * connection (3-way handshake) to a server specified by IP and port - http-get - do an HTTP Get request and test for a
     * range of correct replies - simple - simplified ICMP probe, with fewer options than **ICMP** type, used for backward
     * compatibility with the older Netwatch version
     */
    type?: pulumi.Input<string>;
    /**
     * Script to execute on the event of probe state change `fail` -> `OK`.
     */
    upScript?: pulumi.Input<string>;
}
