// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UserManagerLimitation extends pulumi.CustomResource {
    /**
     * Get an existing UserManagerLimitation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserManagerLimitationState, opts?: pulumi.CustomResourceOptions): UserManagerLimitation {
        return new UserManagerLimitation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/userManagerLimitation:UserManagerLimitation';

    /**
     * Returns true if the given object is an instance of UserManagerLimitation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserManagerLimitation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserManagerLimitation.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * The total amount of traffic a user can download in bytes.
     */
    public readonly downloadLimit!: pulumi.Output<number | undefined>;
    /**
     * Unique name of the limitation.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly rateLimitBurstRx!: pulumi.Output<number | undefined>;
    public readonly rateLimitBurstThresholdRx!: pulumi.Output<number | undefined>;
    public readonly rateLimitBurstThresholdTx!: pulumi.Output<number | undefined>;
    public readonly rateLimitBurstTimeRx!: pulumi.Output<string | undefined>;
    public readonly rateLimitBurstTimeTx!: pulumi.Output<string | undefined>;
    public readonly rateLimitBurstTx!: pulumi.Output<number | undefined>;
    public readonly rateLimitMinRx!: pulumi.Output<number | undefined>;
    public readonly rateLimitMinTx!: pulumi.Output<number | undefined>;
    public readonly rateLimitPriority!: pulumi.Output<number | undefined>;
    public readonly rateLimitRx!: pulumi.Output<number | undefined>;
    public readonly rateLimitTx!: pulumi.Output<number | undefined>;
    /**
     * The interval from `reset_counters_start_time` when all associated user statistics are cleared.
     */
    public readonly resetCountersInterval!: pulumi.Output<string | undefined>;
    /**
     * Static date and time value from which `reset_counters_interval` is calculated.
     */
    public readonly resetCountersStartTime!: pulumi.Output<string | undefined>;
    /**
     * The total amount of aggregated (download+upload) traffic in bytes.
     */
    public readonly transferLimit!: pulumi.Output<number | undefined>;
    /**
     * The total amount of traffic a user can upload in bytes.
     */
    public readonly uploadLimit!: pulumi.Output<number | undefined>;
    /**
     * The total amount of uptime a user can stay active.
     */
    public readonly uptimeLimit!: pulumi.Output<string | undefined>;
    public readonly userManagerLimitationId!: pulumi.Output<string>;

    /**
     * Create a UserManagerLimitation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserManagerLimitationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserManagerLimitationArgs | UserManagerLimitationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserManagerLimitationState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["downloadLimit"] = state ? state.downloadLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rateLimitBurstRx"] = state ? state.rateLimitBurstRx : undefined;
            resourceInputs["rateLimitBurstThresholdRx"] = state ? state.rateLimitBurstThresholdRx : undefined;
            resourceInputs["rateLimitBurstThresholdTx"] = state ? state.rateLimitBurstThresholdTx : undefined;
            resourceInputs["rateLimitBurstTimeRx"] = state ? state.rateLimitBurstTimeRx : undefined;
            resourceInputs["rateLimitBurstTimeTx"] = state ? state.rateLimitBurstTimeTx : undefined;
            resourceInputs["rateLimitBurstTx"] = state ? state.rateLimitBurstTx : undefined;
            resourceInputs["rateLimitMinRx"] = state ? state.rateLimitMinRx : undefined;
            resourceInputs["rateLimitMinTx"] = state ? state.rateLimitMinTx : undefined;
            resourceInputs["rateLimitPriority"] = state ? state.rateLimitPriority : undefined;
            resourceInputs["rateLimitRx"] = state ? state.rateLimitRx : undefined;
            resourceInputs["rateLimitTx"] = state ? state.rateLimitTx : undefined;
            resourceInputs["resetCountersInterval"] = state ? state.resetCountersInterval : undefined;
            resourceInputs["resetCountersStartTime"] = state ? state.resetCountersStartTime : undefined;
            resourceInputs["transferLimit"] = state ? state.transferLimit : undefined;
            resourceInputs["uploadLimit"] = state ? state.uploadLimit : undefined;
            resourceInputs["uptimeLimit"] = state ? state.uptimeLimit : undefined;
            resourceInputs["userManagerLimitationId"] = state ? state.userManagerLimitationId : undefined;
        } else {
            const args = argsOrState as UserManagerLimitationArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["downloadLimit"] = args ? args.downloadLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rateLimitBurstRx"] = args ? args.rateLimitBurstRx : undefined;
            resourceInputs["rateLimitBurstThresholdRx"] = args ? args.rateLimitBurstThresholdRx : undefined;
            resourceInputs["rateLimitBurstThresholdTx"] = args ? args.rateLimitBurstThresholdTx : undefined;
            resourceInputs["rateLimitBurstTimeRx"] = args ? args.rateLimitBurstTimeRx : undefined;
            resourceInputs["rateLimitBurstTimeTx"] = args ? args.rateLimitBurstTimeTx : undefined;
            resourceInputs["rateLimitBurstTx"] = args ? args.rateLimitBurstTx : undefined;
            resourceInputs["rateLimitMinRx"] = args ? args.rateLimitMinRx : undefined;
            resourceInputs["rateLimitMinTx"] = args ? args.rateLimitMinTx : undefined;
            resourceInputs["rateLimitPriority"] = args ? args.rateLimitPriority : undefined;
            resourceInputs["rateLimitRx"] = args ? args.rateLimitRx : undefined;
            resourceInputs["rateLimitTx"] = args ? args.rateLimitTx : undefined;
            resourceInputs["resetCountersInterval"] = args ? args.resetCountersInterval : undefined;
            resourceInputs["resetCountersStartTime"] = args ? args.resetCountersStartTime : undefined;
            resourceInputs["transferLimit"] = args ? args.transferLimit : undefined;
            resourceInputs["uploadLimit"] = args ? args.uploadLimit : undefined;
            resourceInputs["uptimeLimit"] = args ? args.uptimeLimit : undefined;
            resourceInputs["userManagerLimitationId"] = args ? args.userManagerLimitationId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserManagerLimitation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserManagerLimitation resources.
 */
export interface UserManagerLimitationState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * The total amount of traffic a user can download in bytes.
     */
    downloadLimit?: pulumi.Input<number>;
    /**
     * Unique name of the limitation.
     */
    name?: pulumi.Input<string>;
    rateLimitBurstRx?: pulumi.Input<number>;
    rateLimitBurstThresholdRx?: pulumi.Input<number>;
    rateLimitBurstThresholdTx?: pulumi.Input<number>;
    rateLimitBurstTimeRx?: pulumi.Input<string>;
    rateLimitBurstTimeTx?: pulumi.Input<string>;
    rateLimitBurstTx?: pulumi.Input<number>;
    rateLimitMinRx?: pulumi.Input<number>;
    rateLimitMinTx?: pulumi.Input<number>;
    rateLimitPriority?: pulumi.Input<number>;
    rateLimitRx?: pulumi.Input<number>;
    rateLimitTx?: pulumi.Input<number>;
    /**
     * The interval from `reset_counters_start_time` when all associated user statistics are cleared.
     */
    resetCountersInterval?: pulumi.Input<string>;
    /**
     * Static date and time value from which `reset_counters_interval` is calculated.
     */
    resetCountersStartTime?: pulumi.Input<string>;
    /**
     * The total amount of aggregated (download+upload) traffic in bytes.
     */
    transferLimit?: pulumi.Input<number>;
    /**
     * The total amount of traffic a user can upload in bytes.
     */
    uploadLimit?: pulumi.Input<number>;
    /**
     * The total amount of uptime a user can stay active.
     */
    uptimeLimit?: pulumi.Input<string>;
    userManagerLimitationId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserManagerLimitation resource.
 */
export interface UserManagerLimitationArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * The total amount of traffic a user can download in bytes.
     */
    downloadLimit?: pulumi.Input<number>;
    /**
     * Unique name of the limitation.
     */
    name?: pulumi.Input<string>;
    rateLimitBurstRx?: pulumi.Input<number>;
    rateLimitBurstThresholdRx?: pulumi.Input<number>;
    rateLimitBurstThresholdTx?: pulumi.Input<number>;
    rateLimitBurstTimeRx?: pulumi.Input<string>;
    rateLimitBurstTimeTx?: pulumi.Input<string>;
    rateLimitBurstTx?: pulumi.Input<number>;
    rateLimitMinRx?: pulumi.Input<number>;
    rateLimitMinTx?: pulumi.Input<number>;
    rateLimitPriority?: pulumi.Input<number>;
    rateLimitRx?: pulumi.Input<number>;
    rateLimitTx?: pulumi.Input<number>;
    /**
     * The interval from `reset_counters_start_time` when all associated user statistics are cleared.
     */
    resetCountersInterval?: pulumi.Input<string>;
    /**
     * Static date and time value from which `reset_counters_interval` is calculated.
     */
    resetCountersStartTime?: pulumi.Input<string>;
    /**
     * The total amount of aggregated (download+upload) traffic in bytes.
     */
    transferLimit?: pulumi.Input<number>;
    /**
     * The total amount of traffic a user can upload in bytes.
     */
    uploadLimit?: pulumi.Input<number>;
    /**
     * The total amount of uptime a user can stay active.
     */
    uptimeLimit?: pulumi.Input<string>;
    userManagerLimitationId?: pulumi.Input<string>;
}
