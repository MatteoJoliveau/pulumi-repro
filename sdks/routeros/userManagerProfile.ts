// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UserManagerProfile extends pulumi.CustomResource {
    /**
     * Get an existing UserManagerProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserManagerProfileState, opts?: pulumi.CustomResourceOptions): UserManagerProfile {
        return new UserManagerProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/userManagerProfile:UserManagerProfile';

    /**
     * Returns true if the given object is an instance of UserManagerProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserManagerProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserManagerProfile.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Unique name of the profile.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name that will be shown to users in the web interface.
     */
    public readonly nameForUsers!: pulumi.Output<string | undefined>;
    /**
     * An option whether to allow multiple sessions with the same user name.
     */
    public readonly overrideSharedUsers!: pulumi.Output<string | undefined>;
    /**
     * The price of the profile.
     */
    public readonly price!: pulumi.Output<number | undefined>;
    /**
     * The time when the profile becomes active (`assigned` - immediately when the profile entry is created, `first-auth` -
     * upon first authentication request).
     */
    public readonly startsWhen!: pulumi.Output<string | undefined>;
    public readonly userManagerProfileId!: pulumi.Output<string>;
    /**
     * The total amount of time a user can use this profile.
     */
    public readonly validity!: pulumi.Output<string | undefined>;

    /**
     * Create a UserManagerProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserManagerProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserManagerProfileArgs | UserManagerProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserManagerProfileState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nameForUsers"] = state ? state.nameForUsers : undefined;
            resourceInputs["overrideSharedUsers"] = state ? state.overrideSharedUsers : undefined;
            resourceInputs["price"] = state ? state.price : undefined;
            resourceInputs["startsWhen"] = state ? state.startsWhen : undefined;
            resourceInputs["userManagerProfileId"] = state ? state.userManagerProfileId : undefined;
            resourceInputs["validity"] = state ? state.validity : undefined;
        } else {
            const args = argsOrState as UserManagerProfileArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nameForUsers"] = args ? args.nameForUsers : undefined;
            resourceInputs["overrideSharedUsers"] = args ? args.overrideSharedUsers : undefined;
            resourceInputs["price"] = args ? args.price : undefined;
            resourceInputs["startsWhen"] = args ? args.startsWhen : undefined;
            resourceInputs["userManagerProfileId"] = args ? args.userManagerProfileId : undefined;
            resourceInputs["validity"] = args ? args.validity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserManagerProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserManagerProfile resources.
 */
export interface UserManagerProfileState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Unique name of the profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The name that will be shown to users in the web interface.
     */
    nameForUsers?: pulumi.Input<string>;
    /**
     * An option whether to allow multiple sessions with the same user name.
     */
    overrideSharedUsers?: pulumi.Input<string>;
    /**
     * The price of the profile.
     */
    price?: pulumi.Input<number>;
    /**
     * The time when the profile becomes active (`assigned` - immediately when the profile entry is created, `first-auth` -
     * upon first authentication request).
     */
    startsWhen?: pulumi.Input<string>;
    userManagerProfileId?: pulumi.Input<string>;
    /**
     * The total amount of time a user can use this profile.
     */
    validity?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserManagerProfile resource.
 */
export interface UserManagerProfileArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Unique name of the profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The name that will be shown to users in the web interface.
     */
    nameForUsers?: pulumi.Input<string>;
    /**
     * An option whether to allow multiple sessions with the same user name.
     */
    overrideSharedUsers?: pulumi.Input<string>;
    /**
     * The price of the profile.
     */
    price?: pulumi.Input<number>;
    /**
     * The time when the profile becomes active (`assigned` - immediately when the profile entry is created, `first-auth` -
     * upon first authentication request).
     */
    startsWhen?: pulumi.Input<string>;
    userManagerProfileId?: pulumi.Input<string>;
    /**
     * The total amount of time a user can use this profile.
     */
    validity?: pulumi.Input<string>;
}
