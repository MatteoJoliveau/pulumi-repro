// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UserManagerSettings extends pulumi.CustomResource {
    /**
     * Get an existing UserManagerSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserManagerSettingsState, opts?: pulumi.CustomResourceOptions): UserManagerSettings {
        return new UserManagerSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/userManagerSettings:UserManagerSettings';

    /**
     * Returns true if the given object is an instance of UserManagerSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserManagerSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserManagerSettings.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Port to listen for RADIUS accounting requests.
     */
    public readonly accountingPort!: pulumi.Output<number | undefined>;
    /**
     * Port to listen for RADIUS authentication requests.
     */
    public readonly authenticationPort!: pulumi.Output<number | undefined>;
    /**
     * Certificate for use in EAP TLS-type authentication methods.
     */
    public readonly certificate!: pulumi.Output<string | undefined>;
    /**
     * An option whether the User Manager functionality is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * An option whether to require `Message-Authenticator` in received Access-Accept/Challenge/Reject messages.
     */
    public readonly requireMessageAuth!: pulumi.Output<string | undefined>;
    /**
     * An option whether to use Profiles and Limitations. When set to `false`, only User configuration is required to run User
     * Manager.
     */
    public readonly useProfiles!: pulumi.Output<boolean | undefined>;
    public readonly userManagerSettingsId!: pulumi.Output<string>;

    /**
     * Create a UserManagerSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserManagerSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserManagerSettingsArgs | UserManagerSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserManagerSettingsState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["accountingPort"] = state ? state.accountingPort : undefined;
            resourceInputs["authenticationPort"] = state ? state.authenticationPort : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["requireMessageAuth"] = state ? state.requireMessageAuth : undefined;
            resourceInputs["useProfiles"] = state ? state.useProfiles : undefined;
            resourceInputs["userManagerSettingsId"] = state ? state.userManagerSettingsId : undefined;
        } else {
            const args = argsOrState as UserManagerSettingsArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["accountingPort"] = args ? args.accountingPort : undefined;
            resourceInputs["authenticationPort"] = args ? args.authenticationPort : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["requireMessageAuth"] = args ? args.requireMessageAuth : undefined;
            resourceInputs["useProfiles"] = args ? args.useProfiles : undefined;
            resourceInputs["userManagerSettingsId"] = args ? args.userManagerSettingsId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserManagerSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserManagerSettings resources.
 */
export interface UserManagerSettingsState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Port to listen for RADIUS accounting requests.
     */
    accountingPort?: pulumi.Input<number>;
    /**
     * Port to listen for RADIUS authentication requests.
     */
    authenticationPort?: pulumi.Input<number>;
    /**
     * Certificate for use in EAP TLS-type authentication methods.
     */
    certificate?: pulumi.Input<string>;
    /**
     * An option whether the User Manager functionality is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * An option whether to require `Message-Authenticator` in received Access-Accept/Challenge/Reject messages.
     */
    requireMessageAuth?: pulumi.Input<string>;
    /**
     * An option whether to use Profiles and Limitations. When set to `false`, only User configuration is required to run User
     * Manager.
     */
    useProfiles?: pulumi.Input<boolean>;
    userManagerSettingsId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserManagerSettings resource.
 */
export interface UserManagerSettingsArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Port to listen for RADIUS accounting requests.
     */
    accountingPort?: pulumi.Input<number>;
    /**
     * Port to listen for RADIUS authentication requests.
     */
    authenticationPort?: pulumi.Input<number>;
    /**
     * Certificate for use in EAP TLS-type authentication methods.
     */
    certificate?: pulumi.Input<string>;
    /**
     * An option whether the User Manager functionality is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * An option whether to require `Message-Authenticator` in received Access-Accept/Challenge/Reject messages.
     */
    requireMessageAuth?: pulumi.Input<string>;
    /**
     * An option whether to use Profiles and Limitations. When set to `false`, only User configuration is required to run User
     * Manager.
     */
    useProfiles?: pulumi.Input<boolean>;
    userManagerSettingsId?: pulumi.Input<string>;
}
