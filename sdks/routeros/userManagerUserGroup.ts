// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class UserManagerUserGroup extends pulumi.CustomResource {
    /**
     * Get an existing UserManagerUserGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserManagerUserGroupState, opts?: pulumi.CustomResourceOptions): UserManagerUserGroup {
        return new UserManagerUserGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/userManagerUserGroup:UserManagerUserGroup';

    /**
     * Returns true if the given object is an instance of UserManagerUserGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserManagerUserGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserManagerUserGroup.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * A custom set of colon-separated attributes with their values will be added to `Access-Accept` messages for users in this
     * group.
     */
    public readonly attributes!: pulumi.Output<string[] | undefined>;
    /**
     * It's the default item.
     */
    public /*out*/ readonly default!: pulumi.Output<boolean>;
    /**
     * The default name of the group.
     */
    public /*out*/ readonly defaultName!: pulumi.Output<string>;
    /**
     * A set of allowed authentication methods for tunneled authentication methods (`ttls-pap`, `ttls-chap`, `ttls-mschap1`,
     * `ttls-mschap2`, `peap-mschap2`).
     */
    public readonly innerAuths!: pulumi.Output<string[] | undefined>;
    /**
     * Unique name of the group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A set of allowed authentication methods (`pap`, `chap`, `mschap1`, `mschap2`, `eap-tls`, `eap-ttls`, `eap-peap`,
     * `eap-mschap2`).
     */
    public readonly outerAuths!: pulumi.Output<string[] | undefined>;
    public readonly userManagerUserGroupId!: pulumi.Output<string>;

    /**
     * Create a UserManagerUserGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserManagerUserGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserManagerUserGroupArgs | UserManagerUserGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserManagerUserGroupState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["attributes"] = state ? state.attributes : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["defaultName"] = state ? state.defaultName : undefined;
            resourceInputs["innerAuths"] = state ? state.innerAuths : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outerAuths"] = state ? state.outerAuths : undefined;
            resourceInputs["userManagerUserGroupId"] = state ? state.userManagerUserGroupId : undefined;
        } else {
            const args = argsOrState as UserManagerUserGroupArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["attributes"] = args ? args.attributes : undefined;
            resourceInputs["innerAuths"] = args ? args.innerAuths : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outerAuths"] = args ? args.outerAuths : undefined;
            resourceInputs["userManagerUserGroupId"] = args ? args.userManagerUserGroupId : undefined;
            resourceInputs["default"] = undefined /*out*/;
            resourceInputs["defaultName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserManagerUserGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UserManagerUserGroup resources.
 */
export interface UserManagerUserGroupState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * A custom set of colon-separated attributes with their values will be added to `Access-Accept` messages for users in this
     * group.
     */
    attributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * It's the default item.
     */
    default?: pulumi.Input<boolean>;
    /**
     * The default name of the group.
     */
    defaultName?: pulumi.Input<string>;
    /**
     * A set of allowed authentication methods for tunneled authentication methods (`ttls-pap`, `ttls-chap`, `ttls-mschap1`,
     * `ttls-mschap2`, `peap-mschap2`).
     */
    innerAuths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique name of the group.
     */
    name?: pulumi.Input<string>;
    /**
     * A set of allowed authentication methods (`pap`, `chap`, `mschap1`, `mschap2`, `eap-tls`, `eap-ttls`, `eap-peap`,
     * `eap-mschap2`).
     */
    outerAuths?: pulumi.Input<pulumi.Input<string>[]>;
    userManagerUserGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserManagerUserGroup resource.
 */
export interface UserManagerUserGroupArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * A custom set of colon-separated attributes with their values will be added to `Access-Accept` messages for users in this
     * group.
     */
    attributes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of allowed authentication methods for tunneled authentication methods (`ttls-pap`, `ttls-chap`, `ttls-mschap1`,
     * `ttls-mschap2`, `peap-mschap2`).
     */
    innerAuths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique name of the group.
     */
    name?: pulumi.Input<string>;
    /**
     * A set of allowed authentication methods (`pap`, `chap`, `mschap1`, `mschap2`, `eap-tls`, `eap-ttls`, `eap-peap`,
     * `eap-mschap2`).
     */
    outerAuths?: pulumi.Input<pulumi.Input<string>[]>;
    userManagerUserGroupId?: pulumi.Input<string>;
}
