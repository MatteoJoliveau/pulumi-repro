// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WifiAccessList extends pulumi.CustomResource {
    /**
     * Get an existing WifiAccessList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WifiAccessListState, opts?: pulumi.CustomResourceOptions): WifiAccessList {
        return new WifiAccessList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/wifiAccessList:WifiAccessList';

    /**
     * Returns true if the given object is an instance of WifiAccessList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WifiAccessList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WifiAccessList.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * An action to take when a client matches.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * An option that permits the client's signal to be out of the range always or for some time interval.
     */
    public readonly allowSignalOutOfRange!: pulumi.Output<string | undefined>;
    /**
     * An option that specifies whether to deny forwarding data between clients connected to the same interface.
     */
    public readonly clientIsolation!: pulumi.Output<boolean | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * Interface name to compare with an interface to which the client actually connects to.
     */
    public readonly interface!: pulumi.Output<string | undefined>;
    /**
     * MAC address of the client.
     */
    public readonly macAddress!: pulumi.Output<string | undefined>;
    /**
     * MAC address mask to apply when comparing clients' addresses.
     */
    public readonly macAddressMask!: pulumi.Output<string | undefined>;
    /**
     * PSK passphrase for the client if some PSK authentication algorithm is used.
     */
    public readonly passphrase!: pulumi.Output<string | undefined>;
    /**
     * Before which position the rule will be inserted. > Please check the effect of this option, as it does not work as you
     * think! > Best way to use in conjunction with a data source. See example.
     */
    public readonly placeBefore!: pulumi.Output<string | undefined>;
    /**
     * An option that specifies if RADIUS traffic accounting should be used in case of RADIUS authentication of the client.
     */
    public readonly radiusAccounting!: pulumi.Output<boolean | undefined>;
    /**
     * The range in which the client signal must fall.
     */
    public readonly signalRange!: pulumi.Output<string | undefined>;
    /**
     * The regular expression to compare the actual SSID the client connects to.
     */
    public readonly ssidRegexp!: pulumi.Output<string | undefined>;
    /**
     * Time of the day and days of the week when the rule is applicable.
     */
    public readonly time!: pulumi.Output<string | undefined>;
    /**
     * VLAN ID to use for VLAN tagging or `none`.
     */
    public readonly vlanId!: pulumi.Output<string | undefined>;
    public readonly wifiAccessListId!: pulumi.Output<string>;

    /**
     * Create a WifiAccessList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WifiAccessListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WifiAccessListArgs | WifiAccessListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WifiAccessListState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["allowSignalOutOfRange"] = state ? state.allowSignalOutOfRange : undefined;
            resourceInputs["clientIsolation"] = state ? state.clientIsolation : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["macAddressMask"] = state ? state.macAddressMask : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["placeBefore"] = state ? state.placeBefore : undefined;
            resourceInputs["radiusAccounting"] = state ? state.radiusAccounting : undefined;
            resourceInputs["signalRange"] = state ? state.signalRange : undefined;
            resourceInputs["ssidRegexp"] = state ? state.ssidRegexp : undefined;
            resourceInputs["time"] = state ? state.time : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
            resourceInputs["wifiAccessListId"] = state ? state.wifiAccessListId : undefined;
        } else {
            const args = argsOrState as WifiAccessListArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["allowSignalOutOfRange"] = args ? args.allowSignalOutOfRange : undefined;
            resourceInputs["clientIsolation"] = args ? args.clientIsolation : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["macAddressMask"] = args ? args.macAddressMask : undefined;
            resourceInputs["passphrase"] = args ? args.passphrase : undefined;
            resourceInputs["placeBefore"] = args ? args.placeBefore : undefined;
            resourceInputs["radiusAccounting"] = args ? args.radiusAccounting : undefined;
            resourceInputs["signalRange"] = args ? args.signalRange : undefined;
            resourceInputs["ssidRegexp"] = args ? args.ssidRegexp : undefined;
            resourceInputs["time"] = args ? args.time : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["wifiAccessListId"] = args ? args.wifiAccessListId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WifiAccessList.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WifiAccessList resources.
 */
export interface WifiAccessListState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * An action to take when a client matches.
     */
    action?: pulumi.Input<string>;
    /**
     * An option that permits the client's signal to be out of the range always or for some time interval.
     */
    allowSignalOutOfRange?: pulumi.Input<string>;
    /**
     * An option that specifies whether to deny forwarding data between clients connected to the same interface.
     */
    clientIsolation?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Interface name to compare with an interface to which the client actually connects to.
     */
    interface?: pulumi.Input<string>;
    /**
     * MAC address of the client.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * MAC address mask to apply when comparing clients' addresses.
     */
    macAddressMask?: pulumi.Input<string>;
    /**
     * PSK passphrase for the client if some PSK authentication algorithm is used.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Before which position the rule will be inserted. > Please check the effect of this option, as it does not work as you
     * think! > Best way to use in conjunction with a data source. See example.
     */
    placeBefore?: pulumi.Input<string>;
    /**
     * An option that specifies if RADIUS traffic accounting should be used in case of RADIUS authentication of the client.
     */
    radiusAccounting?: pulumi.Input<boolean>;
    /**
     * The range in which the client signal must fall.
     */
    signalRange?: pulumi.Input<string>;
    /**
     * The regular expression to compare the actual SSID the client connects to.
     */
    ssidRegexp?: pulumi.Input<string>;
    /**
     * Time of the day and days of the week when the rule is applicable.
     */
    time?: pulumi.Input<string>;
    /**
     * VLAN ID to use for VLAN tagging or `none`.
     */
    vlanId?: pulumi.Input<string>;
    wifiAccessListId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WifiAccessList resource.
 */
export interface WifiAccessListArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * An action to take when a client matches.
     */
    action?: pulumi.Input<string>;
    /**
     * An option that permits the client's signal to be out of the range always or for some time interval.
     */
    allowSignalOutOfRange?: pulumi.Input<string>;
    /**
     * An option that specifies whether to deny forwarding data between clients connected to the same interface.
     */
    clientIsolation?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * Interface name to compare with an interface to which the client actually connects to.
     */
    interface?: pulumi.Input<string>;
    /**
     * MAC address of the client.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * MAC address mask to apply when comparing clients' addresses.
     */
    macAddressMask?: pulumi.Input<string>;
    /**
     * PSK passphrase for the client if some PSK authentication algorithm is used.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Before which position the rule will be inserted. > Please check the effect of this option, as it does not work as you
     * think! > Best way to use in conjunction with a data source. See example.
     */
    placeBefore?: pulumi.Input<string>;
    /**
     * An option that specifies if RADIUS traffic accounting should be used in case of RADIUS authentication of the client.
     */
    radiusAccounting?: pulumi.Input<boolean>;
    /**
     * The range in which the client signal must fall.
     */
    signalRange?: pulumi.Input<string>;
    /**
     * The regular expression to compare the actual SSID the client connects to.
     */
    ssidRegexp?: pulumi.Input<string>;
    /**
     * Time of the day and days of the week when the rule is applicable.
     */
    time?: pulumi.Input<string>;
    /**
     * VLAN ID to use for VLAN tagging or `none`.
     */
    vlanId?: pulumi.Input<string>;
    wifiAccessListId?: pulumi.Input<string>;
}
