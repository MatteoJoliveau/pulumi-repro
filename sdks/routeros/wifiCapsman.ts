// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WifiCapsman extends pulumi.CustomResource {
    /**
     * Get an existing WifiCapsman resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WifiCapsmanState, opts?: pulumi.CustomResourceOptions): WifiCapsman {
        return new WifiCapsman(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/wifiCapsman:WifiCapsman';

    /**
     * Returns true if the given object is an instance of WifiCapsman.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WifiCapsman {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WifiCapsman.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Device CA certificate.
     */
    public readonly caCertificate!: pulumi.Output<string | undefined>;
    /**
     * Device certificate.
     */
    public readonly certificate!: pulumi.Output<string | undefined>;
    /**
     * Disable or enable CAPsMAN functionality.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Generated CA certificate.
     */
    public /*out*/ readonly generatedCaCertificate!: pulumi.Output<string>;
    /**
     * Generated CAPsMAN certificate.
     */
    public /*out*/ readonly generatedCertificate!: pulumi.Output<string>;
    /**
     * List of interfaces on which CAPsMAN will listen for CAP connections.
     */
    public readonly interfaces!: pulumi.Output<string[] | undefined>;
    /**
     * Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files
     * section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the
     * same architecture as CAPsMAN will be upgraded.
     */
    public readonly packagePath!: pulumi.Output<string | undefined>;
    /**
     * Require all connecting CAPs to have a valid certificate.
     */
    public readonly requirePeerCertificate!: pulumi.Output<boolean | undefined>;
    /**
     * Upgrade policy options.
     */
    public readonly upgradePolicy!: pulumi.Output<string | undefined>;
    public readonly wifiCapsmanId!: pulumi.Output<string>;

    /**
     * Create a WifiCapsman resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WifiCapsmanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WifiCapsmanArgs | WifiCapsmanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WifiCapsmanState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["generatedCaCertificate"] = state ? state.generatedCaCertificate : undefined;
            resourceInputs["generatedCertificate"] = state ? state.generatedCertificate : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["packagePath"] = state ? state.packagePath : undefined;
            resourceInputs["requirePeerCertificate"] = state ? state.requirePeerCertificate : undefined;
            resourceInputs["upgradePolicy"] = state ? state.upgradePolicy : undefined;
            resourceInputs["wifiCapsmanId"] = state ? state.wifiCapsmanId : undefined;
        } else {
            const args = argsOrState as WifiCapsmanArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["caCertificate"] = args ? args.caCertificate : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["packagePath"] = args ? args.packagePath : undefined;
            resourceInputs["requirePeerCertificate"] = args ? args.requirePeerCertificate : undefined;
            resourceInputs["upgradePolicy"] = args ? args.upgradePolicy : undefined;
            resourceInputs["wifiCapsmanId"] = args ? args.wifiCapsmanId : undefined;
            resourceInputs["generatedCaCertificate"] = undefined /*out*/;
            resourceInputs["generatedCertificate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WifiCapsman.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WifiCapsman resources.
 */
export interface WifiCapsmanState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Device CA certificate.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * Device certificate.
     */
    certificate?: pulumi.Input<string>;
    /**
     * Disable or enable CAPsMAN functionality.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Generated CA certificate.
     */
    generatedCaCertificate?: pulumi.Input<string>;
    /**
     * Generated CAPsMAN certificate.
     */
    generatedCertificate?: pulumi.Input<string>;
    /**
     * List of interfaces on which CAPsMAN will listen for CAP connections.
     */
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files
     * section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the
     * same architecture as CAPsMAN will be upgraded.
     */
    packagePath?: pulumi.Input<string>;
    /**
     * Require all connecting CAPs to have a valid certificate.
     */
    requirePeerCertificate?: pulumi.Input<boolean>;
    /**
     * Upgrade policy options.
     */
    upgradePolicy?: pulumi.Input<string>;
    wifiCapsmanId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WifiCapsman resource.
 */
export interface WifiCapsmanArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Device CA certificate.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * Device certificate.
     */
    certificate?: pulumi.Input<string>;
    /**
     * Disable or enable CAPsMAN functionality.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of interfaces on which CAPsMAN will listen for CAP connections.
     */
    interfaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Folder location for the RouterOS packages. For example, use '/upgrade' to specify the upgrade folder from the files
     * section. If empty string is set, CAPsMAN can use built-in RouterOS packages, note that in this case only CAPs with the
     * same architecture as CAPsMAN will be upgraded.
     */
    packagePath?: pulumi.Input<string>;
    /**
     * Require all connecting CAPs to have a valid certificate.
     */
    requirePeerCertificate?: pulumi.Input<boolean>;
    /**
     * Upgrade policy options.
     */
    upgradePolicy?: pulumi.Input<string>;
    wifiCapsmanId?: pulumi.Input<string>;
}
