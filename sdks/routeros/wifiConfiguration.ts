// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WifiConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing WifiConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WifiConfigurationState, opts?: pulumi.CustomResourceOptions): WifiConfiguration {
        return new WifiConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/wifiConfiguration:WifiConfiguration';

    /**
     * Returns true if the given object is an instance of WifiConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WifiConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WifiConfiguration.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___ts_!: pulumi.Output<string | undefined>;
    /**
     * AAA inline settings.
     */
    public readonly aaa!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * An option overrides the default antenna gain.
     */
    public readonly antennaGain!: pulumi.Output<number | undefined>;
    /**
     * Time interval between beacon frames.
     */
    public readonly beaconInterval!: pulumi.Output<string | undefined>;
    /**
     * Radio chains to use for receiving signals.
     */
    public readonly chains!: pulumi.Output<number[] | undefined>;
    /**
     * Channel inline settings.
     */
    public readonly channel!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * An option determines which regulatory domain restrictions are applied to an interface.
     */
    public readonly country!: pulumi.Output<string | undefined>;
    /**
     * Datapath inline settings.
     */
    public readonly datapath!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * A period at which to transmit multicast traffic, when there are client devices in power save mode connected to the AP.
     */
    public readonly dtimPeriod!: pulumi.Output<number | undefined>;
    /**
     * This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks
     * that are shown by some client software. Changing this setting does not improve the security of the wireless network,
     * because SSID is included in other frames sent by the AP.
     */
    public readonly hideSsid!: pulumi.Output<boolean | undefined>;
    /**
     * Interworking inline settings.
     */
    public readonly interworking!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * An option to specify the remote CAP mode.
     */
    public readonly manager!: pulumi.Output<string | undefined>;
    /**
     * An option to specify the access point operational mode.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * An option to enable converting every multicast-address IP or IPv6 packet into multiple unicast-addresses frames for each
     * connected station.
     */
    public readonly multicastEnhance!: pulumi.Output<string | undefined>;
    /**
     * Name of the configuration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An option to specify the QoS classifier.
     */
    public readonly qosClassifier!: pulumi.Output<string | undefined>;
    /**
     * Security inline settings.
     */
    public readonly security!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
     */
    public readonly ssid!: pulumi.Output<string | undefined>;
    /**
     * Steering inline settings.
     */
    public readonly steering!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Radio chains to use for transmitting signals.
     */
    public readonly txChains!: pulumi.Output<number[] | undefined>;
    /**
     * A limit on the transmit power (in dBm) of the interface.
     */
    public readonly txPower!: pulumi.Output<number | undefined>;
    public readonly wifiConfigurationId!: pulumi.Output<string>;

    /**
     * Create a WifiConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WifiConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WifiConfigurationArgs | WifiConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WifiConfigurationState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["___ts_"] = state ? state.___ts_ : undefined;
            resourceInputs["aaa"] = state ? state.aaa : undefined;
            resourceInputs["antennaGain"] = state ? state.antennaGain : undefined;
            resourceInputs["beaconInterval"] = state ? state.beaconInterval : undefined;
            resourceInputs["chains"] = state ? state.chains : undefined;
            resourceInputs["channel"] = state ? state.channel : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["datapath"] = state ? state.datapath : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["dtimPeriod"] = state ? state.dtimPeriod : undefined;
            resourceInputs["hideSsid"] = state ? state.hideSsid : undefined;
            resourceInputs["interworking"] = state ? state.interworking : undefined;
            resourceInputs["manager"] = state ? state.manager : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["multicastEnhance"] = state ? state.multicastEnhance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["qosClassifier"] = state ? state.qosClassifier : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["ssid"] = state ? state.ssid : undefined;
            resourceInputs["steering"] = state ? state.steering : undefined;
            resourceInputs["txChains"] = state ? state.txChains : undefined;
            resourceInputs["txPower"] = state ? state.txPower : undefined;
            resourceInputs["wifiConfigurationId"] = state ? state.wifiConfigurationId : undefined;
        } else {
            const args = argsOrState as WifiConfigurationArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["___ts_"] = args ? args.___ts_ : undefined;
            resourceInputs["aaa"] = args ? args.aaa : undefined;
            resourceInputs["antennaGain"] = args ? args.antennaGain : undefined;
            resourceInputs["beaconInterval"] = args ? args.beaconInterval : undefined;
            resourceInputs["chains"] = args ? args.chains : undefined;
            resourceInputs["channel"] = args ? args.channel : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["datapath"] = args ? args.datapath : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["dtimPeriod"] = args ? args.dtimPeriod : undefined;
            resourceInputs["hideSsid"] = args ? args.hideSsid : undefined;
            resourceInputs["interworking"] = args ? args.interworking : undefined;
            resourceInputs["manager"] = args ? args.manager : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["multicastEnhance"] = args ? args.multicastEnhance : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["qosClassifier"] = args ? args.qosClassifier : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["ssid"] = args ? args.ssid : undefined;
            resourceInputs["steering"] = args ? args.steering : undefined;
            resourceInputs["txChains"] = args ? args.txChains : undefined;
            resourceInputs["txPower"] = args ? args.txPower : undefined;
            resourceInputs["wifiConfigurationId"] = args ? args.wifiConfigurationId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WifiConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WifiConfiguration resources.
 */
export interface WifiConfigurationState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___ts_?: pulumi.Input<string>;
    /**
     * AAA inline settings.
     */
    aaa?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An option overrides the default antenna gain.
     */
    antennaGain?: pulumi.Input<number>;
    /**
     * Time interval between beacon frames.
     */
    beaconInterval?: pulumi.Input<string>;
    /**
     * Radio chains to use for receiving signals.
     */
    chains?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Channel inline settings.
     */
    channel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    comment?: pulumi.Input<string>;
    /**
     * An option determines which regulatory domain restrictions are applied to an interface.
     */
    country?: pulumi.Input<string>;
    /**
     * Datapath inline settings.
     */
    datapath?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    disabled?: pulumi.Input<boolean>;
    /**
     * A period at which to transmit multicast traffic, when there are client devices in power save mode connected to the AP.
     */
    dtimPeriod?: pulumi.Input<number>;
    /**
     * This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks
     * that are shown by some client software. Changing this setting does not improve the security of the wireless network,
     * because SSID is included in other frames sent by the AP.
     */
    hideSsid?: pulumi.Input<boolean>;
    /**
     * Interworking inline settings.
     */
    interworking?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An option to specify the remote CAP mode.
     */
    manager?: pulumi.Input<string>;
    /**
     * An option to specify the access point operational mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * An option to enable converting every multicast-address IP or IPv6 packet into multiple unicast-addresses frames for each
     * connected station.
     */
    multicastEnhance?: pulumi.Input<string>;
    /**
     * Name of the configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * An option to specify the QoS classifier.
     */
    qosClassifier?: pulumi.Input<string>;
    /**
     * Security inline settings.
     */
    security?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
     */
    ssid?: pulumi.Input<string>;
    /**
     * Steering inline settings.
     */
    steering?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Radio chains to use for transmitting signals.
     */
    txChains?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A limit on the transmit power (in dBm) of the interface.
     */
    txPower?: pulumi.Input<number>;
    wifiConfigurationId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WifiConfiguration resource.
 */
export interface WifiConfigurationArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * <em>A set of transformations for field names. This is an internal service field, setting a value is not required.</em>
     */
    ___ts_?: pulumi.Input<string>;
    /**
     * AAA inline settings.
     */
    aaa?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An option overrides the default antenna gain.
     */
    antennaGain?: pulumi.Input<number>;
    /**
     * Time interval between beacon frames.
     */
    beaconInterval?: pulumi.Input<string>;
    /**
     * Radio chains to use for receiving signals.
     */
    chains?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Channel inline settings.
     */
    channel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    comment?: pulumi.Input<string>;
    /**
     * An option determines which regulatory domain restrictions are applied to an interface.
     */
    country?: pulumi.Input<string>;
    /**
     * Datapath inline settings.
     */
    datapath?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    disabled?: pulumi.Input<boolean>;
    /**
     * A period at which to transmit multicast traffic, when there are client devices in power save mode connected to the AP.
     */
    dtimPeriod?: pulumi.Input<number>;
    /**
     * This property has effect only in AP mode. Setting it to yes can remove this network from the list of wireless networks
     * that are shown by some client software. Changing this setting does not improve the security of the wireless network,
     * because SSID is included in other frames sent by the AP.
     */
    hideSsid?: pulumi.Input<boolean>;
    /**
     * Interworking inline settings.
     */
    interworking?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An option to specify the remote CAP mode.
     */
    manager?: pulumi.Input<string>;
    /**
     * An option to specify the access point operational mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * An option to enable converting every multicast-address IP or IPv6 packet into multiple unicast-addresses frames for each
     * connected station.
     */
    multicastEnhance?: pulumi.Input<string>;
    /**
     * Name of the configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * An option to specify the QoS classifier.
     */
    qosClassifier?: pulumi.Input<string>;
    /**
     * Security inline settings.
     */
    security?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * SSID (service set identifier) is a name broadcast in the beacons that identifies wireless network.
     */
    ssid?: pulumi.Input<string>;
    /**
     * Steering inline settings.
     */
    steering?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Radio chains to use for transmitting signals.
     */
    txChains?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A limit on the transmit power (in dBm) of the interface.
     */
    txPower?: pulumi.Input<number>;
    wifiConfigurationId?: pulumi.Input<string>;
}
