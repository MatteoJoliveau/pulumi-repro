// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WifiDatapath extends pulumi.CustomResource {
    /**
     * Get an existing WifiDatapath resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WifiDatapathState, opts?: pulumi.CustomResourceOptions): WifiDatapath {
        return new WifiDatapath(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/wifiDatapath:WifiDatapath';

    /**
     * Returns true if the given object is an instance of WifiDatapath.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WifiDatapath {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WifiDatapath.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Bridge interface to add the interface as a bridge port.
     */
    public readonly bridge!: pulumi.Output<string | undefined>;
    /**
     * Spanning tree protocol cost of the bridge port.
     */
    public readonly bridgeCost!: pulumi.Output<string | undefined>;
    /**
     * Bridge horizon to use when adding as a bridge port.
     */
    public readonly bridgeHorizon!: pulumi.Output<string | undefined>;
    /**
     * An option to toggle communication between clients connected to the same AP.
     */
    public readonly clientIsolation!: pulumi.Output<boolean | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * List to which add the interface as a member.
     */
    public readonly interfaceList!: pulumi.Output<string | undefined>;
    /**
     * Name of the datapath.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Default VLAN ID to assign to client devices connecting to this interface.
     */
    public readonly vlanId!: pulumi.Output<string | undefined>;
    public readonly wifiDatapathId!: pulumi.Output<string>;

    /**
     * Create a WifiDatapath resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WifiDatapathArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WifiDatapathArgs | WifiDatapathState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WifiDatapathState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["bridge"] = state ? state.bridge : undefined;
            resourceInputs["bridgeCost"] = state ? state.bridgeCost : undefined;
            resourceInputs["bridgeHorizon"] = state ? state.bridgeHorizon : undefined;
            resourceInputs["clientIsolation"] = state ? state.clientIsolation : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["interfaceList"] = state ? state.interfaceList : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
            resourceInputs["wifiDatapathId"] = state ? state.wifiDatapathId : undefined;
        } else {
            const args = argsOrState as WifiDatapathArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["bridge"] = args ? args.bridge : undefined;
            resourceInputs["bridgeCost"] = args ? args.bridgeCost : undefined;
            resourceInputs["bridgeHorizon"] = args ? args.bridgeHorizon : undefined;
            resourceInputs["clientIsolation"] = args ? args.clientIsolation : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["interfaceList"] = args ? args.interfaceList : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
            resourceInputs["wifiDatapathId"] = args ? args.wifiDatapathId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WifiDatapath.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WifiDatapath resources.
 */
export interface WifiDatapathState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Bridge interface to add the interface as a bridge port.
     */
    bridge?: pulumi.Input<string>;
    /**
     * Spanning tree protocol cost of the bridge port.
     */
    bridgeCost?: pulumi.Input<string>;
    /**
     * Bridge horizon to use when adding as a bridge port.
     */
    bridgeHorizon?: pulumi.Input<string>;
    /**
     * An option to toggle communication between clients connected to the same AP.
     */
    clientIsolation?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * List to which add the interface as a member.
     */
    interfaceList?: pulumi.Input<string>;
    /**
     * Name of the datapath.
     */
    name?: pulumi.Input<string>;
    /**
     * Default VLAN ID to assign to client devices connecting to this interface.
     */
    vlanId?: pulumi.Input<string>;
    wifiDatapathId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WifiDatapath resource.
 */
export interface WifiDatapathArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Bridge interface to add the interface as a bridge port.
     */
    bridge?: pulumi.Input<string>;
    /**
     * Spanning tree protocol cost of the bridge port.
     */
    bridgeCost?: pulumi.Input<string>;
    /**
     * Bridge horizon to use when adding as a bridge port.
     */
    bridgeHorizon?: pulumi.Input<string>;
    /**
     * An option to toggle communication between clients connected to the same AP.
     */
    clientIsolation?: pulumi.Input<boolean>;
    comment?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    /**
     * List to which add the interface as a member.
     */
    interfaceList?: pulumi.Input<string>;
    /**
     * Name of the datapath.
     */
    name?: pulumi.Input<string>;
    /**
     * Default VLAN ID to assign to client devices connecting to this interface.
     */
    vlanId?: pulumi.Input<string>;
    wifiDatapathId?: pulumi.Input<string>;
}
