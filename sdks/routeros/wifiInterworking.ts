// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WifiInterworking extends pulumi.CustomResource {
    /**
     * Get an existing WifiInterworking resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WifiInterworkingState, opts?: pulumi.CustomResourceOptions): WifiInterworking {
        return new WifiInterworking(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/wifiInterworking:WifiInterworking';

    /**
     * Returns true if the given object is an instance of WifiInterworking.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WifiInterworking {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WifiInterworking.__pulumiType;
    }

    /**
     * Cellular network advertisement information - country and network codes.
     */
    public readonly '3gppInfos'!: pulumi.Output<string[] | undefined>;
    /**
     * Cellular network advertisement information - country and network codes.
     */
    public readonly '3gppRaw'!: pulumi.Output<string | undefined>;
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * An option to enable Additional Steps Required for Access.
     */
    public readonly asra!: pulumi.Output<boolean | undefined>;
    /**
     * A list of authentication types that is only effective when `asra` is set to yes.
     */
    public readonly authenticationTypes!: pulumi.Output<string[] | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * A list to provide information about the allowed IP protocols and ports.
     */
    public readonly connectionCapabilities!: pulumi.Output<string[] | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * A list of fully qualified domain names (FQDN) that indicate the entity operating the Hotspot.
     */
    public readonly domainNames!: pulumi.Output<string[] | undefined>;
    /**
     * An option to enable Emergency Services Reachability.
     */
    public readonly esr!: pulumi.Output<boolean | undefined>;
    /**
     * Homogenous extended service set identifier (HESSID).
     */
    public readonly hessid!: pulumi.Output<string | undefined>;
    /**
     * An option to indicate Hotspot 2.0 capability of the Access Point.
     */
    public readonly hotspot20!: pulumi.Output<boolean | undefined>;
    /**
     * An option to indicate Downstream Group-Addressed Forwarding (DGAF) capability.
     */
    public readonly hotspot20Dgaf!: pulumi.Output<boolean | undefined>;
    /**
     * An option to indicate Internet availability.
     */
    public readonly internet!: pulumi.Output<boolean | undefined>;
    /**
     * An option to indicate IPv4 availability.
     */
    public readonly ipv4Availability!: pulumi.Output<string | undefined>;
    /**
     * An option to indicate IPv6 availability.
     */
    public readonly ipv6Availability!: pulumi.Output<string | undefined>;
    /**
     * Name of the interworking profile.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Information about network access type.
     */
    public readonly networkType!: pulumi.Output<string | undefined>;
    /**
     * A list with information about other available bands.
     */
    public readonly operationalClasses!: pulumi.Output<number[] | undefined>;
    /**
     * A list of colon-separated operator names and language codes.
     */
    public readonly operatorNames!: pulumi.Output<string[] | undefined>;
    /**
     * A list of colon-separated realm names and EAP methods.
     */
    public readonly realms!: pulumi.Output<string[] | undefined>;
    /**
     * A list of 'NAI Realm Tuple' excluding 'NAI Realm Data Field Length' field.
     */
    public readonly realmsRaws!: pulumi.Output<string[] | undefined>;
    /**
     * A list of Organization Identifiers (OI).
     */
    public readonly roamingOis!: pulumi.Output<string[] | undefined>;
    /**
     * An option to enable Unauthenticated Emergency Service Accessibility.
     */
    public readonly uesa!: pulumi.Output<boolean | undefined>;
    /**
     * Information about the venue in which the Access Point is located.
     */
    public readonly venue!: pulumi.Output<string | undefined>;
    /**
     * A list of colon-separated venue names and language codes.
     */
    public readonly venueNames!: pulumi.Output<string[] | undefined>;
    /**
     * An option to indicate that the Access Point or the network is at its max capacity.
     */
    public readonly wanAtCapacity!: pulumi.Output<boolean | undefined>;
    /**
     * The downlink speed of the WAN connection set in kbps.
     */
    public readonly wanDownlink!: pulumi.Output<number | undefined>;
    /**
     * The downlink load of the WAN connection measured over `wan_measurement_duration`.
     */
    public readonly wanDownlinkLoad!: pulumi.Output<number | undefined>;
    /**
     * The duration during which `wan_downlink_load` and `wan_uplink_load` are measured.
     */
    public readonly wanMeasurementDuration!: pulumi.Output<number | undefined>;
    /**
     * Information about the status of the Access Point's WAN connection.
     */
    public readonly wanStatus!: pulumi.Output<string | undefined>;
    /**
     * An option to indicate that the WAN link is symmetric (upload and download speeds are the same).
     */
    public readonly wanSymmetric!: pulumi.Output<boolean | undefined>;
    /**
     * The uplink speed of the WAN connection set in kbps.
     */
    public readonly wanUplink!: pulumi.Output<number | undefined>;
    /**
     * The uplink load of the WAN connection measured over `wan_measurement_duration`.
     */
    public readonly wanUplinkLoad!: pulumi.Output<number | undefined>;
    public readonly wifiInterworkingId!: pulumi.Output<string>;

    /**
     * Create a WifiInterworking resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WifiInterworkingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WifiInterworkingArgs | WifiInterworkingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WifiInterworkingState | undefined;
            resourceInputs["3gppInfos"] = state ? state['3gppInfos'] : undefined;
            resourceInputs["3gppRaw"] = state ? state['3gppRaw'] : undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["asra"] = state ? state.asra : undefined;
            resourceInputs["authenticationTypes"] = state ? state.authenticationTypes : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["connectionCapabilities"] = state ? state.connectionCapabilities : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["domainNames"] = state ? state.domainNames : undefined;
            resourceInputs["esr"] = state ? state.esr : undefined;
            resourceInputs["hessid"] = state ? state.hessid : undefined;
            resourceInputs["hotspot20"] = state ? state.hotspot20 : undefined;
            resourceInputs["hotspot20Dgaf"] = state ? state.hotspot20Dgaf : undefined;
            resourceInputs["internet"] = state ? state.internet : undefined;
            resourceInputs["ipv4Availability"] = state ? state.ipv4Availability : undefined;
            resourceInputs["ipv6Availability"] = state ? state.ipv6Availability : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["operationalClasses"] = state ? state.operationalClasses : undefined;
            resourceInputs["operatorNames"] = state ? state.operatorNames : undefined;
            resourceInputs["realms"] = state ? state.realms : undefined;
            resourceInputs["realmsRaws"] = state ? state.realmsRaws : undefined;
            resourceInputs["roamingOis"] = state ? state.roamingOis : undefined;
            resourceInputs["uesa"] = state ? state.uesa : undefined;
            resourceInputs["venue"] = state ? state.venue : undefined;
            resourceInputs["venueNames"] = state ? state.venueNames : undefined;
            resourceInputs["wanAtCapacity"] = state ? state.wanAtCapacity : undefined;
            resourceInputs["wanDownlink"] = state ? state.wanDownlink : undefined;
            resourceInputs["wanDownlinkLoad"] = state ? state.wanDownlinkLoad : undefined;
            resourceInputs["wanMeasurementDuration"] = state ? state.wanMeasurementDuration : undefined;
            resourceInputs["wanStatus"] = state ? state.wanStatus : undefined;
            resourceInputs["wanSymmetric"] = state ? state.wanSymmetric : undefined;
            resourceInputs["wanUplink"] = state ? state.wanUplink : undefined;
            resourceInputs["wanUplinkLoad"] = state ? state.wanUplinkLoad : undefined;
            resourceInputs["wifiInterworkingId"] = state ? state.wifiInterworkingId : undefined;
        } else {
            const args = argsOrState as WifiInterworkingArgs | undefined;
            resourceInputs["3gppInfos"] = args ? args['3gppInfos'] : undefined;
            resourceInputs["3gppRaw"] = args ? args['3gppRaw'] : undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["asra"] = args ? args.asra : undefined;
            resourceInputs["authenticationTypes"] = args ? args.authenticationTypes : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["connectionCapabilities"] = args ? args.connectionCapabilities : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["domainNames"] = args ? args.domainNames : undefined;
            resourceInputs["esr"] = args ? args.esr : undefined;
            resourceInputs["hessid"] = args ? args.hessid : undefined;
            resourceInputs["hotspot20"] = args ? args.hotspot20 : undefined;
            resourceInputs["hotspot20Dgaf"] = args ? args.hotspot20Dgaf : undefined;
            resourceInputs["internet"] = args ? args.internet : undefined;
            resourceInputs["ipv4Availability"] = args ? args.ipv4Availability : undefined;
            resourceInputs["ipv6Availability"] = args ? args.ipv6Availability : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["operationalClasses"] = args ? args.operationalClasses : undefined;
            resourceInputs["operatorNames"] = args ? args.operatorNames : undefined;
            resourceInputs["realms"] = args ? args.realms : undefined;
            resourceInputs["realmsRaws"] = args ? args.realmsRaws : undefined;
            resourceInputs["roamingOis"] = args ? args.roamingOis : undefined;
            resourceInputs["uesa"] = args ? args.uesa : undefined;
            resourceInputs["venue"] = args ? args.venue : undefined;
            resourceInputs["venueNames"] = args ? args.venueNames : undefined;
            resourceInputs["wanAtCapacity"] = args ? args.wanAtCapacity : undefined;
            resourceInputs["wanDownlink"] = args ? args.wanDownlink : undefined;
            resourceInputs["wanDownlinkLoad"] = args ? args.wanDownlinkLoad : undefined;
            resourceInputs["wanMeasurementDuration"] = args ? args.wanMeasurementDuration : undefined;
            resourceInputs["wanStatus"] = args ? args.wanStatus : undefined;
            resourceInputs["wanSymmetric"] = args ? args.wanSymmetric : undefined;
            resourceInputs["wanUplink"] = args ? args.wanUplink : undefined;
            resourceInputs["wanUplinkLoad"] = args ? args.wanUplinkLoad : undefined;
            resourceInputs["wifiInterworkingId"] = args ? args.wifiInterworkingId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WifiInterworking.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WifiInterworking resources.
 */
export interface WifiInterworkingState {
    /**
     * Cellular network advertisement information - country and network codes.
     */
    '3gppInfos'?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cellular network advertisement information - country and network codes.
     */
    '3gppRaw'?: pulumi.Input<string>;
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * An option to enable Additional Steps Required for Access.
     */
    asra?: pulumi.Input<boolean>;
    /**
     * A list of authentication types that is only effective when `asra` is set to yes.
     */
    authenticationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    comment?: pulumi.Input<string>;
    /**
     * A list to provide information about the allowed IP protocols and ports.
     */
    connectionCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    disabled?: pulumi.Input<boolean>;
    /**
     * A list of fully qualified domain names (FQDN) that indicate the entity operating the Hotspot.
     */
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An option to enable Emergency Services Reachability.
     */
    esr?: pulumi.Input<boolean>;
    /**
     * Homogenous extended service set identifier (HESSID).
     */
    hessid?: pulumi.Input<string>;
    /**
     * An option to indicate Hotspot 2.0 capability of the Access Point.
     */
    hotspot20?: pulumi.Input<boolean>;
    /**
     * An option to indicate Downstream Group-Addressed Forwarding (DGAF) capability.
     */
    hotspot20Dgaf?: pulumi.Input<boolean>;
    /**
     * An option to indicate Internet availability.
     */
    internet?: pulumi.Input<boolean>;
    /**
     * An option to indicate IPv4 availability.
     */
    ipv4Availability?: pulumi.Input<string>;
    /**
     * An option to indicate IPv6 availability.
     */
    ipv6Availability?: pulumi.Input<string>;
    /**
     * Name of the interworking profile.
     */
    name?: pulumi.Input<string>;
    /**
     * Information about network access type.
     */
    networkType?: pulumi.Input<string>;
    /**
     * A list with information about other available bands.
     */
    operationalClasses?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A list of colon-separated operator names and language codes.
     */
    operatorNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of colon-separated realm names and EAP methods.
     */
    realms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of 'NAI Realm Tuple' excluding 'NAI Realm Data Field Length' field.
     */
    realmsRaws?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of Organization Identifiers (OI).
     */
    roamingOis?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An option to enable Unauthenticated Emergency Service Accessibility.
     */
    uesa?: pulumi.Input<boolean>;
    /**
     * Information about the venue in which the Access Point is located.
     */
    venue?: pulumi.Input<string>;
    /**
     * A list of colon-separated venue names and language codes.
     */
    venueNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An option to indicate that the Access Point or the network is at its max capacity.
     */
    wanAtCapacity?: pulumi.Input<boolean>;
    /**
     * The downlink speed of the WAN connection set in kbps.
     */
    wanDownlink?: pulumi.Input<number>;
    /**
     * The downlink load of the WAN connection measured over `wan_measurement_duration`.
     */
    wanDownlinkLoad?: pulumi.Input<number>;
    /**
     * The duration during which `wan_downlink_load` and `wan_uplink_load` are measured.
     */
    wanMeasurementDuration?: pulumi.Input<number>;
    /**
     * Information about the status of the Access Point's WAN connection.
     */
    wanStatus?: pulumi.Input<string>;
    /**
     * An option to indicate that the WAN link is symmetric (upload and download speeds are the same).
     */
    wanSymmetric?: pulumi.Input<boolean>;
    /**
     * The uplink speed of the WAN connection set in kbps.
     */
    wanUplink?: pulumi.Input<number>;
    /**
     * The uplink load of the WAN connection measured over `wan_measurement_duration`.
     */
    wanUplinkLoad?: pulumi.Input<number>;
    wifiInterworkingId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WifiInterworking resource.
 */
export interface WifiInterworkingArgs {
    /**
     * Cellular network advertisement information - country and network codes.
     */
    '3gppInfos'?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cellular network advertisement information - country and network codes.
     */
    '3gppRaw'?: pulumi.Input<string>;
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * An option to enable Additional Steps Required for Access.
     */
    asra?: pulumi.Input<boolean>;
    /**
     * A list of authentication types that is only effective when `asra` is set to yes.
     */
    authenticationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    comment?: pulumi.Input<string>;
    /**
     * A list to provide information about the allowed IP protocols and ports.
     */
    connectionCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    disabled?: pulumi.Input<boolean>;
    /**
     * A list of fully qualified domain names (FQDN) that indicate the entity operating the Hotspot.
     */
    domainNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An option to enable Emergency Services Reachability.
     */
    esr?: pulumi.Input<boolean>;
    /**
     * Homogenous extended service set identifier (HESSID).
     */
    hessid?: pulumi.Input<string>;
    /**
     * An option to indicate Hotspot 2.0 capability of the Access Point.
     */
    hotspot20?: pulumi.Input<boolean>;
    /**
     * An option to indicate Downstream Group-Addressed Forwarding (DGAF) capability.
     */
    hotspot20Dgaf?: pulumi.Input<boolean>;
    /**
     * An option to indicate Internet availability.
     */
    internet?: pulumi.Input<boolean>;
    /**
     * An option to indicate IPv4 availability.
     */
    ipv4Availability?: pulumi.Input<string>;
    /**
     * An option to indicate IPv6 availability.
     */
    ipv6Availability?: pulumi.Input<string>;
    /**
     * Name of the interworking profile.
     */
    name?: pulumi.Input<string>;
    /**
     * Information about network access type.
     */
    networkType?: pulumi.Input<string>;
    /**
     * A list with information about other available bands.
     */
    operationalClasses?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * A list of colon-separated operator names and language codes.
     */
    operatorNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of colon-separated realm names and EAP methods.
     */
    realms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of 'NAI Realm Tuple' excluding 'NAI Realm Data Field Length' field.
     */
    realmsRaws?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of Organization Identifiers (OI).
     */
    roamingOis?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An option to enable Unauthenticated Emergency Service Accessibility.
     */
    uesa?: pulumi.Input<boolean>;
    /**
     * Information about the venue in which the Access Point is located.
     */
    venue?: pulumi.Input<string>;
    /**
     * A list of colon-separated venue names and language codes.
     */
    venueNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An option to indicate that the Access Point or the network is at its max capacity.
     */
    wanAtCapacity?: pulumi.Input<boolean>;
    /**
     * The downlink speed of the WAN connection set in kbps.
     */
    wanDownlink?: pulumi.Input<number>;
    /**
     * The downlink load of the WAN connection measured over `wan_measurement_duration`.
     */
    wanDownlinkLoad?: pulumi.Input<number>;
    /**
     * The duration during which `wan_downlink_load` and `wan_uplink_load` are measured.
     */
    wanMeasurementDuration?: pulumi.Input<number>;
    /**
     * Information about the status of the Access Point's WAN connection.
     */
    wanStatus?: pulumi.Input<string>;
    /**
     * An option to indicate that the WAN link is symmetric (upload and download speeds are the same).
     */
    wanSymmetric?: pulumi.Input<boolean>;
    /**
     * The uplink speed of the WAN connection set in kbps.
     */
    wanUplink?: pulumi.Input<number>;
    /**
     * The uplink load of the WAN connection measured over `wan_measurement_duration`.
     */
    wanUplinkLoad?: pulumi.Input<number>;
    wifiInterworkingId?: pulumi.Input<string>;
}
