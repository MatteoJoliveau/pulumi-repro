// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class WifiSecurity extends pulumi.CustomResource {
    /**
     * Get an existing WifiSecurity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WifiSecurityState, opts?: pulumi.CustomResourceOptions): WifiSecurity {
        return new WifiSecurity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/wifiSecurity:WifiSecurity';

    /**
     * Returns true if the given object is an instance of WifiSecurity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WifiSecurity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WifiSecurity.__pulumiType;
    }

    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___id_!: pulumi.Output<number | undefined>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    public readonly ___path_!: pulumi.Output<string | undefined>;
    /**
     * Authentication types to enable on the interface.
     */
    public readonly authenticationTypes!: pulumi.Output<string[] | undefined>;
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * APs within the same connect group do not allow more than 1 client device with the same MAC address.
     */
    public readonly connectGroup!: pulumi.Output<string | undefined>;
    /**
     * An option to determine how a connection is handled if the MAC address of the client device is the same as that of
     * another active connection to another AP.
     */
    public readonly connectPriority!: pulumi.Output<string | undefined>;
    /**
     * Identifiers of elliptic curve cryptography groups to use in SAE (WPA3) authentication.
     */
    public readonly dhGroups!: pulumi.Output<number[] | undefined>;
    /**
     * An option to disable inclusion of a PMKID in EAPOL frames.
     */
    public readonly disablePmkid!: pulumi.Output<boolean | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    /**
     * An option to send accounting information to RADIUS server for EAP-authenticated peers.
     */
    public readonly eapAccounting!: pulumi.Output<boolean | undefined>;
    /**
     * An option to specify anonymous identity for EAP outer authentication.
     */
    public readonly eapAnonymousIdentity!: pulumi.Output<string | undefined>;
    /**
     * A policy for handling the TLS certificate of the RADIUS server.
     */
    public readonly eapCertificateMode!: pulumi.Output<string | undefined>;
    /**
     * A set of EAP methods to consider for authentication.
     */
    public readonly eapMethods!: pulumi.Output<string[] | undefined>;
    /**
     * Password to use when the chosen EAP method requires one.
     */
    public readonly eapPassword!: pulumi.Output<string | undefined>;
    /**
     * Name or id of a certificate in the device's certificate store to use when the chosen EAP authentication method requires
     * one.
     */
    public readonly eapTlsCertificate!: pulumi.Output<string | undefined>;
    /**
     * Username to use when the chosen EAP method requires one.
     */
    public readonly eapUsername!: pulumi.Output<string | undefined>;
    /**
     * A list of ciphers to support for encrypting unicast traffic.
     */
    public readonly encryptions!: pulumi.Output<string[] | undefined>;
    /**
     * An option to enable 802.11r fast BSS transitions (roaming).
     */
    public readonly ft!: pulumi.Output<boolean | undefined>;
    /**
     * The fast BSS transition mobility domain ID.
     */
    public readonly ftMobilityDomain!: pulumi.Output<number | undefined>;
    /**
     * Fast BSS transition PMK-R0 key holder identifier.
     */
    public readonly ftNasIdentifier!: pulumi.Output<string | undefined>;
    /**
     * An option to enable fast BSS transitions over DS (distributed system).
     */
    public readonly ftOverDs!: pulumi.Output<boolean | undefined>;
    /**
     * An option to preserve VLAN ID when roaming.
     */
    public readonly ftPreserveVlanid!: pulumi.Output<boolean | undefined>;
    /**
     * The lifetime of the fast BSS transition PMK-R0 encryption key.
     */
    public readonly ftR0KeyLifetime!: pulumi.Output<string | undefined>;
    /**
     * Fast BSS transition reassociation deadline.
     */
    public readonly ftReassociationDeadline!: pulumi.Output<string | undefined>;
    /**
     * A cipher to use for encrypting multicast traffic.
     */
    public readonly groupEncryption!: pulumi.Output<string | undefined>;
    /**
     * The interval at which the group temporal key (key for encrypting broadcast traffic) is renewed.
     */
    public readonly groupKeyUpdate!: pulumi.Output<string | undefined>;
    /**
     * A cipher to use for encrypting protected management frames.
     */
    public readonly managementEncryption!: pulumi.Output<string | undefined>;
    /**
     * An option to enable 802.11w management frame protection.
     */
    public readonly managementProtection!: pulumi.Output<string | undefined>;
    /**
     * Name of the security profile.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name or internal ID of an interface which MAC address and SSID to advertise as the matching AP when running in OWE
     * transition mode.
     */
    public readonly oweTransitionInterface!: pulumi.Output<string | undefined>;
    /**
     * Passphrase to use for PSK authentication types.
     */
    public readonly passphrase!: pulumi.Output<string | undefined>;
    /**
     * A parameter to mitigate DoS attacks by specifying a threshold of in-progress SAE authentications.
     */
    public readonly saeAntiCloggingThreshold!: pulumi.Output<string | undefined>;
    /**
     * Rate of failed SAE (WPA3) associations per minute, at which the AP will stop processing new association requests.
     */
    public readonly saeMaxFailureRate!: pulumi.Output<string | undefined>;
    /**
     * Methods to support for deriving SAE password element.
     */
    public readonly saePwe!: pulumi.Output<string | undefined>;
    public readonly wifiSecurityId!: pulumi.Output<string>;
    /**
     * An option to enable WPS (Wi-Fi Protected Setup).
     */
    public readonly wps!: pulumi.Output<string | undefined>;

    /**
     * Create a WifiSecurity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WifiSecurityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WifiSecurityArgs | WifiSecurityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WifiSecurityState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["authenticationTypes"] = state ? state.authenticationTypes : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["connectGroup"] = state ? state.connectGroup : undefined;
            resourceInputs["connectPriority"] = state ? state.connectPriority : undefined;
            resourceInputs["dhGroups"] = state ? state.dhGroups : undefined;
            resourceInputs["disablePmkid"] = state ? state.disablePmkid : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["eapAccounting"] = state ? state.eapAccounting : undefined;
            resourceInputs["eapAnonymousIdentity"] = state ? state.eapAnonymousIdentity : undefined;
            resourceInputs["eapCertificateMode"] = state ? state.eapCertificateMode : undefined;
            resourceInputs["eapMethods"] = state ? state.eapMethods : undefined;
            resourceInputs["eapPassword"] = state ? state.eapPassword : undefined;
            resourceInputs["eapTlsCertificate"] = state ? state.eapTlsCertificate : undefined;
            resourceInputs["eapUsername"] = state ? state.eapUsername : undefined;
            resourceInputs["encryptions"] = state ? state.encryptions : undefined;
            resourceInputs["ft"] = state ? state.ft : undefined;
            resourceInputs["ftMobilityDomain"] = state ? state.ftMobilityDomain : undefined;
            resourceInputs["ftNasIdentifier"] = state ? state.ftNasIdentifier : undefined;
            resourceInputs["ftOverDs"] = state ? state.ftOverDs : undefined;
            resourceInputs["ftPreserveVlanid"] = state ? state.ftPreserveVlanid : undefined;
            resourceInputs["ftR0KeyLifetime"] = state ? state.ftR0KeyLifetime : undefined;
            resourceInputs["ftReassociationDeadline"] = state ? state.ftReassociationDeadline : undefined;
            resourceInputs["groupEncryption"] = state ? state.groupEncryption : undefined;
            resourceInputs["groupKeyUpdate"] = state ? state.groupKeyUpdate : undefined;
            resourceInputs["managementEncryption"] = state ? state.managementEncryption : undefined;
            resourceInputs["managementProtection"] = state ? state.managementProtection : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oweTransitionInterface"] = state ? state.oweTransitionInterface : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["saeAntiCloggingThreshold"] = state ? state.saeAntiCloggingThreshold : undefined;
            resourceInputs["saeMaxFailureRate"] = state ? state.saeMaxFailureRate : undefined;
            resourceInputs["saePwe"] = state ? state.saePwe : undefined;
            resourceInputs["wifiSecurityId"] = state ? state.wifiSecurityId : undefined;
            resourceInputs["wps"] = state ? state.wps : undefined;
        } else {
            const args = argsOrState as WifiSecurityArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["authenticationTypes"] = args ? args.authenticationTypes : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["connectGroup"] = args ? args.connectGroup : undefined;
            resourceInputs["connectPriority"] = args ? args.connectPriority : undefined;
            resourceInputs["dhGroups"] = args ? args.dhGroups : undefined;
            resourceInputs["disablePmkid"] = args ? args.disablePmkid : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["eapAccounting"] = args ? args.eapAccounting : undefined;
            resourceInputs["eapAnonymousIdentity"] = args ? args.eapAnonymousIdentity : undefined;
            resourceInputs["eapCertificateMode"] = args ? args.eapCertificateMode : undefined;
            resourceInputs["eapMethods"] = args ? args.eapMethods : undefined;
            resourceInputs["eapPassword"] = args ? args.eapPassword : undefined;
            resourceInputs["eapTlsCertificate"] = args ? args.eapTlsCertificate : undefined;
            resourceInputs["eapUsername"] = args ? args.eapUsername : undefined;
            resourceInputs["encryptions"] = args ? args.encryptions : undefined;
            resourceInputs["ft"] = args ? args.ft : undefined;
            resourceInputs["ftMobilityDomain"] = args ? args.ftMobilityDomain : undefined;
            resourceInputs["ftNasIdentifier"] = args ? args.ftNasIdentifier : undefined;
            resourceInputs["ftOverDs"] = args ? args.ftOverDs : undefined;
            resourceInputs["ftPreserveVlanid"] = args ? args.ftPreserveVlanid : undefined;
            resourceInputs["ftR0KeyLifetime"] = args ? args.ftR0KeyLifetime : undefined;
            resourceInputs["ftReassociationDeadline"] = args ? args.ftReassociationDeadline : undefined;
            resourceInputs["groupEncryption"] = args ? args.groupEncryption : undefined;
            resourceInputs["groupKeyUpdate"] = args ? args.groupKeyUpdate : undefined;
            resourceInputs["managementEncryption"] = args ? args.managementEncryption : undefined;
            resourceInputs["managementProtection"] = args ? args.managementProtection : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oweTransitionInterface"] = args ? args.oweTransitionInterface : undefined;
            resourceInputs["passphrase"] = args ? args.passphrase : undefined;
            resourceInputs["saeAntiCloggingThreshold"] = args ? args.saeAntiCloggingThreshold : undefined;
            resourceInputs["saeMaxFailureRate"] = args ? args.saeMaxFailureRate : undefined;
            resourceInputs["saePwe"] = args ? args.saePwe : undefined;
            resourceInputs["wifiSecurityId"] = args ? args.wifiSecurityId : undefined;
            resourceInputs["wps"] = args ? args.wps : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WifiSecurity.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WifiSecurity resources.
 */
export interface WifiSecurityState {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Authentication types to enable on the interface.
     */
    authenticationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    comment?: pulumi.Input<string>;
    /**
     * APs within the same connect group do not allow more than 1 client device with the same MAC address.
     */
    connectGroup?: pulumi.Input<string>;
    /**
     * An option to determine how a connection is handled if the MAC address of the client device is the same as that of
     * another active connection to another AP.
     */
    connectPriority?: pulumi.Input<string>;
    /**
     * Identifiers of elliptic curve cryptography groups to use in SAE (WPA3) authentication.
     */
    dhGroups?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * An option to disable inclusion of a PMKID in EAPOL frames.
     */
    disablePmkid?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    /**
     * An option to send accounting information to RADIUS server for EAP-authenticated peers.
     */
    eapAccounting?: pulumi.Input<boolean>;
    /**
     * An option to specify anonymous identity for EAP outer authentication.
     */
    eapAnonymousIdentity?: pulumi.Input<string>;
    /**
     * A policy for handling the TLS certificate of the RADIUS server.
     */
    eapCertificateMode?: pulumi.Input<string>;
    /**
     * A set of EAP methods to consider for authentication.
     */
    eapMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Password to use when the chosen EAP method requires one.
     */
    eapPassword?: pulumi.Input<string>;
    /**
     * Name or id of a certificate in the device's certificate store to use when the chosen EAP authentication method requires
     * one.
     */
    eapTlsCertificate?: pulumi.Input<string>;
    /**
     * Username to use when the chosen EAP method requires one.
     */
    eapUsername?: pulumi.Input<string>;
    /**
     * A list of ciphers to support for encrypting unicast traffic.
     */
    encryptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An option to enable 802.11r fast BSS transitions (roaming).
     */
    ft?: pulumi.Input<boolean>;
    /**
     * The fast BSS transition mobility domain ID.
     */
    ftMobilityDomain?: pulumi.Input<number>;
    /**
     * Fast BSS transition PMK-R0 key holder identifier.
     */
    ftNasIdentifier?: pulumi.Input<string>;
    /**
     * An option to enable fast BSS transitions over DS (distributed system).
     */
    ftOverDs?: pulumi.Input<boolean>;
    /**
     * An option to preserve VLAN ID when roaming.
     */
    ftPreserveVlanid?: pulumi.Input<boolean>;
    /**
     * The lifetime of the fast BSS transition PMK-R0 encryption key.
     */
    ftR0KeyLifetime?: pulumi.Input<string>;
    /**
     * Fast BSS transition reassociation deadline.
     */
    ftReassociationDeadline?: pulumi.Input<string>;
    /**
     * A cipher to use for encrypting multicast traffic.
     */
    groupEncryption?: pulumi.Input<string>;
    /**
     * The interval at which the group temporal key (key for encrypting broadcast traffic) is renewed.
     */
    groupKeyUpdate?: pulumi.Input<string>;
    /**
     * A cipher to use for encrypting protected management frames.
     */
    managementEncryption?: pulumi.Input<string>;
    /**
     * An option to enable 802.11w management frame protection.
     */
    managementProtection?: pulumi.Input<string>;
    /**
     * Name of the security profile.
     */
    name?: pulumi.Input<string>;
    /**
     * Name or internal ID of an interface which MAC address and SSID to advertise as the matching AP when running in OWE
     * transition mode.
     */
    oweTransitionInterface?: pulumi.Input<string>;
    /**
     * Passphrase to use for PSK authentication types.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * A parameter to mitigate DoS attacks by specifying a threshold of in-progress SAE authentications.
     */
    saeAntiCloggingThreshold?: pulumi.Input<string>;
    /**
     * Rate of failed SAE (WPA3) associations per minute, at which the AP will stop processing new association requests.
     */
    saeMaxFailureRate?: pulumi.Input<string>;
    /**
     * Methods to support for deriving SAE password element.
     */
    saePwe?: pulumi.Input<string>;
    wifiSecurityId?: pulumi.Input<string>;
    /**
     * An option to enable WPS (Wi-Fi Protected Setup).
     */
    wps?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WifiSecurity resource.
 */
export interface WifiSecurityArgs {
    /**
     * <em>Resource ID type (.id / name). This is an internal service field, setting a value is not required.</em>
     */
    ___id_?: pulumi.Input<number>;
    /**
     * <em>Resource path for CRUD operations. This is an internal service field, setting a value is not required.</em>
     */
    ___path_?: pulumi.Input<string>;
    /**
     * Authentication types to enable on the interface.
     */
    authenticationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    comment?: pulumi.Input<string>;
    /**
     * APs within the same connect group do not allow more than 1 client device with the same MAC address.
     */
    connectGroup?: pulumi.Input<string>;
    /**
     * An option to determine how a connection is handled if the MAC address of the client device is the same as that of
     * another active connection to another AP.
     */
    connectPriority?: pulumi.Input<string>;
    /**
     * Identifiers of elliptic curve cryptography groups to use in SAE (WPA3) authentication.
     */
    dhGroups?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * An option to disable inclusion of a PMKID in EAPOL frames.
     */
    disablePmkid?: pulumi.Input<boolean>;
    disabled?: pulumi.Input<boolean>;
    /**
     * An option to send accounting information to RADIUS server for EAP-authenticated peers.
     */
    eapAccounting?: pulumi.Input<boolean>;
    /**
     * An option to specify anonymous identity for EAP outer authentication.
     */
    eapAnonymousIdentity?: pulumi.Input<string>;
    /**
     * A policy for handling the TLS certificate of the RADIUS server.
     */
    eapCertificateMode?: pulumi.Input<string>;
    /**
     * A set of EAP methods to consider for authentication.
     */
    eapMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Password to use when the chosen EAP method requires one.
     */
    eapPassword?: pulumi.Input<string>;
    /**
     * Name or id of a certificate in the device's certificate store to use when the chosen EAP authentication method requires
     * one.
     */
    eapTlsCertificate?: pulumi.Input<string>;
    /**
     * Username to use when the chosen EAP method requires one.
     */
    eapUsername?: pulumi.Input<string>;
    /**
     * A list of ciphers to support for encrypting unicast traffic.
     */
    encryptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An option to enable 802.11r fast BSS transitions (roaming).
     */
    ft?: pulumi.Input<boolean>;
    /**
     * The fast BSS transition mobility domain ID.
     */
    ftMobilityDomain?: pulumi.Input<number>;
    /**
     * Fast BSS transition PMK-R0 key holder identifier.
     */
    ftNasIdentifier?: pulumi.Input<string>;
    /**
     * An option to enable fast BSS transitions over DS (distributed system).
     */
    ftOverDs?: pulumi.Input<boolean>;
    /**
     * An option to preserve VLAN ID when roaming.
     */
    ftPreserveVlanid?: pulumi.Input<boolean>;
    /**
     * The lifetime of the fast BSS transition PMK-R0 encryption key.
     */
    ftR0KeyLifetime?: pulumi.Input<string>;
    /**
     * Fast BSS transition reassociation deadline.
     */
    ftReassociationDeadline?: pulumi.Input<string>;
    /**
     * A cipher to use for encrypting multicast traffic.
     */
    groupEncryption?: pulumi.Input<string>;
    /**
     * The interval at which the group temporal key (key for encrypting broadcast traffic) is renewed.
     */
    groupKeyUpdate?: pulumi.Input<string>;
    /**
     * A cipher to use for encrypting protected management frames.
     */
    managementEncryption?: pulumi.Input<string>;
    /**
     * An option to enable 802.11w management frame protection.
     */
    managementProtection?: pulumi.Input<string>;
    /**
     * Name of the security profile.
     */
    name?: pulumi.Input<string>;
    /**
     * Name or internal ID of an interface which MAC address and SSID to advertise as the matching AP when running in OWE
     * transition mode.
     */
    oweTransitionInterface?: pulumi.Input<string>;
    /**
     * Passphrase to use for PSK authentication types.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * A parameter to mitigate DoS attacks by specifying a threshold of in-progress SAE authentications.
     */
    saeAntiCloggingThreshold?: pulumi.Input<string>;
    /**
     * Rate of failed SAE (WPA3) associations per minute, at which the AP will stop processing new association requests.
     */
    saeMaxFailureRate?: pulumi.Input<string>;
    /**
     * Methods to support for deriving SAE password element.
     */
    saePwe?: pulumi.Input<string>;
    wifiSecurityId?: pulumi.Input<string>;
    /**
     * An option to enable WPS (Wi-Fi Protected Setup).
     */
    wps?: pulumi.Input<string>;
}
