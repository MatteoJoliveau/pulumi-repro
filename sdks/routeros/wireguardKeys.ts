// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WireguardKeys extends pulumi.CustomResource {
    /**
     * Get an existing WireguardKeys resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WireguardKeysState, opts?: pulumi.CustomResourceOptions): WireguardKeys {
        return new WireguardKeys(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'routeros:index/wireguardKeys:WireguardKeys';

    /**
     * Returns true if the given object is an instance of WireguardKeys.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WireguardKeys {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WireguardKeys.__pulumiType;
    }

    public readonly ___id_!: pulumi.Output<number | undefined>;
    public readonly ___path_!: pulumi.Output<string | undefined>;
    public /*out*/ readonly keys!: pulumi.Output<outputs.WireguardKeysKey[]>;
    /**
     * The number of key sets.
     */
    public readonly number!: pulumi.Output<number | undefined>;
    public readonly wireguardKeysId!: pulumi.Output<string>;

    /**
     * Create a WireguardKeys resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WireguardKeysArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WireguardKeysArgs | WireguardKeysState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WireguardKeysState | undefined;
            resourceInputs["___id_"] = state ? state.___id_ : undefined;
            resourceInputs["___path_"] = state ? state.___path_ : undefined;
            resourceInputs["keys"] = state ? state.keys : undefined;
            resourceInputs["number"] = state ? state.number : undefined;
            resourceInputs["wireguardKeysId"] = state ? state.wireguardKeysId : undefined;
        } else {
            const args = argsOrState as WireguardKeysArgs | undefined;
            resourceInputs["___id_"] = args ? args.___id_ : undefined;
            resourceInputs["___path_"] = args ? args.___path_ : undefined;
            resourceInputs["number"] = args ? args.number : undefined;
            resourceInputs["wireguardKeysId"] = args ? args.wireguardKeysId : undefined;
            resourceInputs["keys"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["keys"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WireguardKeys.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WireguardKeys resources.
 */
export interface WireguardKeysState {
    ___id_?: pulumi.Input<number>;
    ___path_?: pulumi.Input<string>;
    keys?: pulumi.Input<pulumi.Input<inputs.WireguardKeysKey>[]>;
    /**
     * The number of key sets.
     */
    number?: pulumi.Input<number>;
    wireguardKeysId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a WireguardKeys resource.
 */
export interface WireguardKeysArgs {
    ___id_?: pulumi.Input<number>;
    ___path_?: pulumi.Input<string>;
    /**
     * The number of key sets.
     */
    number?: pulumi.Input<number>;
    wireguardKeysId?: pulumi.Input<string>;
}
